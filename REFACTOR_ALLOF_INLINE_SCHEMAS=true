diff --git a/onshape/api_account.go b/onshape/api_account.go
index 21eca3f4a..26a09d714 100644
--- a/onshape/api_account.go
+++ b/onshape/api_account.go
@@ -83,6 +83,9 @@ func (a *AccountApiService) CancelPurchaseNewExecute(r ApiCancelPurchaseNewReque
 
 	if r.cancelImmediately != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "cancelImmediately", r.cancelImmediately, "")
+	} else {
+		var defaultValue bool = false
+		r.cancelImmediately = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -326,9 +329,15 @@ func (a *AccountApiService) GetPlanPurchasesExecute(r ApiGetPlanPurchasesRequest
 
 	if r.offset != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
+	} else {
+		var defaultValue int32 = 0
+		r.offset = &defaultValue
 	}
 	if r.limit != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
+	} else {
+		var defaultValue int32 = 20
+		r.limit = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -458,12 +467,21 @@ func (a *AccountApiService) GetPurchasesExecute(r ApiGetPurchasesRequest) ([]BTP
 
 	if r.all != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "all", r.all, "")
+	} else {
+		var defaultValue bool = false
+		r.all = &defaultValue
 	}
 	if r.ownPurchaseOnly != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "ownPurchaseOnly", r.ownPurchaseOnly, "")
+	} else {
+		var defaultValue bool = false
+		r.ownPurchaseOnly = &defaultValue
 	}
 	if r.includeGoDEnabledAppPurchases != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeGoDEnabledAppPurchases", r.includeGoDEnabledAppPurchases, "")
+	} else {
+		var defaultValue bool = false
+		r.includeGoDEnabledAppPurchases = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_alias.go b/onshape/api_alias.go
index 24658f00b..899aee24d 100644
--- a/onshape/api_alias.go
+++ b/onshape/api_alias.go
@@ -448,18 +448,33 @@ func (a *AliasApiService) GetAliasMembersExecute(r ApiGetAliasMembersRequest) (*
 
 	if r.prefix != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "prefix", r.prefix, "")
+	} else {
+		var defaultValue string = ""
+		r.prefix = &defaultValue
 	}
 	if r.sortColumn != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "sortColumn", r.sortColumn, "")
+	} else {
+		var defaultValue string = "name"
+		r.sortColumn = &defaultValue
 	}
 	if r.sortOrder != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
+	} else {
+		var defaultValue string = "asc"
+		r.sortOrder = &defaultValue
 	}
 	if r.offset != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
+	} else {
+		var defaultValue int32 = 0
+		r.offset = &defaultValue
 	}
 	if r.limit != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
+	} else {
+		var defaultValue int32 = 20
+		r.limit = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -599,18 +614,33 @@ func (a *AliasApiService) GetAliasesInCompanyExecute(r ApiGetAliasesInCompanyReq
 
 	if r.prefix != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "prefix", r.prefix, "")
+	} else {
+		var defaultValue string = ""
+		r.prefix = &defaultValue
 	}
 	if r.sortColumn != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "sortColumn", r.sortColumn, "")
+	} else {
+		var defaultValue string = "name"
+		r.sortColumn = &defaultValue
 	}
 	if r.sortOrder != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
+	} else {
+		var defaultValue string = "asc"
+		r.sortOrder = &defaultValue
 	}
 	if r.offset != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
+	} else {
+		var defaultValue int32 = 0
+		r.offset = &defaultValue
 	}
 	if r.limit != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
+	} else {
+		var defaultValue int32 = 20
+		r.limit = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_api_application.go b/onshape/api_api_application.go
index cab3ad77c..0f935a8b3 100644
--- a/onshape/api_api_application.go
+++ b/onshape/api_api_application.go
@@ -86,7 +86,7 @@ func (a *APIApplicationApiService) DeleteAppSettingsExecute(r ApiDeleteAppSettin
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "key", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "key", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "key", t, "multi")
@@ -202,7 +202,7 @@ func (a *APIApplicationApiService) DeleteCompanyAppSettingsExecute(r ApiDeleteCo
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "key", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "key", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "key", t, "multi")
@@ -330,6 +330,9 @@ func (a *APIApplicationApiService) GetApplicableExtensionsForClientExecute(r Api
 
 	if r.validPurchases != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "validPurchases", r.validPurchases, "")
+	} else {
+		var defaultValue bool = false
+		r.validPurchases = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -468,7 +471,7 @@ func (a *APIApplicationApiService) GetCompanyAppSettingsExecute(r ApiGetCompanyA
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "key", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "key", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "key", t, "multi")
@@ -601,7 +604,7 @@ func (a *APIApplicationApiService) GetUserAppSettingsExecute(r ApiGetUserAppSett
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "key", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "key", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "key", t, "multi")
diff --git a/onshape/api_app_associative_data.go b/onshape/api_app_associative_data.go
index b81737c0f..488586519 100644
--- a/onshape/api_app_associative_data.go
+++ b/onshape/api_app_associative_data.go
@@ -294,16 +294,22 @@ func (a *AppAssociativeDataApiService) DeleteAssociativeDataExecute(r ApiDeleteA
 
 	if r.transactionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "transactionId", r.transactionId, "")
+	} else {
+		var defaultValue string = ""
+		r.transactionId = &defaultValue
 	}
 	if r.parentChangeId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "parentChangeId", r.parentChangeId, "")
+	} else {
+		var defaultValue string = ""
+		r.parentChangeId = &defaultValue
 	}
 	if r.associativeDataId != nil {
 		t := *r.associativeDataId
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "associativeDataId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "associativeDataId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "associativeDataId", t, "multi")
@@ -311,33 +317,63 @@ func (a *AppAssociativeDataApiService) DeleteAssociativeDataExecute(r ApiDeleteA
 	}
 	if r.externalDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "externalDocumentId", r.externalDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.externalDocumentId = &defaultValue
 	}
 	if r.elementId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementId", r.elementId, "")
+	} else {
+		var defaultValue string = ""
+		r.elementId = &defaultValue
 	}
 	if r.viewId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "viewId", r.viewId, "")
+	} else {
+		var defaultValue string = ""
+		r.viewId = &defaultValue
 	}
 	if r.microversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "microversionId", r.microversionId, "")
+	} else {
+		var defaultValue string = ""
+		r.microversionId = &defaultValue
 	}
 	if r.documentMicroversion != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "documentMicroversion", r.documentMicroversion, "")
+	} else {
+		var defaultValue string = ""
+		r.documentMicroversion = &defaultValue
 	}
 	if r.deterministicId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "deterministicId", r.deterministicId, "")
+	} else {
+		var defaultValue string = ""
+		r.deterministicId = &defaultValue
 	}
 	if r.featureId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "featureId", r.featureId, "")
+	} else {
+		var defaultValue string = ""
+		r.featureId = &defaultValue
 	}
 	if r.entityId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "entityId", r.entityId, "")
+	} else {
+		var defaultValue string = ""
+		r.entityId = &defaultValue
 	}
 	if r.occurrenceId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "occurrenceId", r.occurrenceId, "")
+	} else {
+		var defaultValue string = ""
+		r.occurrenceId = &defaultValue
 	}
 	if r.referenceId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "referenceId", r.referenceId, "")
+	} else {
+		var defaultValue string = ""
+		r.referenceId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -556,19 +592,28 @@ func (a *AppAssociativeDataApiService) GetAssociativeDataExecute(r ApiGetAssocia
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.transactionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "transactionId", r.transactionId, "")
+	} else {
+		var defaultValue string = ""
+		r.transactionId = &defaultValue
 	}
 	if r.changeId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "changeId", r.changeId, "")
+	} else {
+		var defaultValue string = ""
+		r.changeId = &defaultValue
 	}
 	if r.associativeDataId != nil {
 		t := *r.associativeDataId
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "associativeDataId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "associativeDataId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "associativeDataId", t, "multi")
@@ -576,36 +621,69 @@ func (a *AppAssociativeDataApiService) GetAssociativeDataExecute(r ApiGetAssocia
 	}
 	if r.externalDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "externalDocumentId", r.externalDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.externalDocumentId = &defaultValue
 	}
 	if r.elementId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementId", r.elementId, "")
+	} else {
+		var defaultValue string = ""
+		r.elementId = &defaultValue
 	}
 	if r.viewId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "viewId", r.viewId, "")
+	} else {
+		var defaultValue string = ""
+		r.viewId = &defaultValue
 	}
 	if r.microversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "microversionId", r.microversionId, "")
+	} else {
+		var defaultValue string = ""
+		r.microversionId = &defaultValue
 	}
 	if r.documentMicroversion != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "documentMicroversion", r.documentMicroversion, "")
+	} else {
+		var defaultValue string = ""
+		r.documentMicroversion = &defaultValue
 	}
 	if r.deterministicId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "deterministicId", r.deterministicId, "")
+	} else {
+		var defaultValue string = ""
+		r.deterministicId = &defaultValue
 	}
 	if r.featureId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "featureId", r.featureId, "")
+	} else {
+		var defaultValue string = ""
+		r.featureId = &defaultValue
 	}
 	if r.entityId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "entityId", r.entityId, "")
+	} else {
+		var defaultValue string = ""
+		r.entityId = &defaultValue
 	}
 	if r.occurrenceId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "occurrenceId", r.occurrenceId, "")
+	} else {
+		var defaultValue string = ""
+		r.occurrenceId = &defaultValue
 	}
 	if r.returnIdTags != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "returnIdTags", r.returnIdTags, "")
+	} else {
+		var defaultValue bool = false
+		r.returnIdTags = &defaultValue
 	}
 	if r.referenceId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "referenceId", r.referenceId, "")
+	} else {
+		var defaultValue string = ""
+		r.referenceId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_app_drawing_view.go b/onshape/api_app_drawing_view.go
index b738ba9ca..2441cdaa5 100644
--- a/onshape/api_app_drawing_view.go
+++ b/onshape/api_app_drawing_view.go
@@ -107,9 +107,15 @@ func (a *AppDrawingViewApiService) GetDrawingViewJsonGeometryExecute(r ApiGetDra
 
 	if r.transactionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "transactionId", r.transactionId, "")
+	} else {
+		var defaultValue string = ""
+		r.transactionId = &defaultValue
 	}
 	if r.changeId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "changeId", r.changeId, "")
+	} else {
+		var defaultValue string = ""
+		r.changeId = &defaultValue
 	}
 	if r.scale != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "scale", r.scale, "")
@@ -257,12 +263,21 @@ func (a *AppDrawingViewApiService) GetDrawingViewsExecute(r ApiGetDrawingViewsRe
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.transactionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "transactionId", r.transactionId, "")
+	} else {
+		var defaultValue string = ""
+		r.transactionId = &defaultValue
 	}
 	if r.changeId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "changeId", r.changeId, "")
+	} else {
+		var defaultValue string = ""
+		r.changeId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_app_element.go b/onshape/api_app_element.go
index 16c148391..dd0f72629 100644
--- a/onshape/api_app_element.go
+++ b/onshape/api_app_element.go
@@ -95,6 +95,9 @@ func (a *AppElementApiService) AbortTransactionExecute(r ApiAbortTransactionRequ
 
 	if r.returnError != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "returnError", r.returnError, "")
+	} else {
+		var defaultValue bool = true
+		r.returnError = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -230,6 +233,9 @@ func (a *AppElementApiService) BulkCreateElementExecute(r ApiBulkCreateElementRe
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}
@@ -367,6 +373,9 @@ func (a *AppElementApiService) CommitTransactionsExecute(r ApiCommitTransactions
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}
@@ -671,6 +680,9 @@ func (a *AppElementApiService) CreateElementExecute(r ApiCreateElementRequest) (
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}
@@ -1111,7 +1123,7 @@ func (a *AppElementApiService) DeleteAppElementContentBatchExecute(r ApiDeleteAp
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "subelementIds", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "subelementIds", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "subelementIds", t, "multi")
@@ -2277,6 +2289,9 @@ func (a *AppElementApiService) GetJsonExecute(r ApiGetJsonRequest) (*BTGetJsonRe
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.transactionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "transactionId", r.transactionId, "")
@@ -2435,6 +2450,9 @@ func (a *AppElementApiService) GetJsonPathsExecute(r ApiGetJsonPathsRequest) (*B
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.transactionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "transactionId", r.transactionId, "")
@@ -2599,6 +2617,9 @@ func (a *AppElementApiService) GetSubElementContentExecute(r ApiGetSubElementCon
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.transactionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "transactionId", r.transactionId, "")
@@ -2912,6 +2933,9 @@ func (a *AppElementApiService) ResolveReferenceExecute(r ApiResolveReferenceRequ
 	}
 	if r.includeInternal != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInternal", r.includeInternal, "")
+	} else {
+		var defaultValue bool = false
+		r.includeInternal = &defaultValue
 	}
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
@@ -3073,6 +3097,9 @@ func (a *AppElementApiService) ResolveReferencesExecute(r ApiResolveReferencesRe
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.transactionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "transactionId", r.transactionId, "")
@@ -3082,9 +3109,15 @@ func (a *AppElementApiService) ResolveReferencesExecute(r ApiResolveReferencesRe
 	}
 	if r.includeInternal != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInternal", r.includeInternal, "")
+	} else {
+		var defaultValue bool = false
+		r.includeInternal = &defaultValue
 	}
 	if r.referenceIds != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "referenceIds", r.referenceIds, "")
+	} else {
+		var defaultValue string = ""
+		r.referenceIds = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -3670,7 +3703,6 @@ func (a *AppElementApiService) UploadBlobSubelementExecute(r ApiUploadBlobSubele
 	var fileLocalVarFileBytes []byte
 
 	fileLocalVarFormFileName = "file"
-
 	fileLocalVarFile := r.file
 
 	if fileLocalVarFile != nil {
diff --git a/onshape/api_assembly.go b/onshape/api_assembly.go
index c68c5aed8..acbd1f075 100644
--- a/onshape/api_assembly.go
+++ b/onshape/api_assembly.go
@@ -749,9 +749,15 @@ func (a *AssemblyApiService) GetAssemblyBoundingBoxesExecute(r ApiGetAssemblyBou
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.explodedViewId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "explodedViewId", r.explodedViewId, "")
@@ -767,6 +773,9 @@ func (a *AssemblyApiService) GetAssemblyBoundingBoxesExecute(r ApiGetAssemblyBou
 	}
 	if r.includeSketches != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSketches", r.includeSketches, "")
+	} else {
+		var defaultValue bool = false
+		r.includeSketches = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -939,24 +948,42 @@ func (a *AssemblyApiService) GetAssemblyDefinitionExecute(r ApiGetAssemblyDefini
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.explodedViewId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "explodedViewId", r.explodedViewId, "")
 	}
 	if r.includeMateFeatures != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMateFeatures", r.includeMateFeatures, "")
+	} else {
+		var defaultValue bool = false
+		r.includeMateFeatures = &defaultValue
 	}
 	if r.includeNonSolids != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeNonSolids", r.includeNonSolids, "")
+	} else {
+		var defaultValue bool = false
+		r.includeNonSolids = &defaultValue
 	}
 	if r.includeMateConnectors != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMateConnectors", r.includeMateConnectors, "")
+	} else {
+		var defaultValue bool = false
+		r.includeMateConnectors = &defaultValue
 	}
 	if r.excludeSuppressed != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeSuppressed", r.excludeSuppressed, "")
+	} else {
+		var defaultValue bool = false
+		r.excludeSuppressed = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -1098,9 +1125,15 @@ func (a *AssemblyApiService) GetAssemblyMassPropertiesExecute(r ApiGetAssemblyMa
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -1312,39 +1345,72 @@ func (a *AssemblyApiService) GetAssemblyShadedViewsExecute(r ApiGetAssemblyShade
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.explodedViewId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "explodedViewId", r.explodedViewId, "")
 	}
 	if r.viewMatrix != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "viewMatrix", r.viewMatrix, "")
+	} else {
+		var defaultValue string = "front"
+		r.viewMatrix = &defaultValue
 	}
 	if r.outputHeight != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputHeight", r.outputHeight, "")
+	} else {
+		var defaultValue int32 = 500
+		r.outputHeight = &defaultValue
 	}
 	if r.outputWidth != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputWidth", r.outputWidth, "")
+	} else {
+		var defaultValue int32 = 500
+		r.outputWidth = &defaultValue
 	}
 	if r.pixelSize != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "pixelSize", r.pixelSize, "")
+	} else {
+		var defaultValue float64 = 0.003
+		r.pixelSize = &defaultValue
 	}
 	if r.edges != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "edges", r.edges, "")
+	} else {
+		var defaultValue string = "show"
+		r.edges = &defaultValue
 	}
 	if r.showAllParts != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "showAllParts", r.showAllParts, "")
+	} else {
+		var defaultValue bool = false
+		r.showAllParts = &defaultValue
 	}
 	if r.includeSurfaces != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSurfaces", r.includeSurfaces, "")
+	} else {
+		var defaultValue bool = true
+		r.includeSurfaces = &defaultValue
 	}
 	if r.useAntiAliasing != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "useAntiAliasing", r.useAntiAliasing, "")
+	} else {
+		var defaultValue bool = false
+		r.useAntiAliasing = &defaultValue
 	}
 	if r.includeWires != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeWires", r.includeWires, "")
+	} else {
+		var defaultValue bool = false
+		r.includeWires = &defaultValue
 	}
 	if r.displayStateId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "displayStateId", r.displayStateId, "")
@@ -1569,16 +1635,22 @@ func (a *AssemblyApiService) GetBillOfMaterialsExecute(r ApiGetBillOfMaterialsRe
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.bomColumnIds != nil {
 		t := *r.bomColumnIds
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "bomColumnIds", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "bomColumnIds", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "bomColumnIds", t, "multi")
@@ -1586,12 +1658,21 @@ func (a *AssemblyApiService) GetBillOfMaterialsExecute(r ApiGetBillOfMaterialsRe
 	}
 	if r.indented != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "indented", r.indented, "")
+	} else {
+		var defaultValue bool = true
+		r.indented = &defaultValue
 	}
 	if r.multiLevel != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "multiLevel", r.multiLevel, "")
+	} else {
+		var defaultValue bool = false
+		r.multiLevel = &defaultValue
 	}
 	if r.generateIfAbsent != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "generateIfAbsent", r.generateIfAbsent, "")
+	} else {
+		var defaultValue bool = false
+		r.generateIfAbsent = &defaultValue
 	}
 	if r.templateId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "templateId", r.templateId, "")
@@ -1607,12 +1688,21 @@ func (a *AssemblyApiService) GetBillOfMaterialsExecute(r ApiGetBillOfMaterialsRe
 	}
 	if r.includeItemMicroversions != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeItemMicroversions", r.includeItemMicroversions, "")
+	} else {
+		var defaultValue bool = false
+		r.includeItemMicroversions = &defaultValue
 	}
 	if r.includeTopLevelAssemblyRow != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTopLevelAssemblyRow", r.includeTopLevelAssemblyRow, "")
+	} else {
+		var defaultValue bool = false
+		r.includeTopLevelAssemblyRow = &defaultValue
 	}
 	if r.thumbnail != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail", r.thumbnail, "")
+	} else {
+		var defaultValue bool = false
+		r.thumbnail = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -1758,9 +1848,15 @@ func (a *AssemblyApiService) GetExplodedViewsExecute(r ApiGetExplodedViewsReques
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.explodedViewId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "explodedViewId", r.explodedViewId, "")
@@ -2037,9 +2133,15 @@ func (a *AssemblyApiService) GetFeaturesExecute(r ApiGetFeaturesRequest) (*BTAss
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.explodedViewId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "explodedViewId", r.explodedViewId, "")
@@ -2049,7 +2151,7 @@ func (a *AssemblyApiService) GetFeaturesExecute(r ApiGetFeaturesRequest) (*BTAss
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "featureId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "featureId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "featureId", t, "multi")
@@ -2191,9 +2293,15 @@ func (a *AssemblyApiService) GetNamedPositionsExecute(r ApiGetNamedPositionsRequ
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.explodedViewId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "explodedViewId", r.explodedViewId, "")
@@ -2333,12 +2441,21 @@ func (a *AssemblyApiService) GetNamedViewsExecute(r ApiGetNamedViewsRequest) (*B
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.skipPerspective != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "skipPerspective", r.skipPerspective, "")
+	} else {
+		var defaultValue bool = true
+		r.skipPerspective = &defaultValue
 	}
 	if r.includeSectionCutViews != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSectionCutViews", r.includeSectionCutViews, "")
+	} else {
+		var defaultValue bool = false
+		r.includeSectionCutViews = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -2722,6 +2839,9 @@ func (a *AssemblyApiService) ModifyExecute(r ApiModifyRequest) (map[string]inter
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}
diff --git a/onshape/api_blob_element.go b/onshape/api_blob_element.go
index 87f0a5b14..be311ef6f 100644
--- a/onshape/api_blob_element.go
+++ b/onshape/api_blob_element.go
@@ -106,6 +106,9 @@ func (a *BlobElementApiService) CreateBlobTranslationExecute(r ApiCreateBlobTran
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}
@@ -252,6 +255,9 @@ func (a *BlobElementApiService) DownloadFileWorkspaceExecute(r ApiDownloadFileWo
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.contentDisposition != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "contentDisposition", r.contentDisposition, "")
@@ -395,6 +401,9 @@ func (a *BlobElementApiService) UpdateUnitsExecute(r ApiUpdateUnitsRequest) (*BT
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}
@@ -705,6 +714,9 @@ func (a *BlobElementApiService) UploadFileCreateElementExecute(r ApiUploadFileCr
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"multipart/form-data"}
@@ -1111,6 +1123,9 @@ func (a *BlobElementApiService) UploadFileUpdateElementExecute(r ApiUploadFileUp
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.parentChangeId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "parentChangeId", r.parentChangeId, "")
diff --git a/onshape/api_comment.go b/onshape/api_comment.go
index 6f170d94d..f4ab1e0ad 100644
--- a/onshape/api_comment.go
+++ b/onshape/api_comment.go
@@ -113,7 +113,6 @@ func (a *CommentApiService) AddAttachmentExecute(r ApiAddAttachmentRequest) (*BT
 	var fileLocalVarFileBytes []byte
 
 	fileLocalVarFormFileName = "file"
-
 	fileLocalVarFile := r.file
 
 	if fileLocalVarFile != nil {
@@ -842,33 +841,63 @@ func (a *CommentApiService) GetCommentsExecute(r ApiGetCommentsRequest) (*BTList
 
 	if r.did != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "did", r.did, "")
+	} else {
+		var defaultValue string = ""
+		r.did = &defaultValue
 	}
 	if r.objectType != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "objectType", r.objectType, "")
+	} else {
+		var defaultValue int32 = 6
+		r.objectType = &defaultValue
 	}
 	if r.pid != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "pid", r.pid, "")
+	} else {
+		var defaultValue string = ""
+		r.pid = &defaultValue
 	}
 	if r.eid != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "eid", r.eid, "")
+	} else {
+		var defaultValue string = ""
+		r.eid = &defaultValue
 	}
 	if r.filter != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
+	} else {
+		var defaultValue int32 = 0
+		r.filter = &defaultValue
 	}
 	if r.resolved != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "resolved", r.resolved, "")
+	} else {
+		var defaultValue bool = true
+		r.resolved = &defaultValue
 	}
 	if r.sortColumn != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "sortColumn", r.sortColumn, "")
+	} else {
+		var defaultValue string = "createdAt"
+		r.sortColumn = &defaultValue
 	}
 	if r.sortOrder != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
+	} else {
+		var defaultValue string = "asc"
+		r.sortOrder = &defaultValue
 	}
 	if r.offset != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
+	} else {
+		var defaultValue int32 = 0
+		r.offset = &defaultValue
 	}
 	if r.limit != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
+	} else {
+		var defaultValue int32 = 20
+		r.limit = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_company.go b/onshape/api_company.go
index b0740f217..1d2215d6e 100644
--- a/onshape/api_company.go
+++ b/onshape/api_company.go
@@ -215,9 +215,15 @@ func (a *CompanyApiService) FindCompanyExecute(r ApiFindCompanyRequest) (*BTList
 	}
 	if r.activeOnly != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "activeOnly", r.activeOnly, "")
+	} else {
+		var defaultValue bool = true
+		r.activeOnly = &defaultValue
 	}
 	if r.includeAll != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeAll", r.includeAll, "")
+	} else {
+		var defaultValue bool = false
+		r.includeAll = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -579,9 +585,15 @@ func (a *CompanyApiService) RemoveUserFromCompanyExecute(r ApiRemoveUserFromComp
 
 	if r.removeFromTeams != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "removeFromTeams", r.removeFromTeams, "")
+	} else {
+		var defaultValue bool = true
+		r.removeFromTeams = &defaultValue
 	}
 	if r.removeDirectShares != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "removeDirectShares", r.removeDirectShares, "")
+	} else {
+		var defaultValue bool = true
+		r.removeDirectShares = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_document.go b/onshape/api_document.go
index a9a74f872..8fec061dd 100644
--- a/onshape/api_document.go
+++ b/onshape/api_document.go
@@ -555,6 +555,9 @@ func (a *DocumentApiService) DeleteDocumentExecute(r ApiDeleteDocumentRequest) (
 
 	if r.forever != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "forever", r.forever, "")
+	} else {
+		var defaultValue bool = false
+		r.forever = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -926,6 +929,9 @@ func (a *DocumentApiService) Export2JsonExecute(r ApiExport2JsonRequest) (map[st
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}
@@ -1603,9 +1609,15 @@ func (a *DocumentApiService) GetDocumentVersionsExecute(r ApiGetDocumentVersions
 
 	if r.offset != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
+	} else {
+		var defaultValue int32 = 0
+		r.offset = &defaultValue
 	}
 	if r.limit != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
+	} else {
+		var defaultValue int32 = 0
+		r.limit = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -1902,27 +1914,48 @@ func (a *DocumentApiService) GetDocumentsExecute(r ApiGetDocumentsRequest) (*BTG
 
 	if r.q != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
+	} else {
+		var defaultValue string = ""
+		r.q = &defaultValue
 	}
 	if r.filter != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
 	}
 	if r.owner != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
+	} else {
+		var defaultValue string = ""
+		r.owner = &defaultValue
 	}
 	if r.ownerType != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "ownerType", r.ownerType, "")
+	} else {
+		var defaultValue int32 = 1
+		r.ownerType = &defaultValue
 	}
 	if r.sortColumn != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "sortColumn", r.sortColumn, "")
+	} else {
+		var defaultValue string = "createdAt"
+		r.sortColumn = &defaultValue
 	}
 	if r.sortOrder != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
+	} else {
+		var defaultValue string = "desc"
+		r.sortOrder = &defaultValue
 	}
 	if r.offset != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
+	} else {
+		var defaultValue int32 = 0
+		r.offset = &defaultValue
 	}
 	if r.limit != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
+	} else {
+		var defaultValue int32 = 20
+		r.limit = &defaultValue
 	}
 	if r.label != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "label", r.label, "")
@@ -2070,15 +2103,27 @@ func (a *DocumentApiService) GetElementsInDocumentExecute(r ApiGetElementsInDocu
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.elementType != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementType", r.elementType, "")
+	} else {
+		var defaultValue string = ""
+		r.elementType = &defaultValue
 	}
 	if r.elementId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementId", r.elementId, "")
+	} else {
+		var defaultValue string = ""
+		r.elementId = &defaultValue
 	}
 	if r.withThumbnails != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "withThumbnails", r.withThumbnails, "")
+	} else {
+		var defaultValue bool = false
+		r.withThumbnails = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -2348,72 +2393,138 @@ func (a *DocumentApiService) GetInsertablesExecute(r ApiGetInsertablesRequest) (
 	}
 	if r.includeParts != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeParts", r.includeParts, "")
+	} else {
+		var defaultValue bool = false
+		r.includeParts = &defaultValue
 	}
 	if r.includeSurfaces != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSurfaces", r.includeSurfaces, "")
+	} else {
+		var defaultValue bool = false
+		r.includeSurfaces = &defaultValue
 	}
 	if r.includeSketches != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSketches", r.includeSketches, "")
+	} else {
+		var defaultValue bool = false
+		r.includeSketches = &defaultValue
 	}
 	if r.includeReferenceFeatures != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeReferenceFeatures", r.includeReferenceFeatures, "")
+	} else {
+		var defaultValue bool = false
+		r.includeReferenceFeatures = &defaultValue
 	}
 	if r.includeAssemblies != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeAssemblies", r.includeAssemblies, "")
+	} else {
+		var defaultValue bool = false
+		r.includeAssemblies = &defaultValue
 	}
 	if r.includeFeatureStudios != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFeatureStudios", r.includeFeatureStudios, "")
+	} else {
+		var defaultValue bool = false
+		r.includeFeatureStudios = &defaultValue
 	}
 	if r.includeBlobs != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeBlobs", r.includeBlobs, "")
+	} else {
+		var defaultValue bool = false
+		r.includeBlobs = &defaultValue
 	}
 	if r.allowedBlobMimeTypes != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "allowedBlobMimeTypes", r.allowedBlobMimeTypes, "")
+	} else {
+		var defaultValue string = ""
+		r.allowedBlobMimeTypes = &defaultValue
 	}
 	if r.excludeNewerFSVersions != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeNewerFSVersions", r.excludeNewerFSVersions, "")
+	} else {
+		var defaultValue bool = false
+		r.excludeNewerFSVersions = &defaultValue
 	}
 	if r.maxFeatureScriptVersion != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFeatureScriptVersion", r.maxFeatureScriptVersion, "")
 	}
 	if r.includePartStudios != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includePartStudios", r.includePartStudios, "")
+	} else {
+		var defaultValue bool = false
+		r.includePartStudios = &defaultValue
 	}
 	if r.includeFeatures != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFeatures", r.includeFeatures, "")
+	} else {
+		var defaultValue bool = false
+		r.includeFeatures = &defaultValue
 	}
 	if r.includeMeshes != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMeshes", r.includeMeshes, "")
+	} else {
+		var defaultValue bool = false
+		r.includeMeshes = &defaultValue
 	}
 	if r.includeWires != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeWires", r.includeWires, "")
+	} else {
+		var defaultValue bool = false
+		r.includeWires = &defaultValue
 	}
 	if r.includeFlattenedBodies != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFlattenedBodies", r.includeFlattenedBodies, "")
+	} else {
+		var defaultValue bool = false
+		r.includeFlattenedBodies = &defaultValue
 	}
 	if r.includeApplications != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeApplications", r.includeApplications, "")
+	} else {
+		var defaultValue bool = false
+		r.includeApplications = &defaultValue
 	}
 	if r.allowedApplicationMimeTypes != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "allowedApplicationMimeTypes", r.allowedApplicationMimeTypes, "")
+	} else {
+		var defaultValue string = ""
+		r.allowedApplicationMimeTypes = &defaultValue
 	}
 	if r.includeCompositeParts != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeCompositeParts", r.includeCompositeParts, "")
+	} else {
+		var defaultValue bool = false
+		r.includeCompositeParts = &defaultValue
 	}
 	if r.includeFSTables != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFSTables", r.includeFSTables, "")
+	} else {
+		var defaultValue bool = false
+		r.includeFSTables = &defaultValue
 	}
 	if r.includeFSComputedPartPropertyFunctions != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFSComputedPartPropertyFunctions", r.includeFSComputedPartPropertyFunctions, "")
+	} else {
+		var defaultValue bool = false
+		r.includeFSComputedPartPropertyFunctions = &defaultValue
 	}
 	if r.includeVariables != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeVariables", r.includeVariables, "")
+	} else {
+		var defaultValue bool = false
+		r.includeVariables = &defaultValue
 	}
 	if r.includeVariableStudios != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeVariableStudios", r.includeVariableStudios, "")
+	} else {
+		var defaultValue bool = false
+		r.includeVariableStudios = &defaultValue
 	}
 	if r.allowedBlobExtensions != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "allowedBlobExtensions", r.allowedBlobExtensions, "")
+	} else {
+		var defaultValue string = ""
+		r.allowedBlobExtensions = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -2542,6 +2653,9 @@ func (a *DocumentApiService) GetUnitInfoExecute(r ApiGetUnitInfoRequest) (*BTUni
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -2671,6 +2785,9 @@ func (a *DocumentApiService) GetVersionExecute(r ApiGetVersionRequest) (*BTVersi
 
 	if r.parents != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "parents", r.parents, "")
+	} else {
+		var defaultValue bool = false
+		r.parents = &defaultValue
 	}
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
@@ -2933,6 +3050,9 @@ func (a *DocumentApiService) MergePreviewExecute(r ApiMergePreviewRequest) (*BTM
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	parameterAddToHeaderOrQuery(localVarQueryParams, "sourceType", r.sourceType, "")
 	parameterAddToHeaderOrQuery(localVarQueryParams, "sourceId", r.sourceId, "")
@@ -3192,6 +3312,9 @@ func (a *DocumentApiService) RestoreFromHistoryExecute(r ApiRestoreFromHistoryRe
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -3915,6 +4038,9 @@ func (a *DocumentApiService) UnShareDocumentExecute(r ApiUnShareDocumentRequest)
 
 	if r.entryType != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "entryType", r.entryType, "")
+	} else {
+		var defaultValue int32 = 0
+		r.entryType = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_drawing.go b/onshape/api_drawing.go
index 58a70ab4a..679b4996e 100644
--- a/onshape/api_drawing.go
+++ b/onshape/api_drawing.go
@@ -587,6 +587,9 @@ func (a *DrawingApiService) ModifyDrawingExecute(r ApiModifyDrawingRequest) (*BT
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}
diff --git a/onshape/api_element.go b/onshape/api_element.go
index 3448311ae..be7081c68 100644
--- a/onshape/api_element.go
+++ b/onshape/api_element.go
@@ -235,9 +235,15 @@ func (a *ElementApiService) DecodeConfigurationExecute(r ApiDecodeConfigurationR
 	}
 	if r.includeDisplay != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeDisplay", r.includeDisplay, "")
+	} else {
+		var defaultValue bool = false
+		r.includeDisplay = &defaultValue
 	}
 	if r.configurationIsId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configurationIsId", r.configurationIsId, "")
+	} else {
+		var defaultValue bool = false
+		r.configurationIsId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -765,12 +771,21 @@ func (a *ElementApiService) GetElementTranslatorFormatsByVersionOrWorkspaceExecu
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.checkContent != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "checkContent", r.checkContent, "")
+	} else {
+		var defaultValue bool = true
+		r.checkContent = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_folder.go b/onshape/api_folder.go
index bbaea0ca2..8574b9d9d 100644
--- a/onshape/api_folder.go
+++ b/onshape/api_folder.go
@@ -388,6 +388,9 @@ func (a *FolderApiService) UnShareExecute(r ApiUnShareRequest) (map[string]inter
 
 	if r.entryType != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "entryType", r.entryType, "")
+	} else {
+		var defaultValue int32 = 0
+		r.entryType = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_insertable.go b/onshape/api_insertable.go
index def37a69d..19ad52b9b 100644
--- a/onshape/api_insertable.go
+++ b/onshape/api_insertable.go
@@ -215,72 +215,138 @@ func (a *InsertableApiService) GetLatestInDocumentExecute(r ApiGetLatestInDocume
 
 	if r.includeParts != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeParts", r.includeParts, "")
+	} else {
+		var defaultValue bool = false
+		r.includeParts = &defaultValue
 	}
 	if r.includeSurfaces != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSurfaces", r.includeSurfaces, "")
+	} else {
+		var defaultValue bool = false
+		r.includeSurfaces = &defaultValue
 	}
 	if r.includeSketches != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSketches", r.includeSketches, "")
+	} else {
+		var defaultValue bool = false
+		r.includeSketches = &defaultValue
 	}
 	if r.includeReferenceFeatures != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeReferenceFeatures", r.includeReferenceFeatures, "")
+	} else {
+		var defaultValue bool = false
+		r.includeReferenceFeatures = &defaultValue
 	}
 	if r.includeAssemblies != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeAssemblies", r.includeAssemblies, "")
+	} else {
+		var defaultValue bool = false
+		r.includeAssemblies = &defaultValue
 	}
 	if r.includeFeatureStudios != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFeatureStudios", r.includeFeatureStudios, "")
+	} else {
+		var defaultValue bool = false
+		r.includeFeatureStudios = &defaultValue
 	}
 	if r.includeBlobs != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeBlobs", r.includeBlobs, "")
+	} else {
+		var defaultValue bool = false
+		r.includeBlobs = &defaultValue
 	}
 	if r.allowedBlobMimeTypes != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "allowedBlobMimeTypes", r.allowedBlobMimeTypes, "")
+	} else {
+		var defaultValue string = ""
+		r.allowedBlobMimeTypes = &defaultValue
 	}
 	if r.excludeNewerFSVersions != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeNewerFSVersions", r.excludeNewerFSVersions, "")
+	} else {
+		var defaultValue bool = false
+		r.excludeNewerFSVersions = &defaultValue
 	}
 	if r.maxFeatureScriptVersion != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFeatureScriptVersion", r.maxFeatureScriptVersion, "")
 	}
 	if r.includePartStudios != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includePartStudios", r.includePartStudios, "")
+	} else {
+		var defaultValue bool = false
+		r.includePartStudios = &defaultValue
 	}
 	if r.includeFeatures != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFeatures", r.includeFeatures, "")
+	} else {
+		var defaultValue bool = false
+		r.includeFeatures = &defaultValue
 	}
 	if r.includeMeshes != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeMeshes", r.includeMeshes, "")
+	} else {
+		var defaultValue bool = false
+		r.includeMeshes = &defaultValue
 	}
 	if r.includeWires != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeWires", r.includeWires, "")
+	} else {
+		var defaultValue bool = false
+		r.includeWires = &defaultValue
 	}
 	if r.includeFlattenedBodies != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFlattenedBodies", r.includeFlattenedBodies, "")
+	} else {
+		var defaultValue bool = false
+		r.includeFlattenedBodies = &defaultValue
 	}
 	if r.includeApplications != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeApplications", r.includeApplications, "")
+	} else {
+		var defaultValue bool = false
+		r.includeApplications = &defaultValue
 	}
 	if r.allowedApplicationMimeTypes != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "allowedApplicationMimeTypes", r.allowedApplicationMimeTypes, "")
+	} else {
+		var defaultValue string = ""
+		r.allowedApplicationMimeTypes = &defaultValue
 	}
 	if r.includeCompositeParts != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeCompositeParts", r.includeCompositeParts, "")
+	} else {
+		var defaultValue bool = false
+		r.includeCompositeParts = &defaultValue
 	}
 	if r.includeFSTables != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFSTables", r.includeFSTables, "")
+	} else {
+		var defaultValue bool = false
+		r.includeFSTables = &defaultValue
 	}
 	if r.includeFSComputedPartPropertyFunctions != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFSComputedPartPropertyFunctions", r.includeFSComputedPartPropertyFunctions, "")
+	} else {
+		var defaultValue bool = false
+		r.includeFSComputedPartPropertyFunctions = &defaultValue
 	}
 	if r.includeVariables != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeVariables", r.includeVariables, "")
+	} else {
+		var defaultValue bool = false
+		r.includeVariables = &defaultValue
 	}
 	if r.includeVariableStudios != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeVariableStudios", r.includeVariableStudios, "")
+	} else {
+		var defaultValue bool = false
+		r.includeVariableStudios = &defaultValue
 	}
 	if r.allowedBlobExtensions != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "allowedBlobExtensions", r.allowedBlobExtensions, "")
+	} else {
+		var defaultValue string = ""
+		r.allowedBlobExtensions = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_metadata.go b/onshape/api_metadata.go
index 5cad1a7be..72ee6d732 100644
--- a/onshape/api_metadata.go
+++ b/onshape/api_metadata.go
@@ -128,12 +128,21 @@ func (a *MetadataApiService) GetVEOPStandardContentMetadataExecute(r ApiGetVEOPS
 	}
 	if r.includeComputedProperties != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeComputedProperties", r.includeComputedProperties, "")
+	} else {
+		var defaultValue bool = true
+		r.includeComputedProperties = &defaultValue
 	}
 	if r.includeComputedAssemblyProperties != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeComputedAssemblyProperties", r.includeComputedAssemblyProperties, "")
+	} else {
+		var defaultValue bool = false
+		r.includeComputedAssemblyProperties = &defaultValue
 	}
 	if r.thumbnail != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail", r.thumbnail, "")
+	} else {
+		var defaultValue bool = false
+		r.thumbnail = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -310,24 +319,42 @@ func (a *MetadataApiService) GetWMVEMetadataExecute(r ApiGetWMVEMetadataRequest)
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
 	}
 	if r.inferMetadataOwner != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "inferMetadataOwner", r.inferMetadataOwner, "")
+	} else {
+		var defaultValue bool = false
+		r.inferMetadataOwner = &defaultValue
 	}
 	if r.depth != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
+	} else {
+		var defaultValue string = "1"
+		r.depth = &defaultValue
 	}
 	if r.includeComputedProperties != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeComputedProperties", r.includeComputedProperties, "")
+	} else {
+		var defaultValue bool = true
+		r.includeComputedProperties = &defaultValue
 	}
 	if r.includeComputedAssemblyProperties != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeComputedAssemblyProperties", r.includeComputedAssemblyProperties, "")
+	} else {
+		var defaultValue bool = false
+		r.includeComputedAssemblyProperties = &defaultValue
 	}
 	if r.thumbnail != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail", r.thumbnail, "")
+	} else {
+		var defaultValue bool = false
+		r.thumbnail = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -521,27 +548,48 @@ func (a *MetadataApiService) GetWMVEPMetadataExecute(r ApiGetWMVEPMetadataReques
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
 	}
 	if r.inferMetadataOwner != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "inferMetadataOwner", r.inferMetadataOwner, "")
+	} else {
+		var defaultValue bool = false
+		r.inferMetadataOwner = &defaultValue
 	}
 	if r.includeComputedProperties != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeComputedProperties", r.includeComputedProperties, "")
+	} else {
+		var defaultValue bool = true
+		r.includeComputedProperties = &defaultValue
 	}
 	if r.includeComputedAssemblyProperties != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeComputedAssemblyProperties", r.includeComputedAssemblyProperties, "")
+	} else {
+		var defaultValue bool = false
+		r.includeComputedAssemblyProperties = &defaultValue
 	}
 	if r.thumbnail != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail", r.thumbnail, "")
+	} else {
+		var defaultValue bool = false
+		r.thumbnail = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -713,21 +761,39 @@ func (a *MetadataApiService) GetWMVEPsMetadataExecute(r ApiGetWMVEPsMetadataRequ
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.inferMetadataOwner != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "inferMetadataOwner", r.inferMetadataOwner, "")
+	} else {
+		var defaultValue bool = false
+		r.inferMetadataOwner = &defaultValue
 	}
 	if r.includeComputedProperties != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeComputedProperties", r.includeComputedProperties, "")
+	} else {
+		var defaultValue bool = true
+		r.includeComputedProperties = &defaultValue
 	}
 	if r.includeComputedAssemblyProperties != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeComputedAssemblyProperties", r.includeComputedAssemblyProperties, "")
+	} else {
+		var defaultValue bool = false
+		r.includeComputedAssemblyProperties = &defaultValue
 	}
 	if r.thumbnail != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail", r.thumbnail, "")
+	} else {
+		var defaultValue bool = false
+		r.thumbnail = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -895,18 +961,33 @@ func (a *MetadataApiService) GetWMVEsMetadataExecute(r ApiGetWMVEsMetadataReques
 	}
 	if r.inferMetadataOwner != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "inferMetadataOwner", r.inferMetadataOwner, "")
+	} else {
+		var defaultValue bool = false
+		r.inferMetadataOwner = &defaultValue
 	}
 	if r.depth != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
+	} else {
+		var defaultValue string = "1"
+		r.depth = &defaultValue
 	}
 	if r.includeComputedProperties != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeComputedProperties", r.includeComputedProperties, "")
+	} else {
+		var defaultValue bool = true
+		r.includeComputedProperties = &defaultValue
 	}
 	if r.includeComputedAssemblyProperties != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeComputedAssemblyProperties", r.includeComputedAssemblyProperties, "")
+	} else {
+		var defaultValue bool = false
+		r.includeComputedAssemblyProperties = &defaultValue
 	}
 	if r.thumbnail != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail", r.thumbnail, "")
+	} else {
+		var defaultValue bool = false
+		r.thumbnail = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -1074,18 +1155,33 @@ func (a *MetadataApiService) GetWVMetadataExecute(r ApiGetWVMetadataRequest) (*B
 	}
 	if r.inferMetadataOwner != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "inferMetadataOwner", r.inferMetadataOwner, "")
+	} else {
+		var defaultValue bool = false
+		r.inferMetadataOwner = &defaultValue
 	}
 	if r.depth != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "")
+	} else {
+		var defaultValue string = "1"
+		r.depth = &defaultValue
 	}
 	if r.includeComputedProperties != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeComputedProperties", r.includeComputedProperties, "")
+	} else {
+		var defaultValue bool = true
+		r.includeComputedProperties = &defaultValue
 	}
 	if r.includeComputedAssemblyProperties != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeComputedAssemblyProperties", r.includeComputedAssemblyProperties, "")
+	} else {
+		var defaultValue bool = false
+		r.includeComputedAssemblyProperties = &defaultValue
 	}
 	if r.thumbnail != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "thumbnail", r.thumbnail, "")
+	} else {
+		var defaultValue bool = false
+		r.thumbnail = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -1544,12 +1640,21 @@ func (a *MetadataApiService) UpdateWVEPMetadataExecute(r ApiUpdateWVEPMetadataRe
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
diff --git a/onshape/api_metadata_category.go b/onshape/api_metadata_category.go
index 1518baa1d..2373ce565 100644
--- a/onshape/api_metadata_category.go
+++ b/onshape/api_metadata_category.go
@@ -140,6 +140,9 @@ func (a *MetadataCategoryApiService) GetCategoryPropertiesExecute(r ApiGetCatego
 	}
 	if r.ownerType != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "ownerType", r.ownerType, "")
+	} else {
+		var defaultValue int32 = 1
+		r.ownerType = &defaultValue
 	}
 	if r.documentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "documentId", r.documentId, "")
@@ -149,7 +152,7 @@ func (a *MetadataCategoryApiService) GetCategoryPropertiesExecute(r ApiGetCatego
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "categoryIds", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "categoryIds", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "categoryIds", t, "multi")
@@ -160,21 +163,39 @@ func (a *MetadataCategoryApiService) GetCategoryPropertiesExecute(r ApiGetCatego
 	}
 	if r.strict != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "strict", r.strict, "")
+	} else {
+		var defaultValue bool = true
+		r.strict = &defaultValue
 	}
 	if r.includeObjectTypeDefaults != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeObjectTypeDefaults", r.includeObjectTypeDefaults, "")
+	} else {
+		var defaultValue bool = false
+		r.includeObjectTypeDefaults = &defaultValue
 	}
 	if r.includeComputedProperties != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeComputedProperties", r.includeComputedProperties, "")
+	} else {
+		var defaultValue bool = true
+		r.includeComputedProperties = &defaultValue
 	}
 	if r.includePartPropertiesTableOnlyProperties != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includePartPropertiesTableOnlyProperties", r.includePartPropertiesTableOnlyProperties, "")
+	} else {
+		var defaultValue bool = true
+		r.includePartPropertiesTableOnlyProperties = &defaultValue
 	}
 	if r.onlyActive != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "onlyActive", r.onlyActive, "")
+	} else {
+		var defaultValue bool = false
+		r.onlyActive = &defaultValue
 	}
 	if r.onlyObjectTypeDefaults != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "onlyObjectTypeDefaults", r.onlyObjectTypeDefaults, "")
+	} else {
+		var defaultValue bool = false
+		r.onlyObjectTypeDefaults = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_open_api.go b/onshape/api_open_api.go
index d49f74844..55e66797a 100644
--- a/onshape/api_open_api.go
+++ b/onshape/api_open_api.go
@@ -164,13 +164,16 @@ func (a *OpenApiApiService) GetOpenApiExecute(r ApiGetOpenApiRequest) (*OpenAPI,
 	}
 	if r.noFilter != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "noFilter", r.noFilter, "")
+	} else {
+		var defaultValue bool = false
+		r.noFilter = &defaultValue
 	}
 	if r.includedTags != nil {
 		t := *r.includedTags
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "includedTags", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "includedTags", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "includedTags", t, "multi")
@@ -181,7 +184,7 @@ func (a *OpenApiApiService) GetOpenApiExecute(r ApiGetOpenApiRequest) (*OpenAPI,
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "excludedTags", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "excludedTags", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "excludedTags", t, "multi")
@@ -189,16 +192,22 @@ func (a *OpenApiApiService) GetOpenApiExecute(r ApiGetOpenApiRequest) (*OpenAPI,
 	}
 	if r.includeDeprecated != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeDeprecated", r.includeDeprecated, "")
+	} else {
+		var defaultValue bool = false
+		r.includeDeprecated = &defaultValue
 	}
 	if r.onlyDeprecated != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "onlyDeprecated", r.onlyDeprecated, "")
+	} else {
+		var defaultValue bool = false
+		r.onlyDeprecated = &defaultValue
 	}
 	if r.documentationStatuses != nil {
 		t := *r.documentationStatuses
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "documentationStatuses", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "documentationStatuses", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "documentationStatuses", t, "multi")
@@ -212,7 +221,7 @@ func (a *OpenApiApiService) GetOpenApiExecute(r ApiGetOpenApiRequest) (*OpenAPI,
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "operationIds", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "operationIds", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "operationIds", t, "multi")
@@ -223,7 +232,7 @@ func (a *OpenApiApiService) GetOpenApiExecute(r ApiGetOpenApiRequest) (*OpenAPI,
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "excludedOperationIds", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "excludedOperationIds", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "excludedOperationIds", t, "multi")
diff --git a/onshape/api_part.go b/onshape/api_part.go
index 4fbcc9555..95c139a61 100644
--- a/onshape/api_part.go
+++ b/onshape/api_part.go
@@ -107,6 +107,9 @@ func (a *PartApiService) ExportPSExecute(r ApiExportPSRequest) (*http.Response,
 
 	if r.version != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "")
+	} else {
+		var defaultValue string = "0"
+		r.version = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
@@ -307,12 +310,21 @@ func (a *PartApiService) ExportPartGltfExecute(r ApiExportPartGltfRequest) (*GlT
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
@@ -328,13 +340,16 @@ func (a *PartApiService) ExportPartGltfExecute(r ApiExportPartGltfRequest) (*GlT
 	}
 	if r.outputSeparateFaceNodes != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputSeparateFaceNodes", r.outputSeparateFaceNodes, "")
+	} else {
+		var defaultValue bool = false
+		r.outputSeparateFaceNodes = &defaultValue
 	}
 	if r.faceId != nil {
 		t := *r.faceId
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "faceId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "faceId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "faceId", t, "multi")
@@ -342,6 +357,9 @@ func (a *PartApiService) ExportPartGltfExecute(r ApiExportPartGltfRequest) (*GlT
 	}
 	if r.outputFaceAppearances != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputFaceAppearances", r.outputFaceAppearances, "")
+	} else {
+		var defaultValue bool = false
+		r.outputFaceAppearances = &defaultValue
 	}
 	if r.maxFacetWidth != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFacetWidth", r.maxFacetWidth, "")
@@ -528,15 +546,27 @@ func (a *PartApiService) ExportStlExecute(r ApiExportStlRequest) (map[string]int
 
 	if r.mode != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "mode", r.mode, "")
+	} else {
+		var defaultValue string = "text"
+		r.mode = &defaultValue
 	}
 	if r.grouping != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "grouping", r.grouping, "")
+	} else {
+		var defaultValue bool = true
+		r.grouping = &defaultValue
 	}
 	if r.scale != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "scale", r.scale, "")
+	} else {
+		var defaultValue float64 = 1
+		r.scale = &defaultValue
 	}
 	if r.units != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "units", r.units, "")
+	} else {
+		var defaultValue string = "inch"
+		r.units = &defaultValue
 	}
 	if r.angleTolerance != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "angleTolerance", r.angleTolerance, "")
@@ -856,18 +886,30 @@ func (a *PartApiService) GetBodyDetailsExecute(r ApiGetBodyDetailsRequest) (*BTE
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
 	}
 	if r.includeGeometricData != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeGeometricData", r.includeGeometricData, "")
+	} else {
+		var defaultValue bool = true
+		r.includeGeometricData = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -1015,6 +1057,9 @@ func (a *PartApiService) GetBoundingBoxesExecute(r ApiGetBoundingBoxesRequest) (
 
 	if r.includeHidden != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeHidden", r.includeHidden, "")
+	} else {
+		var defaultValue bool = false
+		r.includeHidden = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
@@ -1204,12 +1249,21 @@ func (a *PartApiService) GetEdgesExecute(r ApiGetEdgesRequest) (*BTExportTessell
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
@@ -1228,7 +1282,7 @@ func (a *PartApiService) GetEdgesExecute(r ApiGetEdgesRequest) (*BTExportTessell
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "edgeId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "edgeId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "edgeId", t, "multi")
@@ -1464,12 +1518,21 @@ func (a *PartApiService) GetFaces1Execute(r ApiGetFaces1Request) (*BTExportTesse
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
@@ -1488,7 +1551,7 @@ func (a *PartApiService) GetFaces1Execute(r ApiGetFaces1Request) (*BTExportTesse
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "faceId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "faceId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "faceId", t, "multi")
@@ -1496,27 +1559,48 @@ func (a *PartApiService) GetFaces1Execute(r ApiGetFaces1Request) (*BTExportTesse
 	}
 	if r.outputFaceAppearances != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputFaceAppearances", r.outputFaceAppearances, "")
+	} else {
+		var defaultValue bool = false
+		r.outputFaceAppearances = &defaultValue
 	}
 	if r.maxFacetWidth != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFacetWidth", r.maxFacetWidth, "")
 	}
 	if r.outputVertexNormals != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputVertexNormals", r.outputVertexNormals, "")
+	} else {
+		var defaultValue bool = false
+		r.outputVertexNormals = &defaultValue
 	}
 	if r.outputFacetNormals != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputFacetNormals", r.outputFacetNormals, "")
+	} else {
+		var defaultValue bool = true
+		r.outputFacetNormals = &defaultValue
 	}
 	if r.outputTextureCoordinates != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputTextureCoordinates", r.outputTextureCoordinates, "")
+	} else {
+		var defaultValue bool = false
+		r.outputTextureCoordinates = &defaultValue
 	}
 	if r.outputIndexTable != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIndexTable", r.outputIndexTable, "")
+	} else {
+		var defaultValue bool = false
+		r.outputIndexTable = &defaultValue
 	}
 	if r.outputErrorFaces != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputErrorFaces", r.outputErrorFaces, "")
+	} else {
+		var defaultValue bool = false
+		r.outputErrorFaces = &defaultValue
 	}
 	if r.combineCompositePartConstituents != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "combineCompositePartConstituents", r.combineCompositePartConstituents, "")
+	} else {
+		var defaultValue bool = false
+		r.combineCompositePartConstituents = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -1689,21 +1773,36 @@ func (a *PartApiService) GetMassPropertiesExecute(r ApiGetMassPropertiesRequest)
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
 	}
 	if r.inferMetadataOwner != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "inferMetadataOwner", r.inferMetadataOwner, "")
+	} else {
+		var defaultValue bool = true
+		r.inferMetadataOwner = &defaultValue
 	}
 	if r.useMassPropertyOverrides != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "useMassPropertyOverrides", r.useMassPropertyOverrides, "")
+	} else {
+		var defaultValue bool = false
+		r.useMassPropertyOverrides = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -1881,21 +1980,39 @@ func (a *PartApiService) GetPartShadedViewsExecute(r ApiGetPartShadedViewsReques
 
 	if r.viewMatrix != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "viewMatrix", r.viewMatrix, "")
+	} else {
+		var defaultValue string = "front"
+		r.viewMatrix = &defaultValue
 	}
 	if r.outputHeight != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputHeight", r.outputHeight, "")
+	} else {
+		var defaultValue int32 = 500
+		r.outputHeight = &defaultValue
 	}
 	if r.outputWidth != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputWidth", r.outputWidth, "")
+	} else {
+		var defaultValue int32 = 500
+		r.outputWidth = &defaultValue
 	}
 	if r.pixelSize != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "pixelSize", r.pixelSize, "")
+	} else {
+		var defaultValue float64 = 0.003
+		r.pixelSize = &defaultValue
 	}
 	if r.edges != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "edges", r.edges, "")
+	} else {
+		var defaultValue string = "show"
+		r.edges = &defaultValue
 	}
 	if r.useAntiAliasing != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "useAntiAliasing", r.useAntiAliasing, "")
+	} else {
+		var defaultValue bool = false
+		r.useAntiAliasing = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
@@ -2066,16 +2183,28 @@ func (a *PartApiService) GetPartsWMVExecute(r ApiGetPartsWMVRequest) ([]BTPartMe
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	parameterAddToHeaderOrQuery(localVarQueryParams, "elementId", r.elementId, "")
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.withThumbnails != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "withThumbnails", r.withThumbnails, "")
+	} else {
+		var defaultValue bool = false
+		r.withThumbnails = &defaultValue
 	}
 	if r.includePropertyDefaults != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includePropertyDefaults", r.includePropertyDefaults, "")
+	} else {
+		var defaultValue bool = false
+		r.includePropertyDefaults = &defaultValue
 	}
 	if r.includeFlatParts != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFlatParts", r.includeFlatParts, "")
@@ -2238,9 +2367,15 @@ func (a *PartApiService) GetPartsWMVEExecute(r ApiGetPartsWMVERequest) ([]BTPart
 
 	if r.withThumbnails != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "withThumbnails", r.withThumbnails, "")
+	} else {
+		var defaultValue bool = false
+		r.withThumbnails = &defaultValue
 	}
 	if r.includePropertyDefaults != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includePropertyDefaults", r.includePropertyDefaults, "")
+	} else {
+		var defaultValue bool = false
+		r.includePropertyDefaults = &defaultValue
 	}
 	if r.includeFlatParts != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFlatParts", r.includeFlatParts, "")
diff --git a/onshape/api_part_studio.go b/onshape/api_part_studio.go
index 4245a21f9..5bf8b556e 100644
--- a/onshape/api_part_studio.go
+++ b/onshape/api_part_studio.go
@@ -816,12 +816,21 @@ func (a *PartStudioApiService) EvalFeatureScriptExecute(r ApiEvalFeatureScriptRe
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
@@ -996,9 +1005,15 @@ func (a *PartStudioApiService) ExportParasolidExecute(r ApiExportParasolidReques
 	}
 	if r.version != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "")
+	} else {
+		var defaultValue string = "0"
+		r.version = &defaultValue
 	}
 	if r.includeExportIds != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeExportIds", r.includeExportIds, "")
+	} else {
+		var defaultValue bool = false
+		r.includeExportIds = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
@@ -1008,6 +1023,9 @@ func (a *PartStudioApiService) ExportParasolidExecute(r ApiExportParasolidReques
 	}
 	if r.binaryExport != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "binaryExport", r.binaryExport, "")
+	} else {
+		var defaultValue bool = false
+		r.binaryExport = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -1194,12 +1212,21 @@ func (a *PartStudioApiService) ExportPartStudioGltfExecute(r ApiExportPartStudio
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
@@ -1209,7 +1236,7 @@ func (a *PartStudioApiService) ExportPartStudioGltfExecute(r ApiExportPartStudio
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "partId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "partId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "partId", t, "multi")
@@ -1226,13 +1253,16 @@ func (a *PartStudioApiService) ExportPartStudioGltfExecute(r ApiExportPartStudio
 	}
 	if r.outputSeparateFaceNodes != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputSeparateFaceNodes", r.outputSeparateFaceNodes, "")
+	} else {
+		var defaultValue bool = false
+		r.outputSeparateFaceNodes = &defaultValue
 	}
 	if r.faceId != nil {
 		t := *r.faceId
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "faceId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "faceId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "faceId", t, "multi")
@@ -1240,6 +1270,9 @@ func (a *PartStudioApiService) ExportPartStudioGltfExecute(r ApiExportPartStudio
 	}
 	if r.outputFaceAppearances != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputFaceAppearances", r.outputFaceAppearances, "")
+	} else {
+		var defaultValue bool = false
+		r.outputFaceAppearances = &defaultValue
 	}
 	if r.maxFacetWidth != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFacetWidth", r.maxFacetWidth, "")
@@ -1439,15 +1472,27 @@ func (a *PartStudioApiService) ExportPartStudioStlExecute(r ApiExportPartStudioS
 	}
 	if r.mode != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "mode", r.mode, "")
+	} else {
+		var defaultValue string = "text"
+		r.mode = &defaultValue
 	}
 	if r.grouping != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "grouping", r.grouping, "")
+	} else {
+		var defaultValue bool = true
+		r.grouping = &defaultValue
 	}
 	if r.scale != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "scale", r.scale, "")
+	} else {
+		var defaultValue float64 = 1
+		r.scale = &defaultValue
 	}
 	if r.units != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "units", r.units, "")
+	} else {
+		var defaultValue string = "inch"
+		r.units = &defaultValue
 	}
 	if r.angleTolerance != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "angleTolerance", r.angleTolerance, "")
@@ -1602,12 +1647,21 @@ func (a *PartStudioApiService) GetFeatureScriptRepresentationExecute(r ApiGetFea
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
@@ -1969,12 +2023,21 @@ func (a *PartStudioApiService) GetPartStudioBodyDetailsExecute(r ApiGetPartStudi
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
@@ -1984,7 +2047,7 @@ func (a *PartStudioApiService) GetPartStudioBodyDetailsExecute(r ApiGetPartStudi
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "partIds", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "partIds", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "partIds", t, "multi")
@@ -1992,12 +2055,21 @@ func (a *PartStudioApiService) GetPartStudioBodyDetailsExecute(r ApiGetPartStudi
 	}
 	if r.includeSurfaces != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSurfaces", r.includeSurfaces, "")
+	} else {
+		var defaultValue bool = false
+		r.includeSurfaces = &defaultValue
 	}
 	if r.includeCompositeParts != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeCompositeParts", r.includeCompositeParts, "")
+	} else {
+		var defaultValue bool = false
+		r.includeCompositeParts = &defaultValue
 	}
 	if r.includeGeometricData != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeGeometricData", r.includeGeometricData, "")
+	} else {
+		var defaultValue bool = true
+		r.includeGeometricData = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -2151,9 +2223,15 @@ func (a *PartStudioApiService) GetPartStudioBoundingBoxesExecute(r ApiGetPartStu
 
 	if r.includeHidden != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeHidden", r.includeHidden, "")
+	} else {
+		var defaultValue bool = false
+		r.includeHidden = &defaultValue
 	}
 	if r.includeWireBodies != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeWireBodies", r.includeWireBodies, "")
+	} else {
+		var defaultValue bool = true
+		r.includeWireBodies = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
@@ -2346,12 +2424,21 @@ func (a *PartStudioApiService) GetPartStudioEdgesExecute(r ApiGetPartStudioEdges
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
@@ -2361,7 +2448,7 @@ func (a *PartStudioApiService) GetPartStudioEdgesExecute(r ApiGetPartStudioEdges
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "partId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "partId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "partId", t, "multi")
@@ -2381,7 +2468,7 @@ func (a *PartStudioApiService) GetPartStudioEdgesExecute(r ApiGetPartStudioEdges
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "edgeId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "edgeId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "edgeId", t, "multi")
@@ -2619,12 +2706,21 @@ func (a *PartStudioApiService) GetPartStudioFacesExecute(r ApiGetPartStudioFaces
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
@@ -2634,7 +2730,7 @@ func (a *PartStudioApiService) GetPartStudioFacesExecute(r ApiGetPartStudioFaces
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "partId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "partId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "partId", t, "multi")
@@ -2654,7 +2750,7 @@ func (a *PartStudioApiService) GetPartStudioFacesExecute(r ApiGetPartStudioFaces
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "faceId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "faceId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "faceId", t, "multi")
@@ -2662,27 +2758,48 @@ func (a *PartStudioApiService) GetPartStudioFacesExecute(r ApiGetPartStudioFaces
 	}
 	if r.outputFaceAppearances != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputFaceAppearances", r.outputFaceAppearances, "")
+	} else {
+		var defaultValue bool = false
+		r.outputFaceAppearances = &defaultValue
 	}
 	if r.maxFacetWidth != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFacetWidth", r.maxFacetWidth, "")
 	}
 	if r.outputVertexNormals != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputVertexNormals", r.outputVertexNormals, "")
+	} else {
+		var defaultValue bool = false
+		r.outputVertexNormals = &defaultValue
 	}
 	if r.outputFacetNormals != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputFacetNormals", r.outputFacetNormals, "")
+	} else {
+		var defaultValue bool = true
+		r.outputFacetNormals = &defaultValue
 	}
 	if r.outputTextureCoordinates != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputTextureCoordinates", r.outputTextureCoordinates, "")
+	} else {
+		var defaultValue bool = false
+		r.outputTextureCoordinates = &defaultValue
 	}
 	if r.outputIndexTable != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputIndexTable", r.outputIndexTable, "")
+	} else {
+		var defaultValue bool = false
+		r.outputIndexTable = &defaultValue
 	}
 	if r.outputErrorFaces != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputErrorFaces", r.outputErrorFaces, "")
+	} else {
+		var defaultValue bool = false
+		r.outputErrorFaces = &defaultValue
 	}
 	if r.combineCompositePartConstituents != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "combineCompositePartConstituents", r.combineCompositePartConstituents, "")
+	} else {
+		var defaultValue bool = false
+		r.combineCompositePartConstituents = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -2983,25 +3100,37 @@ func (a *PartStudioApiService) GetPartStudioFeaturesExecute(r ApiGetPartStudioFe
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
 	}
 	if r.includeGeometryIds != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeGeometryIds", r.includeGeometryIds, "")
+	} else {
+		var defaultValue bool = true
+		r.includeGeometryIds = &defaultValue
 	}
 	if r.featureId != nil {
 		t := *r.featureId
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "featureId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "featureId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "featureId", t, "multi")
@@ -3009,6 +3138,9 @@ func (a *PartStudioApiService) GetPartStudioFeaturesExecute(r ApiGetPartStudioFe
 	}
 	if r.noSketchGeometry != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "noSketchGeometry", r.noSketchGeometry, "")
+	} else {
+		var defaultValue bool = false
+		r.noSketchGeometry = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -3184,12 +3316,21 @@ func (a *PartStudioApiService) GetPartStudioMassPropertiesExecute(r ApiGetPartSt
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.rollbackBarIndex != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rollbackBarIndex", r.rollbackBarIndex, "")
+	} else {
+		var defaultValue int32 = -1
+		r.rollbackBarIndex = &defaultValue
 	}
 	if r.elementMicroversionId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "elementMicroversionId", r.elementMicroversionId, "")
@@ -3199,7 +3340,7 @@ func (a *PartStudioApiService) GetPartStudioMassPropertiesExecute(r ApiGetPartSt
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "partId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "partId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "partId", t, "multi")
@@ -3207,9 +3348,15 @@ func (a *PartStudioApiService) GetPartStudioMassPropertiesExecute(r ApiGetPartSt
 	}
 	if r.massAsGroup != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "massAsGroup", r.massAsGroup, "")
+	} else {
+		var defaultValue bool = true
+		r.massAsGroup = &defaultValue
 	}
 	if r.useMassPropertyOverrides != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "useMassPropertyOverrides", r.useMassPropertyOverrides, "")
+	} else {
+		var defaultValue bool = false
+		r.useMassPropertyOverrides = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -3348,12 +3495,21 @@ func (a *PartStudioApiService) GetPartStudioNamedViewsExecute(r ApiGetPartStudio
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.skipPerspective != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "skipPerspective", r.skipPerspective, "")
+	} else {
+		var defaultValue bool = true
+		r.skipPerspective = &defaultValue
 	}
 	if r.includeSectionCutViews != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSectionCutViews", r.includeSectionCutViews, "")
+	} else {
+		var defaultValue bool = false
+		r.includeSectionCutViews = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -3555,30 +3711,57 @@ func (a *PartStudioApiService) GetPartStudioShadedViewsExecute(r ApiGetPartStudi
 
 	if r.viewMatrix != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "viewMatrix", r.viewMatrix, "")
+	} else {
+		var defaultValue string = "front"
+		r.viewMatrix = &defaultValue
 	}
 	if r.outputHeight != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputHeight", r.outputHeight, "")
+	} else {
+		var defaultValue int32 = 500
+		r.outputHeight = &defaultValue
 	}
 	if r.outputWidth != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "outputWidth", r.outputWidth, "")
+	} else {
+		var defaultValue int32 = 500
+		r.outputWidth = &defaultValue
 	}
 	if r.pixelSize != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "pixelSize", r.pixelSize, "")
+	} else {
+		var defaultValue float64 = 0.003
+		r.pixelSize = &defaultValue
 	}
 	if r.edges != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "edges", r.edges, "")
+	} else {
+		var defaultValue string = "show"
+		r.edges = &defaultValue
 	}
 	if r.showAllParts != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "showAllParts", r.showAllParts, "")
+	} else {
+		var defaultValue bool = false
+		r.showAllParts = &defaultValue
 	}
 	if r.includeSurfaces != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSurfaces", r.includeSurfaces, "")
+	} else {
+		var defaultValue bool = false
+		r.includeSurfaces = &defaultValue
 	}
 	if r.useAntiAliasing != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "useAntiAliasing", r.useAntiAliasing, "")
+	} else {
+		var defaultValue bool = false
+		r.useAntiAliasing = &defaultValue
 	}
 	if r.includeWires != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeWires", r.includeWires, "")
+	} else {
+		var defaultValue bool = false
+		r.includeWires = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
diff --git a/onshape/api_properties_table_template.go b/onshape/api_properties_table_template.go
index 3cf13f7d5..4990f81a4 100644
--- a/onshape/api_properties_table_template.go
+++ b/onshape/api_properties_table_template.go
@@ -331,9 +331,15 @@ func (a *PropertiesTableTemplateApiService) GetByCompanyIdExecute(r ApiGetByComp
 	}
 	if r.onlyActive != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "onlyActive", r.onlyActive, "")
+	} else {
+		var defaultValue bool = false
+		r.onlyActive = &defaultValue
 	}
 	if r.includeDefaults != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeDefaults", r.includeDefaults, "")
+	} else {
+		var defaultValue bool = true
+		r.includeDefaults = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -469,9 +475,15 @@ func (a *PropertiesTableTemplateApiService) GetByDocumentIdExecute(r ApiGetByDoc
 	}
 	if r.onlyActive != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "onlyActive", r.onlyActive, "")
+	} else {
+		var defaultValue bool = true
+		r.onlyActive = &defaultValue
 	}
 	if r.includeDefaults != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeDefaults", r.includeDefaults, "")
+	} else {
+		var defaultValue bool = true
+		r.includeDefaults = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_publication.go b/onshape/api_publication.go
index 536439dbe..b9b41cfff 100644
--- a/onshape/api_publication.go
+++ b/onshape/api_publication.go
@@ -439,6 +439,9 @@ func (a *PublicationApiService) DeletePublicationExecute(r ApiDeletePublicationR
 
 	if r.forever != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "forever", r.forever, "")
+	} else {
+		var defaultValue bool = false
+		r.forever = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_release_package.go b/onshape/api_release_package.go
index 1140db349..aa41ee871 100644
--- a/onshape/api_release_package.go
+++ b/onshape/api_release_package.go
@@ -89,6 +89,9 @@ func (a *ReleasePackageApiService) CreateObsoletionPackageExecute(r ApiCreateObs
 	parameterAddToHeaderOrQuery(localVarQueryParams, "revisionId", r.revisionId, "")
 	if r.debugMode != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "debugMode", r.debugMode, "")
+	} else {
+		var defaultValue bool = false
+		r.debugMode = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -219,6 +222,9 @@ func (a *ReleasePackageApiService) CreateReleasePackageExecute(r ApiCreateReleas
 
 	if r.debugMode != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "debugMode", r.debugMode, "")
+	} else {
+		var defaultValue bool = false
+		r.debugMode = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}
@@ -455,6 +461,9 @@ func (a *ReleasePackageApiService) GetReleasePackageExecute(r ApiGetReleasePacka
 
 	if r.detailed != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "detailed", r.detailed, "")
+	} else {
+		var defaultValue bool = false
+		r.detailed = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -591,6 +600,9 @@ func (a *ReleasePackageApiService) UpdateReleasePackageExecute(r ApiUpdateReleas
 
 	if r.action != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "action", r.action, "")
+	} else {
+		var defaultValue string = "UPDATE"
+		r.action = &defaultValue
 	}
 	if r.wfaction != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "wfaction", r.wfaction, "")
diff --git a/onshape/api_revision.go b/onshape/api_revision.go
index 83994fd96..fdbf0dde0 100644
--- a/onshape/api_revision.go
+++ b/onshape/api_revision.go
@@ -89,6 +89,9 @@ func (a *RevisionApiService) DeleteRevisionHistoryExecute(r ApiDeleteRevisionHis
 
 	if r.ignoreLinkedDocuments != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "ignoreLinkedDocuments", r.ignoreLinkedDocuments, "")
+	} else {
+		var defaultValue bool = false
+		r.ignoreLinkedDocuments = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -237,12 +240,21 @@ func (a *RevisionApiService) EnumerateRevisionsExecute(r ApiEnumerateRevisionsRe
 	}
 	if r.limit != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
+	} else {
+		var defaultValue int32 = 20
+		r.limit = &defaultValue
 	}
 	if r.latestOnly != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "latestOnly", r.latestOnly, "")
+	} else {
+		var defaultValue bool = false
+		r.latestOnly = &defaultValue
 	}
 	if r.after != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "")
+	} else {
+		var defaultValue JSONTime = "2000-01-01T00:00Z"
+		r.after = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -900,16 +912,28 @@ func (a *RevisionApiService) GetRevisionHistoryInCompanyByElementIdExecute(r Api
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	parameterAddToHeaderOrQuery(localVarQueryParams, "elementType", r.elementType, "")
 	if r.fillApprovers != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "fillApprovers", r.fillApprovers, "")
+	} else {
+		var defaultValue bool = false
+		r.fillApprovers = &defaultValue
 	}
 	if r.fillExportPermission != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "fillExportPermission", r.fillExportPermission, "")
+	} else {
+		var defaultValue bool = false
+		r.fillExportPermission = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -1073,9 +1097,15 @@ func (a *RevisionApiService) GetRevisionHistoryInCompanyByPartIdExecute(r ApiGet
 	}
 	if r.fillApprovers != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "fillApprovers", r.fillApprovers, "")
+	} else {
+		var defaultValue bool = false
+		r.fillApprovers = &defaultValue
 	}
 	if r.fillExportPermission != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "fillExportPermission", r.fillExportPermission, "")
+	} else {
+		var defaultValue bool = false
+		r.fillExportPermission = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -1217,9 +1247,15 @@ func (a *RevisionApiService) GetRevisionHistoryInCompanyByPartNumberExecute(r Ap
 	parameterAddToHeaderOrQuery(localVarQueryParams, "elementType", r.elementType, "")
 	if r.fillApprovers != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "fillApprovers", r.fillApprovers, "")
+	} else {
+		var defaultValue bool = false
+		r.fillApprovers = &defaultValue
 	}
 	if r.fillExportPermission != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "fillExportPermission", r.fillExportPermission, "")
+	} else {
+		var defaultValue bool = false
+		r.fillExportPermission = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_sketch.go b/onshape/api_sketch.go
index 6e9fd19cc..5acf0e3b0 100644
--- a/onshape/api_sketch.go
+++ b/onshape/api_sketch.go
@@ -272,7 +272,7 @@ func (a *SketchApiService) GetSketchInfoExecute(r ApiGetSketchInfoRequest) (map[
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "sketchId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "sketchId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "sketchId", t, "multi")
@@ -280,12 +280,21 @@ func (a *SketchApiService) GetSketchInfoExecute(r ApiGetSketchInfoRequest) (map[
 	}
 	if r.output3D != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "output3D", r.output3D, "")
+	} else {
+		var defaultValue bool = false
+		r.output3D = &defaultValue
 	}
 	if r.curvePoints != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "curvePoints", r.curvePoints, "")
+	} else {
+		var defaultValue bool = false
+		r.curvePoints = &defaultValue
 	}
 	if r.includeGeometry != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeGeometry", r.includeGeometry, "")
+	} else {
+		var defaultValue bool = true
+		r.includeGeometry = &defaultValue
 	}
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
@@ -456,7 +465,7 @@ func (a *SketchApiService) GetTessellatedEntitiesExecute(r ApiGetTessellatedEnti
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "entityId", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "entityId", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "entityId", t, "multi")
diff --git a/onshape/api_team.go b/onshape/api_team.go
index af41183d8..30971728a 100644
--- a/onshape/api_team.go
+++ b/onshape/api_team.go
@@ -105,6 +105,9 @@ func (a *TeamApiService) FindExecute(r ApiFindRequest) (*BTGlobalTreeNodeListRes
 
 	if r.prefix != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "prefix", r.prefix, "")
+	} else {
+		var defaultValue string = ""
+		r.prefix = &defaultValue
 	}
 	if r.uid != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "uid", r.uid, "")
@@ -114,12 +117,21 @@ func (a *TeamApiService) FindExecute(r ApiFindRequest) (*BTGlobalTreeNodeListRes
 	}
 	if r.offset != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
+	} else {
+		var defaultValue int32 = 0
+		r.offset = &defaultValue
 	}
 	if r.limit != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
+	} else {
+		var defaultValue int32 = 20
+		r.limit = &defaultValue
 	}
 	if r.includeCompanyOwnedTeams != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeCompanyOwnedTeams", r.includeCompanyOwnedTeams, "")
+	} else {
+		var defaultValue bool = true
+		r.includeCompanyOwnedTeams = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -268,15 +280,27 @@ func (a *TeamApiService) GetMembersExecute(r ApiGetMembersRequest) (*BTListRespo
 	}
 	if r.sortOrder != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "")
+	} else {
+		var defaultValue string = "asc"
+		r.sortOrder = &defaultValue
 	}
 	if r.offset != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
+	} else {
+		var defaultValue int32 = 0
+		r.offset = &defaultValue
 	}
 	if r.limit != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
+	} else {
+		var defaultValue int32 = 20
+		r.limit = &defaultValue
 	}
 	if r.q != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
+	} else {
+		var defaultValue string = ""
+		r.q = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_thumbnail.go b/onshape/api_thumbnail.go
index 9b8478bae..fd7eea729 100644
--- a/onshape/api_thumbnail.go
+++ b/onshape/api_thumbnail.go
@@ -94,6 +94,9 @@ func (a *ThumbnailApiService) DeleteApplicationThumbnailsExecute(r ApiDeleteAppl
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -352,6 +355,9 @@ func (a *ThumbnailApiService) GetDocumentThumbnailWithSizeExecute(r ApiGetDocume
 	}
 	if r.skipDefaultImage != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "skipDefaultImage", r.skipDefaultImage, "")
+	} else {
+		var defaultValue string = ""
+		r.skipDefaultImage = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -486,6 +492,9 @@ func (a *ThumbnailApiService) GetElementThumbnailExecute(r ApiGetElementThumbnai
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -646,12 +655,21 @@ func (a *ThumbnailApiService) GetElementThumbnailWithApiConfigurationExecute(r A
 	}
 	if r.skipDefaultImage != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "skipDefaultImage", r.skipDefaultImage, "")
+	} else {
+		var defaultValue string = ""
+		r.skipDefaultImage = &defaultValue
 	}
 	if r.rejectEmpty != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rejectEmpty", r.rejectEmpty, "")
+	} else {
+		var defaultValue bool = false
+		r.rejectEmpty = &defaultValue
 	}
 	if r.requireConfigMatch != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "requireConfigMatch", r.requireConfigMatch, "")
+	} else {
+		var defaultValue bool = false
+		r.requireConfigMatch = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -808,15 +826,24 @@ func (a *ThumbnailApiService) GetElementThumbnailWithSizeExecute(r ApiGetElement
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.t != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "t", r.t, "")
 	}
 	if r.skipDefaultImage != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "skipDefaultImage", r.skipDefaultImage, "")
+	} else {
+		var defaultValue string = ""
+		r.skipDefaultImage = &defaultValue
 	}
 	if r.rejectEmpty != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "rejectEmpty", r.rejectEmpty, "")
+	} else {
+		var defaultValue bool = false
+		r.rejectEmpty = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -1436,9 +1463,15 @@ func (a *ThumbnailApiService) SetApplicationElementThumbnailExecute(r ApiSetAppl
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.overwrite != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "overwrite", r.overwrite, "")
+	} else {
+		var defaultValue bool = false
+		r.overwrite = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}
diff --git a/onshape/api_translation.go b/onshape/api_translation.go
index 881eef6d0..1a823792a 100644
--- a/onshape/api_translation.go
+++ b/onshape/api_translation.go
@@ -688,9 +688,15 @@ func (a *TranslationApiService) GetDocumentTranslationsExecute(r ApiGetDocumentT
 
 	if r.offset != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
+	} else {
+		var defaultValue int32 = 0
+		r.offset = &defaultValue
 	}
 	if r.limit != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
+	} else {
+		var defaultValue int32 = 20
+		r.limit = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_user.go b/onshape/api_user.go
index c0fb82d6f..af8ccdb23 100644
--- a/onshape/api_user.go
+++ b/onshape/api_user.go
@@ -85,6 +85,9 @@ func (a *UserApiService) GetUserSettingsExecute(r ApiGetUserSettingsRequest) (*B
 
 	if r.includematerials != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includematerials", r.includematerials, "")
+	} else {
+		var defaultValue bool = true
+		r.includematerials = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -207,6 +210,9 @@ func (a *UserApiService) GetUserSettingsCurrentLoggedInUserExecute(r ApiGetUserS
 
 	if r.includematerials != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includematerials", r.includematerials, "")
+	} else {
+		var defaultValue bool = true
+		r.includematerials = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_variables.go b/onshape/api_variables.go
index 5232217ab..1354f06c9 100644
--- a/onshape/api_variables.go
+++ b/onshape/api_variables.go
@@ -93,6 +93,9 @@ func (a *VariablesApiService) CreateVariableStudioExecute(r ApiCreateVariableStu
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}
@@ -227,6 +230,9 @@ func (a *VariablesApiService) GetVariableStudioReferencesExecute(r ApiGetVariabl
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -359,6 +365,9 @@ func (a *VariablesApiService) GetVariableStudioScopeExecute(r ApiGetVariableStud
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -504,12 +513,21 @@ func (a *VariablesApiService) GetVariablesExecute(r ApiGetVariablesRequest) ([]B
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	if r.configuration != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "configuration", r.configuration, "")
+	} else {
+		var defaultValue string = ""
+		r.configuration = &defaultValue
 	}
 	if r.includeValuesAndReferencedVariables != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeValuesAndReferencedVariables", r.includeValuesAndReferencedVariables, "")
+	} else {
+		var defaultValue bool = false
+		r.includeValuesAndReferencedVariables = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -647,6 +665,9 @@ func (a *VariablesApiService) SetVariableStudioReferencesExecute(r ApiSetVariabl
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}
@@ -786,6 +807,9 @@ func (a *VariablesApiService) SetVariableStudioScopeExecute(r ApiSetVariableStud
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}
@@ -925,6 +949,9 @@ func (a *VariablesApiService) SetVariablesExecute(r ApiSetVariablesRequest) (map
 
 	if r.linkDocumentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "linkDocumentId", r.linkDocumentId, "")
+	} else {
+		var defaultValue string = ""
+		r.linkDocumentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8; qs=0.09"}
diff --git a/onshape/api_webhook.go b/onshape/api_webhook.go
index 4c917a9a1..252348e15 100644
--- a/onshape/api_webhook.go
+++ b/onshape/api_webhook.go
@@ -317,15 +317,24 @@ func (a *WebhookApiService) GetWebhooksExecute(r ApiGetWebhooksRequest) (*BTList
 
 	if r.company != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "company", r.company, "")
+	} else {
+		var defaultValue string = ""
+		r.company = &defaultValue
 	}
 	if r.user != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "user", r.user, "")
 	}
 	if r.offset != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
+	} else {
+		var defaultValue int32 = 0
+		r.offset = &defaultValue
 	}
 	if r.limit != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
+	} else {
+		var defaultValue int32 = 20
+		r.limit = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -555,6 +564,9 @@ func (a *WebhookApiService) UnregisterWebhookExecute(r ApiUnregisterWebhookReque
 
 	if r.blockNotification != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "blockNotification", r.blockNotification, "")
+	} else {
+		var defaultValue bool = false
+		r.blockNotification = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/api_workflow.go b/onshape/api_workflow.go
index 6b155d740..b83ba970e 100644
--- a/onshape/api_workflow.go
+++ b/onshape/api_workflow.go
@@ -109,7 +109,7 @@ func (a *WorkflowApiService) EnumerateObjectWorkflowsExecute(r ApiEnumerateObjec
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "objectTypes", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "objectTypes", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "objectTypes", t, "multi")
@@ -120,7 +120,7 @@ func (a *WorkflowApiService) EnumerateObjectWorkflowsExecute(r ApiEnumerateObjec
 		if reflect.TypeOf(t).Kind() == reflect.Slice {
 			s := reflect.ValueOf(t)
 			for i := 0; i < s.Len(); i++ {
-				parameterAddToHeaderOrQuery(localVarQueryParams, "states", s.Index(i), "multi")
+				parameterAddToHeaderOrQuery(localVarQueryParams, "states", s.Index(i).Interface(), "multi")
 			}
 		} else {
 			parameterAddToHeaderOrQuery(localVarQueryParams, "states", t, "multi")
@@ -128,9 +128,15 @@ func (a *WorkflowApiService) EnumerateObjectWorkflowsExecute(r ApiEnumerateObjec
 	}
 	if r.limit != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
+	} else {
+		var defaultValue int32 = 20
+		r.limit = &defaultValue
 	}
 	if r.modifiedAfter != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "modifiedAfter", r.modifiedAfter, "")
+	} else {
+		var defaultValue JSONTime = "2000-01-01T00:00Z"
+		r.modifiedAfter = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -248,6 +254,9 @@ func (a *WorkflowApiService) GetActiveWorkflowsExecute(r ApiGetActiveWorkflowsRe
 
 	if r.documentId != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "documentId", r.documentId, "")
+	} else {
+		var defaultValue string = ""
+		r.documentId = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
@@ -384,12 +393,21 @@ func (a *WorkflowApiService) GetAllowedApproversExecute(r ApiGetAllowedApprovers
 
 	if r.q != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
+	} else {
+		var defaultValue string = ""
+		r.q = &defaultValue
 	}
 	if r.expandTeams != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "expandTeams", r.expandTeams, "")
+	} else {
+		var defaultValue bool = true
+		r.expandTeams = &defaultValue
 	}
 	if r.includeSelf != nil {
 		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSelf", r.includeSelf, "")
+	} else {
+		var defaultValue bool = true
+		r.includeSelf = &defaultValue
 	}
 	// to determine the Content-Type header
 	localVarHTTPContentTypes := []string{}
diff --git a/onshape/client.go b/onshape/client.go
index 875b484d4..11ac22887 100644
--- a/onshape/client.go
+++ b/onshape/client.go
@@ -37,8 +37,8 @@ import (
 )
 
 var (
-	jsonCheck       = regexp.MustCompile(`(?i:(?:application|text)/(?:vnd\.[^;]+\+)?json)`)
-	xmlCheck        = regexp.MustCompile(`(?i:(?:application|text)/xml)`)
+	JsonCheck       = regexp.MustCompile(`(?i:(?:application|text)/(?:[^;]+\+)?json)`)
+	XmlCheck        = regexp.MustCompile(`(?i:(?:application|text)/(?:[^;]+\+)?xml)`)
 	queryParamSplit = regexp.MustCompile(`(^|&)([^&]+)`)
 	queryDescape    = strings.NewReplacer("%5B", "[", "%5D", "]")
 )
@@ -582,13 +582,13 @@ func (c *APIClient) decode(v interface{}, b []byte, contentType string) (err err
 		_, err = (*f).Seek(0, io.SeekStart)
 		return
 	}
-	if xmlCheck.MatchString(contentType) {
+	if XmlCheck.MatchString(contentType) {
 		if err = xml.Unmarshal(b, v); err != nil {
 			return err
 		}
 		return nil
 	}
-	if jsonCheck.MatchString(contentType) {
+	if JsonCheck.MatchString(contentType) {
 		if actualObj, ok := v.(interface{ GetActualInstance() interface{} }); ok { // oneOf, anyOf schemas
 			if unmarshalObj, ok := actualObj.(interface{ UnmarshalJSON([]byte) error }); ok { // make sure it has UnmarshalJSON defined
 				if err = unmarshalObj.UnmarshalJSON(b); err != nil {
@@ -653,10 +653,14 @@ func setBody(body interface{}, contentType string) (bodyBuf *bytes.Buffer, err e
 		_, err = bodyBuf.WriteString(s)
 	} else if s, ok := body.(*string); ok {
 		_, err = bodyBuf.WriteString(*s)
-	} else if jsonCheck.MatchString(contentType) {
+	} else if JsonCheck.MatchString(contentType) {
 		err = json.NewEncoder(bodyBuf).Encode(body)
-	} else if xmlCheck.MatchString(contentType) {
-		err = xml.NewEncoder(bodyBuf).Encode(body)
+	} else if XmlCheck.MatchString(contentType) {
+		var bs []byte
+		bs, err = xml.Marshal(body)
+		if err == nil {
+			bodyBuf.Write(bs)
+		}
 	}
 
 	if err != nil {
diff --git a/onshape/model_api_response_content.go b/onshape/model_api_response_content.go
index e86718968..f98475d66 100644
--- a/onshape/model_api_response_content.go
+++ b/onshape/model_api_response_content.go
@@ -20,9 +20,12 @@ var _ MappedNullable = &ApiResponseContent{}
 
 // ApiResponseContent struct for ApiResponseContent
 type ApiResponseContent struct {
-	Empty *bool `json:"empty,omitempty"`
+	Empty                *bool `json:"empty,omitempty"`
+	AdditionalProperties map[string]interface{}
 }
 
+type _ApiResponseContent ApiResponseContent
+
 // NewApiResponseContent instantiates a new ApiResponseContent object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -85,9 +88,35 @@ func (o ApiResponseContent) ToMap() (map[string]interface{}, error) {
 	if !IsNil(o.Empty) {
 		toSerialize["empty"] = o.Empty
 	}
+
+	for key, value := range o.AdditionalProperties {
+		toSerialize[key] = value
+	}
+
 	return toSerialize, nil
 }
 
+func (o *ApiResponseContent) UnmarshalJSON(data []byte) (err error) {
+	varApiResponseContent := _ApiResponseContent{}
+
+	err = json.Unmarshal(data, &varApiResponseContent)
+
+	if err != nil {
+		return err
+	}
+
+	*o = ApiResponseContent(varApiResponseContent)
+
+	additionalProperties := make(map[string]interface{})
+
+	if err = json.Unmarshal(data, &additionalProperties); err == nil {
+		delete(additionalProperties, "empty")
+		o.AdditionalProperties = additionalProperties
+	}
+
+	return err
+}
+
 type NullableApiResponseContent struct {
 	value *ApiResponseContent
 	isSet bool
diff --git a/onshape/model_blob_item.go b/onshape/model_blob_item.go
index 7d60c53ac..0127b6e39 100644
--- a/onshape/model_blob_item.go
+++ b/onshape/model_blob_item.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BlobItem type satisfies the MappedNullable interface at compile time
@@ -20,6 +22,7 @@ var _ MappedNullable = &BlobItem{}
 
 // BlobItem struct for BlobItem
 type BlobItem struct {
+	Item
 	DataTypeForResponse *string `json:"dataTypeForResponse,omitempty"`
 	Filename            *string `json:"filename,omitempty"`
 	ForeignDataId       *string `json:"foreignDataId,omitempty"`
@@ -30,6 +33,8 @@ type BlobItem struct {
 	Unupdatable         *bool   `json:"unupdatable,omitempty"`
 }
 
+type _BlobItem BlobItem
+
 // NewBlobItem instantiates a new BlobItem object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -341,6 +346,43 @@ func (o BlobItem) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BlobItem) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBlobItem := _BlobItem{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBlobItem)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BlobItem(varBlobItem)
+
+	return err
+}
+
 type NullableBlobItem struct {
 	value *BlobItem
 	isSet bool
diff --git a/onshape/model_bt_active_sheet_metal_filter_2944.go b/onshape/model_bt_active_sheet_metal_filter_2944.go
index 5a2920742..c991539c0 100644
--- a/onshape/model_bt_active_sheet_metal_filter_2944.go
+++ b/onshape/model_bt_active_sheet_metal_filter_2944.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTActiveSheetMetalFilter2944{}
 
 // BTActiveSheetMetalFilter2944 struct for BTActiveSheetMetalFilter2944
 type BTActiveSheetMetalFilter2944 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType                 *string `json:"btType,omitempty"`
-	IsFromActiveSheetMetal *bool   `json:"isFromActiveSheetMetal,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsFromActiveSheetMetal *bool `json:"isFromActiveSheetMetal,omitempty"`
 }
 
 // NewBTActiveSheetMetalFilter2944 instantiates a new BTActiveSheetMetalFilter2944 object
@@ -107,7 +108,7 @@ func (o *BTActiveSheetMetalFilter2944) SetIsFromActiveSheetMetal(v bool) {
 }
 
 func (o BTActiveSheetMetalFilter2944) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTActiveSheetMetalFilter2944) MarshalJSON() ([]byte, error) {
 
 func (o BTActiveSheetMetalFilter2944) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTActiveSheetMetalFilter2944) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_allow_edge_point_filter_2371.go b/onshape/model_bt_allow_edge_point_filter_2371.go
index ab11bb1be..427b27632 100644
--- a/onshape/model_bt_allow_edge_point_filter_2371.go
+++ b/onshape/model_bt_allow_edge_point_filter_2371.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTAllowEdgePointFilter2371{}
 
 // BTAllowEdgePointFilter2371 struct for BTAllowEdgePointFilter2371
 type BTAllowEdgePointFilter2371 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType          *string `json:"btType,omitempty"`
-	AllowsEdgePoint *bool   `json:"allowsEdgePoint,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	AllowsEdgePoint *bool `json:"allowsEdgePoint,omitempty"`
 }
 
 // NewBTAllowEdgePointFilter2371 instantiates a new BTAllowEdgePointFilter2371 object
@@ -107,7 +108,7 @@ func (o *BTAllowEdgePointFilter2371) SetAllowsEdgePoint(v bool) {
 }
 
 func (o BTAllowEdgePointFilter2371) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTAllowEdgePointFilter2371) MarshalJSON() ([]byte, error) {
 
 func (o BTAllowEdgePointFilter2371) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTAllowEdgePointFilter2371) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_allow_flattened_geometry_filter_2140.go b/onshape/model_bt_allow_flattened_geometry_filter_2140.go
index 8b098689e..e0643b8b5 100644
--- a/onshape/model_bt_allow_flattened_geometry_filter_2140.go
+++ b/onshape/model_bt_allow_flattened_geometry_filter_2140.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTAllowFlattenedGeometryFilter2140{}
 
 // BTAllowFlattenedGeometryFilter2140 struct for BTAllowFlattenedGeometryFilter2140
 type BTAllowFlattenedGeometryFilter2140 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType                  *string `json:"btType,omitempty"`
-	AllowsFlattenedGeometry *bool   `json:"allowsFlattenedGeometry,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	AllowsFlattenedGeometry *bool `json:"allowsFlattenedGeometry,omitempty"`
 }
 
 // NewBTAllowFlattenedGeometryFilter2140 instantiates a new BTAllowFlattenedGeometryFilter2140 object
@@ -107,7 +108,7 @@ func (o *BTAllowFlattenedGeometryFilter2140) SetAllowsFlattenedGeometry(v bool)
 }
 
 func (o BTAllowFlattenedGeometryFilter2140) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTAllowFlattenedGeometryFilter2140) MarshalJSON() ([]byte, error) {
 
 func (o BTAllowFlattenedGeometryFilter2140) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTAllowFlattenedGeometryFilter2140) UnmarshalJSON(src []byte) e
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_allow_mesh_geometry_filter_1026.go b/onshape/model_bt_allow_mesh_geometry_filter_1026.go
index 749644eae..3f8e520ef 100644
--- a/onshape/model_bt_allow_mesh_geometry_filter_1026.go
+++ b/onshape/model_bt_allow_mesh_geometry_filter_1026.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTAllowMeshGeometryFilter1026{}
 
 // BTAllowMeshGeometryFilter1026 struct for BTAllowMeshGeometryFilter1026
 type BTAllowMeshGeometryFilter1026 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType             *string `json:"btType,omitempty"`
-	AllowsMeshGeometry *bool   `json:"allowsMeshGeometry,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	AllowsMeshGeometry *bool `json:"allowsMeshGeometry,omitempty"`
 }
 
 // NewBTAllowMeshGeometryFilter1026 instantiates a new BTAllowMeshGeometryFilter1026 object
@@ -107,7 +108,7 @@ func (o *BTAllowMeshGeometryFilter1026) SetAllowsMeshGeometry(v bool) {
 }
 
 func (o BTAllowMeshGeometryFilter1026) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTAllowMeshGeometryFilter1026) MarshalJSON() ([]byte, error) {
 
 func (o BTAllowMeshGeometryFilter1026) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTAllowMeshGeometryFilter1026) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_allowed_mate_type_filter_1511.go b/onshape/model_bt_allowed_mate_type_filter_1511.go
index 3ca46362d..b9cc0a42e 100644
--- a/onshape/model_bt_allowed_mate_type_filter_1511.go
+++ b/onshape/model_bt_allowed_mate_type_filter_1511.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTAllowedMateTypeFilter1511{}
 
 // BTAllowedMateTypeFilter1511 struct for BTAllowedMateTypeFilter1511
 type BTAllowedMateTypeFilter1511 struct {
+	BTMateFilter-162
 	// Type of JSON object.
-	BtType           *string       `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	AllowedMateTypes []GBTMateType `json:"allowedMateTypes,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTAllowedMateTypeFilter1511) SetAllowedMateTypes(v []GBTMateType) {
 }
 
 func (o BTAllowedMateTypeFilter1511) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTAllowedMateTypeFilter1511) MarshalJSON() ([]byte, error) {
 
 func (o BTAllowedMateTypeFilter1511) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMateFilter162, errBTMateFilter162 := json.Marshal(o.BTMateFilter162)
+	if errBTMateFilter162 != nil {
+		return map[string]interface{}{}, errBTMateFilter162
+	}
+	errBTMateFilter162 = json.Unmarshal([]byte(serializedBTMateFilter162), &toSerialize)
+	if errBTMateFilter162 != nil {
+		return map[string]interface{}{}, errBTMateFilter162
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTAllowedMateTypeFilter1511) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_and_filter_110.go b/onshape/model_bt_and_filter_110.go
index d221ee43a..1943cac29 100644
--- a/onshape/model_bt_and_filter_110.go
+++ b/onshape/model_bt_and_filter_110.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTAndFilter110{}
 
 // BTAndFilter110 struct for BTAndFilter110
 type BTAndFilter110 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType   *string           `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Operand1 *BTQueryFilter183 `json:"operand1,omitempty"`
 	Operand2 *BTQueryFilter183 `json:"operand2,omitempty"`
 }
@@ -140,7 +141,7 @@ func (o *BTAndFilter110) SetOperand2(v BTQueryFilter183) {
 }
 
 func (o BTAndFilter110) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTAndFilter110) MarshalJSON() ([]byte, error) {
 
 func (o BTAndFilter110) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTAndFilter110) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_angular_dimension_display_data_320.go b/onshape/model_bt_angular_dimension_display_data_320.go
index abc4cc654..3d90ef58a 100644
--- a/onshape/model_bt_angular_dimension_display_data_320.go
+++ b/onshape/model_bt_angular_dimension_display_data_320.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTAngularDimensionDisplayData320{}
 
 // BTAngularDimensionDisplayData320 struct for BTAngularDimensionDisplayData320
 type BTAngularDimensionDisplayData320 struct {
+	BTDimensionDisplayData-323
 	// Type of JSON object.
-	BtType            *string  `json:"btType,omitempty"`
-	Clockwise         *bool    `json:"clockwise,omitempty"`
-	PositionR         *float64 `json:"positionR,omitempty"`
-	PositionT         *float64 `json:"positionT,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Clockwise *bool `json:"clockwise,omitempty"`
+	PositionR *float64 `json:"positionR,omitempty"`
+	PositionT *float64 `json:"positionT,omitempty"`
 	WitnessEndPoint0r *float64 `json:"witnessEndPoint0r,omitempty"`
 	WitnessEndPoint0t *float64 `json:"witnessEndPoint0t,omitempty"`
 	WitnessEndPoint1r *float64 `json:"witnessEndPoint1r,omitempty"`
@@ -437,7 +438,7 @@ func (o *BTAngularDimensionDisplayData320) SetWitnessMinPoint1r(v float64) {
 }
 
 func (o BTAngularDimensionDisplayData320) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -446,6 +447,14 @@ func (o BTAngularDimensionDisplayData320) MarshalJSON() ([]byte, error) {
 
 func (o BTAngularDimensionDisplayData320) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTDimensionDisplayData323, errBTDimensionDisplayData323 := json.Marshal(o.BTDimensionDisplayData323)
+	if errBTDimensionDisplayData323 != nil {
+		return map[string]interface{}{}, errBTDimensionDisplayData323
+	}
+	errBTDimensionDisplayData323 = json.Unmarshal([]byte(serializedBTDimensionDisplayData323), &toSerialize)
+	if errBTDimensionDisplayData323 != nil {
+		return map[string]interface{}{}, errBTDimensionDisplayData323
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -520,3 +529,5 @@ func (v *NullableBTAngularDimensionDisplayData320) UnmarshalJSON(src []byte) err
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_app_element_bulk_create_info.go b/onshape/model_bt_app_element_bulk_create_info.go
index bb1ba0316..e0e4c2596 100644
--- a/onshape/model_bt_app_element_bulk_create_info.go
+++ b/onshape/model_bt_app_element_bulk_create_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTAppElementBulkCreateInfo type satisfies the MappedNullable interface at compile time
@@ -33,6 +35,8 @@ type BTAppElementBulkCreateInfo struct {
 	ErrorValue       *BTAppElementErrorCode `json:"errorValue,omitempty"`
 }
 
+type _BTAppElementBulkCreateInfo BTAppElementBulkCreateInfo
+
 // NewBTAppElementBulkCreateInfo instantiates a new BTAppElementBulkCreateInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -264,6 +268,43 @@ func (o BTAppElementBulkCreateInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTAppElementBulkCreateInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"documentMicroversionId",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTAppElementBulkCreateInfo := _BTAppElementBulkCreateInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTAppElementBulkCreateInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTAppElementBulkCreateInfo(varBTAppElementBulkCreateInfo)
+
+	return err
+}
+
 type NullableBTAppElementBulkCreateInfo struct {
 	value *BTAppElementBulkCreateInfo
 	isSet bool
diff --git a/onshape/model_bt_app_element_bulk_create_params.go b/onshape/model_bt_app_element_bulk_create_params.go
index da7029166..5d7facf2e 100644
--- a/onshape/model_bt_app_element_bulk_create_params.go
+++ b/onshape/model_bt_app_element_bulk_create_params.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTAppElementBulkCreateParams type satisfies the MappedNullable interface at compile time
@@ -29,6 +31,8 @@ type BTAppElementBulkCreateParams struct {
 	Names []string `json:"names,omitempty"`
 }
 
+type _BTAppElementBulkCreateParams BTAppElementBulkCreateParams
+
 // NewBTAppElementBulkCreateParams instantiates a new BTAppElementBulkCreateParams object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -190,6 +194,43 @@ func (o BTAppElementBulkCreateParams) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTAppElementBulkCreateParams) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"formatId",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTAppElementBulkCreateParams := _BTAppElementBulkCreateParams{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTAppElementBulkCreateParams)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTAppElementBulkCreateParams(varBTAppElementBulkCreateParams)
+
+	return err
+}
+
 type NullableBTAppElementBulkCreateParams struct {
 	value *BTAppElementBulkCreateParams
 	isSet bool
diff --git a/onshape/model_bt_app_element_change_params.go b/onshape/model_bt_app_element_change_params.go
index f2942d26c..dd375d82f 100644
--- a/onshape/model_bt_app_element_change_params.go
+++ b/onshape/model_bt_app_element_change_params.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTAppElementChangeParams type satisfies the MappedNullable interface at compile time
@@ -28,6 +30,8 @@ type BTAppElementChangeParams struct {
 	SubelementId string `json:"subelementId"`
 }
 
+type _BTAppElementChangeParams BTAppElementChangeParams
+
 // NewBTAppElementChangeParams instantiates a new BTAppElementChangeParams object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -154,6 +158,43 @@ func (o BTAppElementChangeParams) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTAppElementChangeParams) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"subelementId",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTAppElementChangeParams := _BTAppElementChangeParams{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTAppElementChangeParams)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTAppElementChangeParams(varBTAppElementChangeParams)
+
+	return err
+}
+
 type NullableBTAppElementChangeParams struct {
 	value *BTAppElementChangeParams
 	isSet bool
diff --git a/onshape/model_bt_app_element_modify_info.go b/onshape/model_bt_app_element_modify_info.go
index 06077bf3f..dbcfb3c30 100644
--- a/onshape/model_bt_app_element_modify_info.go
+++ b/onshape/model_bt_app_element_modify_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTAppElementModifyInfo type satisfies the MappedNullable interface at compile time
@@ -40,6 +42,8 @@ type BTAppElementModifyInfo struct {
 	TransactionId *string `json:"transactionId,omitempty"`
 }
 
+type _BTAppElementModifyInfo BTAppElementModifyInfo
+
 // NewBTAppElementModifyInfo instantiates a new BTAppElementModifyInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -411,6 +415,43 @@ func (o BTAppElementModifyInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTAppElementModifyInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"changeId",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTAppElementModifyInfo := _BTAppElementModifyInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTAppElementModifyInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTAppElementModifyInfo(varBTAppElementModifyInfo)
+
+	return err
+}
+
 type NullableBTAppElementModifyInfo struct {
 	value *BTAppElementModifyInfo
 	isSet bool
diff --git a/onshape/model_bt_app_element_params.go b/onshape/model_bt_app_element_params.go
index 65e3e6637..8b9c0fc42 100644
--- a/onshape/model_bt_app_element_params.go
+++ b/onshape/model_bt_app_element_params.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTAppElementParams type satisfies the MappedNullable interface at compile time
@@ -33,6 +35,8 @@ type BTAppElementParams struct {
 	Subelements []BTAppElementChangeParams `json:"subelements,omitempty"`
 }
 
+type _BTAppElementParams BTAppElementParams
+
 // NewBTAppElementParams instantiates a new BTAppElementParams object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -264,6 +268,43 @@ func (o BTAppElementParams) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTAppElementParams) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"formatId",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTAppElementParams := _BTAppElementParams{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTAppElementParams)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTAppElementParams(varBTAppElementParams)
+
+	return err
+}
+
 type NullableBTAppElementParams struct {
 	value *BTAppElementParams
 	isSet bool
diff --git a/onshape/model_bt_app_element_reference_info.go b/onshape/model_bt_app_element_reference_info.go
index cd4cd3774..4e1b1ba79 100644
--- a/onshape/model_bt_app_element_reference_info.go
+++ b/onshape/model_bt_app_element_reference_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTAppElementReferenceInfo type satisfies the MappedNullable interface at compile time
@@ -34,6 +36,8 @@ type BTAppElementReferenceInfo struct {
 	TransactionId *string `json:"transactionId,omitempty"`
 }
 
+type _BTAppElementReferenceInfo BTAppElementReferenceInfo
+
 // NewBTAppElementReferenceInfo instantiates a new BTAppElementReferenceInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -300,6 +304,43 @@ func (o BTAppElementReferenceInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTAppElementReferenceInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"changeId",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTAppElementReferenceInfo := _BTAppElementReferenceInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTAppElementReferenceInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTAppElementReferenceInfo(varBTAppElementReferenceInfo)
+
+	return err
+}
+
 type NullableBTAppElementReferenceInfo struct {
 	value *BTAppElementReferenceInfo
 	isSet bool
diff --git a/onshape/model_bt_arc_length_dimension_display_data_1018.go b/onshape/model_bt_arc_length_dimension_display_data_1018.go
index e3e79374d..3d8c686db 100644
--- a/onshape/model_bt_arc_length_dimension_display_data_1018.go
+++ b/onshape/model_bt_arc_length_dimension_display_data_1018.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTArcLengthDimensionDisplayData1018{}
 
 // BTArcLengthDimensionDisplayData1018 struct for BTArcLengthDimensionDisplayData1018
 type BTArcLengthDimensionDisplayData1018 struct {
+	BTAngularDimensionDisplayData-320
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTArcLengthDimensionDisplayData1018) SetBtType(v string) {
 }
 
 func (o BTArcLengthDimensionDisplayData1018) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTArcLengthDimensionDisplayData1018) MarshalJSON() ([]byte, error) {
 
 func (o BTArcLengthDimensionDisplayData1018) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTAngularDimensionDisplayData320, errBTAngularDimensionDisplayData320 := json.Marshal(o.BTAngularDimensionDisplayData320)
+	if errBTAngularDimensionDisplayData320 != nil {
+		return map[string]interface{}{}, errBTAngularDimensionDisplayData320
+	}
+	errBTAngularDimensionDisplayData320 = json.Unmarshal([]byte(serializedBTAngularDimensionDisplayData320), &toSerialize)
+	if errBTAngularDimensionDisplayData320 != nil {
+		return map[string]interface{}{}, errBTAngularDimensionDisplayData320
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTArcLengthDimensionDisplayData1018) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_assembly_feature_list_response_1174.go b/onshape/model_bt_assembly_feature_list_response_1174.go
index d46f7b27b..95700dd20 100644
--- a/onshape/model_bt_assembly_feature_list_response_1174.go
+++ b/onshape/model_bt_assembly_feature_list_response_1174.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTAssemblyFeatureListResponse1174{}
 
 // BTAssemblyFeatureListResponse1174 struct for BTAssemblyFeatureListResponse1174
 type BTAssemblyFeatureListResponse1174 struct {
+	BTFeatureApiBase-1430
 	// Type of JSON object.
-	BtType        *string                        `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	FeatureStates *map[string]BTFeatureState1688 `json:"featureStates,omitempty"`
-	Features      []BTMAssemblyFeature887        `json:"features,omitempty"`
-	IsComplete    *bool                          `json:"isComplete,omitempty"`
+	Features []BTMAssemblyFeature887 `json:"features,omitempty"`
+	IsComplete *bool `json:"isComplete,omitempty"`
 }
 
 // NewBTAssemblyFeatureListResponse1174 instantiates a new BTAssemblyFeatureListResponse1174 object
@@ -173,7 +174,7 @@ func (o *BTAssemblyFeatureListResponse1174) SetIsComplete(v bool) {
 }
 
 func (o BTAssemblyFeatureListResponse1174) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTAssemblyFeatureListResponse1174) MarshalJSON() ([]byte, error) {
 
 func (o BTAssemblyFeatureListResponse1174) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFeatureApiBase1430, errBTFeatureApiBase1430 := json.Marshal(o.BTFeatureApiBase1430)
+	if errBTFeatureApiBase1430 != nil {
+		return map[string]interface{}{}, errBTFeatureApiBase1430
+	}
+	errBTFeatureApiBase1430 = json.Unmarshal([]byte(serializedBTFeatureApiBase1430), &toSerialize)
+	if errBTFeatureApiBase1430 != nil {
+		return map[string]interface{}{}, errBTFeatureApiBase1430
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTAssemblyFeatureListResponse1174) UnmarshalJSON(src []byte) er
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_assembly_instance_947.go b/onshape/model_bt_assembly_instance_947.go
index 8c338eff4..0369ca50d 100644
--- a/onshape/model_bt_assembly_instance_947.go
+++ b/onshape/model_bt_assembly_instance_947.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTAssemblyInstance947{}
 
 // BTAssemblyInstance947 struct for BTAssemblyInstance947
 type BTAssemblyInstance947 struct {
+	BTInstance-642
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTAssemblyInstance947) SetBtType(v string) {
 }
 
 func (o BTAssemblyInstance947) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTAssemblyInstance947) MarshalJSON() ([]byte, error) {
 
 func (o BTAssemblyInstance947) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTInstance642, errBTInstance642 := json.Marshal(o.BTInstance642)
+	if errBTInstance642 != nil {
+		return map[string]interface{}{}, errBTInstance642
+	}
+	errBTInstance642 = json.Unmarshal([]byte(serializedBTInstance642), &toSerialize)
+	if errBTInstance642 != nil {
+		return map[string]interface{}{}, errBTInstance642
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTAssemblyInstance947) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_assembly_instance_definition_params.go b/onshape/model_bt_assembly_instance_definition_params.go
index b701c4cc5..c6bcb6a35 100644
--- a/onshape/model_bt_assembly_instance_definition_params.go
+++ b/onshape/model_bt_assembly_instance_definition_params.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTAssemblyInstanceDefinitionParams type satisfies the MappedNullable interface at compile time
@@ -36,6 +38,8 @@ type BTAssemblyInstanceDefinitionParams struct {
 	VersionId         *string             `json:"versionId,omitempty"`
 }
 
+type _BTAssemblyInstanceDefinitionParams BTAssemblyInstanceDefinitionParams
+
 // NewBTAssemblyInstanceDefinitionParams instantiates a new BTAssemblyInstanceDefinitionParams object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -547,6 +551,43 @@ func (o BTAssemblyInstanceDefinitionParams) ToMap() (map[string]interface{}, err
 	return toSerialize, nil
 }
 
+func (o *BTAssemblyInstanceDefinitionParams) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"documentId",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTAssemblyInstanceDefinitionParams := _BTAssemblyInstanceDefinitionParams{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTAssemblyInstanceDefinitionParams)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTAssemblyInstanceDefinitionParams(varBTAssemblyInstanceDefinitionParams)
+
+	return err
+}
+
 type NullableBTAssemblyInstanceDefinitionParams struct {
 	value *BTAssemblyInstanceDefinitionParams
 	isSet bool
diff --git a/onshape/model_bt_assembly_pattern_1974.go b/onshape/model_bt_assembly_pattern_1974.go
index 1d19a7f73..e1acc422a 100644
--- a/onshape/model_bt_assembly_pattern_1974.go
+++ b/onshape/model_bt_assembly_pattern_1974.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTAssemblyPattern1974{}
 
 // BTAssemblyPattern1974 struct for BTAssemblyPattern1974
 type BTAssemblyPattern1974 struct {
+	BTParametricInstance-2641
 	// Type of JSON object.
-	BtType         *string                        `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	PatternFeature *BTMAssemblyPatternFeature2241 `json:"patternFeature,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTAssemblyPattern1974) SetPatternFeature(v BTMAssemblyPatternFeature224
 }
 
 func (o BTAssemblyPattern1974) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTAssemblyPattern1974) MarshalJSON() ([]byte, error) {
 
 func (o BTAssemblyPattern1974) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParametricInstance2641, errBTParametricInstance2641 := json.Marshal(o.BTParametricInstance2641)
+	if errBTParametricInstance2641 != nil {
+		return map[string]interface{}{}, errBTParametricInstance2641
+	}
+	errBTParametricInstance2641 = json.Unmarshal([]byte(serializedBTParametricInstance2641), &toSerialize)
+	if errBTParametricInstance2641 != nil {
+		return map[string]interface{}{}, errBTParametricInstance2641
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTAssemblyPattern1974) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_assembly_replicate_2774.go b/onshape/model_bt_assembly_replicate_2774.go
index c47077100..234e2ee83 100644
--- a/onshape/model_bt_assembly_replicate_2774.go
+++ b/onshape/model_bt_assembly_replicate_2774.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTAssemblyReplicate2774{}
 
 // BTAssemblyReplicate2774 struct for BTAssemblyReplicate2774
 type BTAssemblyReplicate2774 struct {
+	BTParametricInstance-2641
 	// Type of JSON object.
-	BtType           *string                          `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	ReplicateFeature *BTMAssemblyReplicateFeature1351 `json:"replicateFeature,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTAssemblyReplicate2774) SetReplicateFeature(v BTMAssemblyReplicateFeat
 }
 
 func (o BTAssemblyReplicate2774) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTAssemblyReplicate2774) MarshalJSON() ([]byte, error) {
 
 func (o BTAssemblyReplicate2774) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParametricInstance2641, errBTParametricInstance2641 := json.Marshal(o.BTParametricInstance2641)
+	if errBTParametricInstance2641 != nil {
+		return map[string]interface{}{}, errBTParametricInstance2641
+	}
+	errBTParametricInstance2641 = json.Unmarshal([]byte(serializedBTParametricInstance2641), &toSerialize)
+	if errBTParametricInstance2641 != nil {
+		return map[string]interface{}{}, errBTParametricInstance2641
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTAssemblyReplicate2774) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_assembly_simulation_2246.go b/onshape/model_bt_assembly_simulation_2246.go
index 0a844b0ef..8b3e789b9 100644
--- a/onshape/model_bt_assembly_simulation_2246.go
+++ b/onshape/model_bt_assembly_simulation_2246.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTAssemblySimulation2246{}
 
 // BTAssemblySimulation2246 struct for BTAssemblySimulation2246
 type BTAssemblySimulation2246 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
-	BtType        *string                    `json:"btType,omitempty"`
-	Modal         *bool                      `json:"modal,omitempty"`
-	NumberOfModes *float64                   `json:"numberOfModes,omitempty"`
-	Type          *GBTAssemblySimulationType `json:"type,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Modal *bool `json:"modal,omitempty"`
+	NumberOfModes *float64 `json:"numberOfModes,omitempty"`
+	Type *GBTAssemblySimulationType `json:"type,omitempty"`
 }
 
 // NewBTAssemblySimulation2246 instantiates a new BTAssemblySimulation2246 object
@@ -173,7 +174,7 @@ func (o *BTAssemblySimulation2246) SetType(v GBTAssemblySimulationType) {
 }
 
 func (o BTAssemblySimulation2246) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTAssemblySimulation2246) MarshalJSON() ([]byte, error) {
 
 func (o BTAssemblySimulation2246) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTAssemblySimulation2246) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_assembly_simulation_data_978.go b/onshape/model_bt_assembly_simulation_data_978.go
index 5d0f308b1..17ea75240 100644
--- a/onshape/model_bt_assembly_simulation_data_978.go
+++ b/onshape/model_bt_assembly_simulation_data_978.go
@@ -20,13 +20,14 @@ var _ MappedNullable = &BTAssemblySimulationData978{}
 
 // BTAssemblySimulationData978 struct for BTAssemblySimulationData978
 type BTAssemblySimulationData978 struct {
+	BTMNode-19
 	// Type of JSON object.
-	BtType          *string                       `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	ContactBehavior *GBTSimulationContactBehavior `json:"contactBehavior,omitempty"`
-	Loads           []BTMLoad3538                 `json:"loads,omitempty"`
-	LoadsByNodeId   *map[string]BTMLoad3538       `json:"loadsByNodeId,omitempty"`
-	Simulations     []BTAssemblySimulation2246    `json:"simulations,omitempty"`
-	StructuralLoads []BTMLoad3538                 `json:"structuralLoads,omitempty"`
+	Loads []BTMLoad3538 `json:"loads,omitempty"`
+	LoadsByNodeId *map[string]BTMLoad3538 `json:"loadsByNodeId,omitempty"`
+	Simulations []BTAssemblySimulation2246 `json:"simulations,omitempty"`
+	StructuralLoads []BTMLoad3538 `json:"structuralLoads,omitempty"`
 }
 
 // NewBTAssemblySimulationData978 instantiates a new BTAssemblySimulationData978 object
@@ -239,7 +240,7 @@ func (o *BTAssemblySimulationData978) SetStructuralLoads(v []BTMLoad3538) {
 }
 
 func (o BTAssemblySimulationData978) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -248,6 +249,14 @@ func (o BTAssemblySimulationData978) MarshalJSON() ([]byte, error) {
 
 func (o BTAssemblySimulationData978) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMNode19, errBTMNode19 := json.Marshal(o.BTMNode19)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
+	errBTMNode19 = json.Unmarshal([]byte(serializedBTMNode19), &toSerialize)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -304,3 +313,5 @@ func (v *NullableBTAssemblySimulationData978) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_assembly_simulation_structural_loads_table_3867.go b/onshape/model_bt_assembly_simulation_structural_loads_table_3867.go
index e1ab63780..8710e51e7 100644
--- a/onshape/model_bt_assembly_simulation_structural_loads_table_3867.go
+++ b/onshape/model_bt_assembly_simulation_structural_loads_table_3867.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTAssemblySimulationStructuralLoadsTable3867{}
 
 // BTAssemblySimulationStructuralLoadsTable3867 struct for BTAssemblySimulationStructuralLoadsTable3867
 type BTAssemblySimulationStructuralLoadsTable3867 struct {
+	BTTable-1825
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTAssemblySimulationStructuralLoadsTable3867) SetBtType(v string) {
 }
 
 func (o BTAssemblySimulationStructuralLoadsTable3867) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTAssemblySimulationStructuralLoadsTable3867) MarshalJSON() ([]byte, err
 
 func (o BTAssemblySimulationStructuralLoadsTable3867) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTable1825, errBTTable1825 := json.Marshal(o.BTTable1825)
+	if errBTTable1825 != nil {
+		return map[string]interface{}{}, errBTTable1825
+	}
+	errBTTable1825 = json.Unmarshal([]byte(serializedBTTable1825), &toSerialize)
+	if errBTTable1825 != nil {
+		return map[string]interface{}{}, errBTTable1825
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTAssemblySimulationStructuralLoadsTable3867) UnmarshalJSON(src
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_assembly_simulation_table_3236.go b/onshape/model_bt_assembly_simulation_table_3236.go
index fa6360e98..4bf99cf75 100644
--- a/onshape/model_bt_assembly_simulation_table_3236.go
+++ b/onshape/model_bt_assembly_simulation_table_3236.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTAssemblySimulationTable3236{}
 
 // BTAssemblySimulationTable3236 struct for BTAssemblySimulationTable3236
 type BTAssemblySimulationTable3236 struct {
+	BTTable-1825
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTAssemblySimulationTable3236) SetBtType(v string) {
 }
 
 func (o BTAssemblySimulationTable3236) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTAssemblySimulationTable3236) MarshalJSON() ([]byte, error) {
 
 func (o BTAssemblySimulationTable3236) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTable1825, errBTTable1825 := json.Marshal(o.BTTable1825)
+	if errBTTable1825 != nil {
+		return map[string]interface{}{}, errBTTable1825
+	}
+	errBTTable1825 = json.Unmarshal([]byte(serializedBTTable1825), &toSerialize)
+	if errBTTable1825 != nil {
+		return map[string]interface{}{}, errBTTable1825
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTAssemblySimulationTable3236) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_base_sm_joint_table_row_metadata_2232.go b/onshape/model_bt_base_sm_joint_table_row_metadata_2232.go
index 4e831ab39..0c3502436 100644
--- a/onshape/model_bt_base_sm_joint_table_row_metadata_2232.go
+++ b/onshape/model_bt_base_sm_joint_table_row_metadata_2232.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTBaseSMJointTableRowMetadata2232{}
 
 // BTBaseSMJointTableRowMetadata2232 struct for BTBaseSMJointTableRowMetadata2232
 type BTBaseSMJointTableRowMetadata2232 struct {
+	BTTableBaseRowMetadata-3181
 	// Type of JSON object.
-	BtType                  *string                        `json:"btType,omitempty"`
-	CrossHighlightData      *BTTableCrossHighlightData1753 `json:"crossHighlightData,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	CrossHighlightData *BTTableCrossHighlightData1753 `json:"crossHighlightData,omitempty"`
 	CrossHighlightDataIfAny *BTTableCrossHighlightData1753 `json:"crossHighlightDataIfAny,omitempty"`
 }
 
@@ -140,7 +141,7 @@ func (o *BTBaseSMJointTableRowMetadata2232) SetCrossHighlightDataIfAny(v BTTable
 }
 
 func (o BTBaseSMJointTableRowMetadata2232) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTBaseSMJointTableRowMetadata2232) MarshalJSON() ([]byte, error) {
 
 func (o BTBaseSMJointTableRowMetadata2232) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableBaseRowMetadata3181, errBTTableBaseRowMetadata3181 := json.Marshal(o.BTTableBaseRowMetadata3181)
+	if errBTTableBaseRowMetadata3181 != nil {
+		return map[string]interface{}{}, errBTTableBaseRowMetadata3181
+	}
+	errBTTableBaseRowMetadata3181 = json.Unmarshal([]byte(serializedBTTableBaseRowMetadata3181), &toSerialize)
+	if errBTTableBaseRowMetadata3181 != nil {
+		return map[string]interface{}{}, errBTTableBaseRowMetadata3181
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTBaseSMJointTableRowMetadata2232) UnmarshalJSON(src []byte) er
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_bill_of_materials_table_1073.go b/onshape/model_bt_bill_of_materials_table_1073.go
index 03aa66228..b1eefb35d 100644
--- a/onshape/model_bt_bill_of_materials_table_1073.go
+++ b/onshape/model_bt_bill_of_materials_table_1073.go
@@ -20,14 +20,15 @@ var _ MappedNullable = &BTBillOfMaterialsTable1073{}
 
 // BTBillOfMaterialsTable1073 struct for BTBillOfMaterialsTable1073
 type BTBillOfMaterialsTable1073 struct {
+	BTTable-1825
 	// Type of JSON object.
-	BtType                                  *string  `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	FailedMetadataRepresentativeOccurrences []string `json:"failedMetadataRepresentativeOccurrences,omitempty"`
-	Indented                                *bool    `json:"indented,omitempty"`
-	IsShowingTopLevelAssemblyRow            *bool    `json:"isShowingTopLevelAssemblyRow,omitempty"`
-	PartNumber                              *string  `json:"partNumber,omitempty"`
-	Revision                                *string  `json:"revision,omitempty"`
-	ShowingExcluded                         *bool    `json:"showingExcluded,omitempty"`
+	Indented *bool `json:"indented,omitempty"`
+	IsShowingTopLevelAssemblyRow *bool `json:"isShowingTopLevelAssemblyRow,omitempty"`
+	PartNumber *string `json:"partNumber,omitempty"`
+	Revision *string `json:"revision,omitempty"`
+	ShowingExcluded *bool `json:"showingExcluded,omitempty"`
 }
 
 // NewBTBillOfMaterialsTable1073 instantiates a new BTBillOfMaterialsTable1073 object
@@ -272,7 +273,7 @@ func (o *BTBillOfMaterialsTable1073) SetShowingExcluded(v bool) {
 }
 
 func (o BTBillOfMaterialsTable1073) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -281,6 +282,14 @@ func (o BTBillOfMaterialsTable1073) MarshalJSON() ([]byte, error) {
 
 func (o BTBillOfMaterialsTable1073) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTable1825, errBTTable1825 := json.Marshal(o.BTTable1825)
+	if errBTTable1825 != nil {
+		return map[string]interface{}{}, errBTTable1825
+	}
+	errBTTable1825 = json.Unmarshal([]byte(serializedBTTable1825), &toSerialize)
+	if errBTTable1825 != nil {
+		return map[string]interface{}{}, errBTTable1825
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -340,3 +349,5 @@ func (v *NullableBTBillOfMaterialsTable1073) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_bill_of_materials_table_row_1425.go b/onshape/model_bt_bill_of_materials_table_row_1425.go
index d8811c7ee..04193b5e7 100644
--- a/onshape/model_bt_bill_of_materials_table_row_1425.go
+++ b/onshape/model_bt_bill_of_materials_table_row_1425.go
@@ -20,18 +20,19 @@ var _ MappedNullable = &BTBillOfMaterialsTableRow1425{}
 
 // BTBillOfMaterialsTableRow1425 struct for BTBillOfMaterialsTableRow1425
 type BTBillOfMaterialsTableRow1425 struct {
+	BTTableRow-1054
 	// Type of JSON object.
-	BtType                 *string                            `json:"btType,omitempty"`
-	ExcludeIsEditable      *bool                              `json:"excludeIsEditable,omitempty"`
-	ExcludeIsOverridden    *bool                              `json:"excludeIsOverridden,omitempty"`
-	ExclusionStatus        *GBTBillOfMaterialsExclusionStatus `json:"exclusionStatus,omitempty"`
-	ExpansionStatus        *GBTBillOfMaterialsExpansionStatus `json:"expansionStatus,omitempty"`
-	IndentLevel            *int32                             `json:"indentLevel,omitempty"`
-	MetadataObjectType     *int32                             `json:"metadataObjectType,omitempty"`
-	MetadataUpdateHref     *string                            `json:"metadataUpdateHref,omitempty"`
-	Name                   *string                            `json:"name,omitempty"`
-	RelatedOccurrencePaths []string                           `json:"relatedOccurrencePaths,omitempty"`
-	UniqueItemId           *BTBillOfMaterialsUniqueItemId2029 `json:"uniqueItemId,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	ExcludeIsEditable *bool `json:"excludeIsEditable,omitempty"`
+	ExcludeIsOverridden *bool `json:"excludeIsOverridden,omitempty"`
+	ExclusionStatus *GBTBillOfMaterialsExclusionStatus `json:"exclusionStatus,omitempty"`
+	ExpansionStatus *GBTBillOfMaterialsExpansionStatus `json:"expansionStatus,omitempty"`
+	IndentLevel *int32 `json:"indentLevel,omitempty"`
+	MetadataObjectType *int32 `json:"metadataObjectType,omitempty"`
+	MetadataUpdateHref *string `json:"metadataUpdateHref,omitempty"`
+	Name *string `json:"name,omitempty"`
+	RelatedOccurrencePaths []string `json:"relatedOccurrencePaths,omitempty"`
+	UniqueItemId *BTBillOfMaterialsUniqueItemId2029 `json:"uniqueItemId,omitempty"`
 }
 
 // NewBTBillOfMaterialsTableRow1425 instantiates a new BTBillOfMaterialsTableRow1425 object
@@ -404,7 +405,7 @@ func (o *BTBillOfMaterialsTableRow1425) SetUniqueItemId(v BTBillOfMaterialsUniqu
 }
 
 func (o BTBillOfMaterialsTableRow1425) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -413,6 +414,14 @@ func (o BTBillOfMaterialsTableRow1425) MarshalJSON() ([]byte, error) {
 
 func (o BTBillOfMaterialsTableRow1425) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableRow1054, errBTTableRow1054 := json.Marshal(o.BTTableRow1054)
+	if errBTTableRow1054 != nil {
+		return map[string]interface{}{}, errBTTableRow1054
+	}
+	errBTTableRow1054 = json.Unmarshal([]byte(serializedBTTableRow1054), &toSerialize)
+	if errBTTableRow1054 != nil {
+		return map[string]interface{}{}, errBTTableRow1054
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -484,3 +493,5 @@ func (v *NullableBTBillOfMaterialsTableRow1425) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_bill_of_materials_table_row_metadata_1300.go b/onshape/model_bt_bill_of_materials_table_row_metadata_1300.go
index 53ec8df53..fe433d5d8 100644
--- a/onshape/model_bt_bill_of_materials_table_row_metadata_1300.go
+++ b/onshape/model_bt_bill_of_materials_table_row_metadata_1300.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTBillOfMaterialsTableRowMetadata1300{}
 
 // BTBillOfMaterialsTableRowMetadata1300 struct for BTBillOfMaterialsTableRowMetadata1300
 type BTBillOfMaterialsTableRowMetadata1300 struct {
+	BTTableBaseRowMetadata-3181
 	// Type of JSON object.
-	BtType                  *string                                `json:"btType,omitempty"`
-	CrossHighlightData      *BTTableAssemblyCrossHighlightData2675 `json:"crossHighlightData,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	CrossHighlightData *BTTableAssemblyCrossHighlightData2675 `json:"crossHighlightData,omitempty"`
 	CrossHighlightDataIfAny *BTTableAssemblyCrossHighlightData2675 `json:"crossHighlightDataIfAny,omitempty"`
 }
 
@@ -140,7 +141,7 @@ func (o *BTBillOfMaterialsTableRowMetadata1300) SetCrossHighlightDataIfAny(v BTT
 }
 
 func (o BTBillOfMaterialsTableRowMetadata1300) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTBillOfMaterialsTableRowMetadata1300) MarshalJSON() ([]byte, error) {
 
 func (o BTBillOfMaterialsTableRowMetadata1300) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableBaseRowMetadata3181, errBTTableBaseRowMetadata3181 := json.Marshal(o.BTTableBaseRowMetadata3181)
+	if errBTTableBaseRowMetadata3181 != nil {
+		return map[string]interface{}{}, errBTTableBaseRowMetadata3181
+	}
+	errBTTableBaseRowMetadata3181 = json.Unmarshal([]byte(serializedBTTableBaseRowMetadata3181), &toSerialize)
+	if errBTTableBaseRowMetadata3181 != nil {
+		return map[string]interface{}{}, errBTTableBaseRowMetadata3181
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTBillOfMaterialsTableRowMetadata1300) UnmarshalJSON(src []byte
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_body_entity_26.go b/onshape/model_bt_body_entity_26.go
index 24ae22d8d..55416c8c5 100644
--- a/onshape/model_bt_body_entity_26.go
+++ b/onshape/model_bt_body_entity_26.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTBodyEntity26{}
 
 // BTBodyEntity26 struct for BTBodyEntity26
 type BTBodyEntity26 struct {
+	BTFeatureEntity-34
 	// Type of JSON object.
-	BtType                   *string `json:"btType,omitempty"`
-	DoesNotUseLevelsOfDetail *bool   `json:"doesNotUseLevelsOfDetail,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	DoesNotUseLevelsOfDetail *bool `json:"doesNotUseLevelsOfDetail,omitempty"`
 }
 
 // NewBTBodyEntity26 instantiates a new BTBodyEntity26 object
@@ -107,7 +108,7 @@ func (o *BTBodyEntity26) SetDoesNotUseLevelsOfDetail(v bool) {
 }
 
 func (o BTBodyEntity26) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTBodyEntity26) MarshalJSON() ([]byte, error) {
 
 func (o BTBodyEntity26) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFeatureEntity34, errBTFeatureEntity34 := json.Marshal(o.BTFeatureEntity34)
+	if errBTFeatureEntity34 != nil {
+		return map[string]interface{}{}, errBTFeatureEntity34
+	}
+	errBTFeatureEntity34 = json.Unmarshal([]byte(serializedBTFeatureEntity34), &toSerialize)
+	if errBTFeatureEntity34 != nil {
+		return map[string]interface{}{}, errBTFeatureEntity34
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTBodyEntity26) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_body_type_filter_112.go b/onshape/model_bt_body_type_filter_112.go
index 7f9ae726f..7c721038b 100644
--- a/onshape/model_bt_body_type_filter_112.go
+++ b/onshape/model_bt_body_type_filter_112.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTBodyTypeFilter112{}
 
 // BTBodyTypeFilter112 struct for BTBodyTypeFilter112
 type BTBodyTypeFilter112 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType   *string      `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	BodyType *GBTBodyType `json:"bodyType,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTBodyTypeFilter112) SetBodyType(v GBTBodyType) {
 }
 
 func (o BTBodyTypeFilter112) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTBodyTypeFilter112) MarshalJSON() ([]byte, error) {
 
 func (o BTBodyTypeFilter112) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTBodyTypeFilter112) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_centerline_dimension_display_data_1798.go b/onshape/model_bt_centerline_dimension_display_data_1798.go
index 21624afd0..7df1e6b5c 100644
--- a/onshape/model_bt_centerline_dimension_display_data_1798.go
+++ b/onshape/model_bt_centerline_dimension_display_data_1798.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTCenterlineDimensionDisplayData1798{}
 
 // BTCenterlineDimensionDisplayData1798 struct for BTCenterlineDimensionDisplayData1798
 type BTCenterlineDimensionDisplayData1798 struct {
+	BTLinearDimensionDisplayData-330
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTCenterlineDimensionDisplayData1798) SetBtType(v string) {
 }
 
 func (o BTCenterlineDimensionDisplayData1798) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTCenterlineDimensionDisplayData1798) MarshalJSON() ([]byte, error) {
 
 func (o BTCenterlineDimensionDisplayData1798) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTLinearDimensionDisplayData330, errBTLinearDimensionDisplayData330 := json.Marshal(o.BTLinearDimensionDisplayData330)
+	if errBTLinearDimensionDisplayData330 != nil {
+		return map[string]interface{}{}, errBTLinearDimensionDisplayData330
+	}
+	errBTLinearDimensionDisplayData330 = json.Unmarshal([]byte(serializedBTLinearDimensionDisplayData330), &toSerialize)
+	if errBTLinearDimensionDisplayData330 != nil {
+		return map[string]interface{}{}, errBTLinearDimensionDisplayData330
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTCenterlineDimensionDisplayData1798) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_circle_description_1145.go b/onshape/model_bt_circle_description_1145.go
index 226e486a6..484fc9ac3 100644
--- a/onshape/model_bt_circle_description_1145.go
+++ b/onshape/model_bt_circle_description_1145.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTCircleDescription1145{}
 
 // BTCircleDescription1145 struct for BTCircleDescription1145
 type BTCircleDescription1145 struct {
+	BTCurveDescription-1583
 	// Type of JSON object.
-	BtType *string        `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Normal *BTVector3d389 `json:"normal,omitempty"`
-	Radius *float64       `json:"radius,omitempty"`
+	Radius *float64 `json:"radius,omitempty"`
 }
 
 // NewBTCircleDescription1145 instantiates a new BTCircleDescription1145 object
@@ -140,7 +141,7 @@ func (o *BTCircleDescription1145) SetRadius(v float64) {
 }
 
 func (o BTCircleDescription1145) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTCircleDescription1145) MarshalJSON() ([]byte, error) {
 
 func (o BTCircleDescription1145) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTCurveDescription1583, errBTCurveDescription1583 := json.Marshal(o.BTCurveDescription1583)
+	if errBTCurveDescription1583 != nil {
+		return map[string]interface{}{}, errBTCurveDescription1583
+	}
+	errBTCurveDescription1583 = json.Unmarshal([]byte(serializedBTCurveDescription1583), &toSerialize)
+	if errBTCurveDescription1583 != nil {
+		return map[string]interface{}{}, errBTCurveDescription1583
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTCircleDescription1145) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_classroom_info.go b/onshape/model_bt_classroom_info.go
index 40c2893fa..2360da2a3 100644
--- a/onshape/model_bt_classroom_info.go
+++ b/onshape/model_bt_classroom_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTClassroomInfo type satisfies the MappedNullable interface at compile time
@@ -20,6 +22,7 @@ var _ MappedNullable = &BTClassroomInfo{}
 
 // BTClassroomInfo struct for BTClassroomInfo
 type BTClassroomInfo struct {
+	BTGlobalTreeNodeInfo
 	Educator            *bool   `json:"educator,omitempty"`
 	NumberOfAssignments *int64  `json:"numberOfAssignments,omitempty"`
 	NumberOfMembers     *int64  `json:"numberOfMembers,omitempty"`
@@ -28,6 +31,8 @@ type BTClassroomInfo struct {
 	Title               *string `json:"title,omitempty"`
 }
 
+type _BTClassroomInfo BTClassroomInfo
+
 // NewBTClassroomInfo instantiates a new BTClassroomInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -269,6 +274,43 @@ func (o BTClassroomInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTClassroomInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTClassroomInfo := _BTClassroomInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTClassroomInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTClassroomInfo(varBTClassroomInfo)
+
+	return err
+}
+
 type NullableBTClassroomInfo struct {
 	value *BTClassroomInfo
 	isSet bool
diff --git a/onshape/model_bt_cloned_instance_2505.go b/onshape/model_bt_cloned_instance_2505.go
index 28773131e..c0b2940b5 100644
--- a/onshape/model_bt_cloned_instance_2505.go
+++ b/onshape/model_bt_cloned_instance_2505.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTClonedInstance2505{}
 
 // BTClonedInstance2505 struct for BTClonedInstance2505
 type BTClonedInstance2505 struct {
+	BTParametricOutputInstance-2288
 	// Type of JSON object.
-	BtType         *string         `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	SeedOccurrence *BTOccurrence74 `json:"seedOccurrence,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTClonedInstance2505) SetSeedOccurrence(v BTOccurrence74) {
 }
 
 func (o BTClonedInstance2505) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTClonedInstance2505) MarshalJSON() ([]byte, error) {
 
 func (o BTClonedInstance2505) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParametricOutputInstance2288, errBTParametricOutputInstance2288 := json.Marshal(o.BTParametricOutputInstance2288)
+	if errBTParametricOutputInstance2288 != nil {
+		return map[string]interface{}{}, errBTParametricOutputInstance2288
+	}
+	errBTParametricOutputInstance2288 = json.Unmarshal([]byte(serializedBTParametricOutputInstance2288), &toSerialize)
+	if errBTParametricOutputInstance2288 != nil {
+		return map[string]interface{}{}, errBTParametricOutputInstance2288
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTClonedInstance2505) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_closed_curve_filter_1206.go b/onshape/model_bt_closed_curve_filter_1206.go
index 7911b7e2b..4224ff37d 100644
--- a/onshape/model_bt_closed_curve_filter_1206.go
+++ b/onshape/model_bt_closed_curve_filter_1206.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTClosedCurveFilter1206{}
 
 // BTClosedCurveFilter1206 struct for BTClosedCurveFilter1206
 type BTClosedCurveFilter1206 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType   *string `json:"btType,omitempty"`
-	IsClosed *bool   `json:"isClosed,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsClosed *bool `json:"isClosed,omitempty"`
 }
 
 // NewBTClosedCurveFilter1206 instantiates a new BTClosedCurveFilter1206 object
@@ -107,7 +108,7 @@ func (o *BTClosedCurveFilter1206) SetIsClosed(v bool) {
 }
 
 func (o BTClosedCurveFilter1206) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTClosedCurveFilter1206) MarshalJSON() ([]byte, error) {
 
 func (o BTClosedCurveFilter1206) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTClosedCurveFilter1206) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_cloud_storage_account_info.go b/onshape/model_bt_cloud_storage_account_info.go
index d7d6719f7..fd9683fe1 100644
--- a/onshape/model_bt_cloud_storage_account_info.go
+++ b/onshape/model_bt_cloud_storage_account_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTCloudStorageAccountInfo type satisfies the MappedNullable interface at compile time
@@ -20,6 +22,7 @@ var _ MappedNullable = &BTCloudStorageAccountInfo{}
 
 // BTCloudStorageAccountInfo struct for BTCloudStorageAccountInfo
 type BTCloudStorageAccountInfo struct {
+	BTGlobalTreeNodeInfo
 	CloudStorageAccountId *string                   `json:"cloudStorageAccountId,omitempty"`
 	CloudStorageProvider  *int32                    `json:"cloudStorageProvider,omitempty"`
 	Enabled               *bool                     `json:"enabled,omitempty"`
@@ -27,6 +30,8 @@ type BTCloudStorageAccountInfo struct {
 	ImportFolder          *BTCloudStorageObjectInfo `json:"importFolder,omitempty"`
 }
 
+type _BTCloudStorageAccountInfo BTCloudStorageAccountInfo
+
 // NewBTCloudStorageAccountInfo instantiates a new BTCloudStorageAccountInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -233,6 +238,43 @@ func (o BTCloudStorageAccountInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTCloudStorageAccountInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTCloudStorageAccountInfo := _BTCloudStorageAccountInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTCloudStorageAccountInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTCloudStorageAccountInfo(varBTCloudStorageAccountInfo)
+
+	return err
+}
+
 type NullableBTCloudStorageAccountInfo struct {
 	value *BTCloudStorageAccountInfo
 	isSet bool
diff --git a/onshape/model_bt_company_user_summary_admin_info.go b/onshape/model_bt_company_user_summary_admin_info.go
index 0e2ef3fff..1bcd9787c 100644
--- a/onshape/model_bt_company_user_summary_admin_info.go
+++ b/onshape/model_bt_company_user_summary_admin_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTCompanyUserSummaryAdminInfo type satisfies the MappedNullable interface at compile time
@@ -20,15 +22,19 @@ var _ MappedNullable = &BTCompanyUserSummaryAdminInfo{}
 
 // BTCompanyUserSummaryAdminInfo struct for BTCompanyUserSummaryAdminInfo
 type BTCompanyUserSummaryAdminInfo struct {
+	BTCompanyUserSummaryInfo
 	TotpEnabled *bool `json:"totpEnabled,omitempty"`
 }
 
+type _BTCompanyUserSummaryAdminInfo BTCompanyUserSummaryAdminInfo
+
 // NewBTCompanyUserSummaryAdminInfo instantiates a new BTCompanyUserSummaryAdminInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
 // will change when the set of required properties is changed
-func NewBTCompanyUserSummaryAdminInfo() *BTCompanyUserSummaryAdminInfo {
+func NewBTCompanyUserSummaryAdminInfo(jsonType string) *BTCompanyUserSummaryAdminInfo {
 	this := BTCompanyUserSummaryAdminInfo{}
+	this.JsonType = jsonType
 	return &this
 }
 
@@ -88,6 +94,43 @@ func (o BTCompanyUserSummaryAdminInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTCompanyUserSummaryAdminInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTCompanyUserSummaryAdminInfo := _BTCompanyUserSummaryAdminInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTCompanyUserSummaryAdminInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTCompanyUserSummaryAdminInfo(varBTCompanyUserSummaryAdminInfo)
+
+	return err
+}
+
 type NullableBTCompanyUserSummaryAdminInfo struct {
 	value *BTCompanyUserSummaryAdminInfo
 	isSet bool
diff --git a/onshape/model_bt_company_user_summary_info.go b/onshape/model_bt_company_user_summary_info.go
index 9f21591b5..11aa232d4 100644
--- a/onshape/model_bt_company_user_summary_info.go
+++ b/onshape/model_bt_company_user_summary_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTCompanyUserSummaryInfo type satisfies the MappedNullable interface at compile time
@@ -20,16 +22,20 @@ var _ MappedNullable = &BTCompanyUserSummaryInfo{}
 
 // BTCompanyUserSummaryInfo struct for BTCompanyUserSummaryInfo
 type BTCompanyUserSummaryInfo struct {
+	BTUserSummaryInfo
 	Admin *bool   `json:"admin,omitempty"`
 	Cls   *string `json:"cls,omitempty"`
 }
 
+type _BTCompanyUserSummaryInfo BTCompanyUserSummaryInfo
+
 // NewBTCompanyUserSummaryInfo instantiates a new BTCompanyUserSummaryInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
 // will change when the set of required properties is changed
-func NewBTCompanyUserSummaryInfo() *BTCompanyUserSummaryInfo {
+func NewBTCompanyUserSummaryInfo(jsonType string) *BTCompanyUserSummaryInfo {
 	this := BTCompanyUserSummaryInfo{}
+	this.JsonType = jsonType
 	return &this
 }
 
@@ -124,6 +130,43 @@ func (o BTCompanyUserSummaryInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTCompanyUserSummaryInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTCompanyUserSummaryInfo := _BTCompanyUserSummaryInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTCompanyUserSummaryInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTCompanyUserSummaryInfo(varBTCompanyUserSummaryInfo)
+
+	return err
+}
+
 type NullableBTCompanyUserSummaryInfo struct {
 	value *BTCompanyUserSummaryInfo
 	isSet bool
diff --git a/onshape/model_bt_computed_part_property_spec_1746.go b/onshape/model_bt_computed_part_property_spec_1746.go
index a42877cd6..aad45c7a6 100644
--- a/onshape/model_bt_computed_part_property_spec_1746.go
+++ b/onshape/model_bt_computed_part_property_spec_1746.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTComputedPartPropertySpec1746{}
 
 // BTComputedPartPropertySpec1746 struct for BTComputedPartPropertySpec1746
 type BTComputedPartPropertySpec1746 struct {
+	BTFeatureSpec-129
 	// Type of JSON object.
-	BtType                     *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	ComputedPartPropertySpecId *string `json:"computedPartPropertySpecId,omitempty"`
 	PropertyFunctionReturnType *string `json:"propertyFunctionReturnType,omitempty"`
 }
@@ -140,7 +141,7 @@ func (o *BTComputedPartPropertySpec1746) SetPropertyFunctionReturnType(v string)
 }
 
 func (o BTComputedPartPropertySpec1746) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTComputedPartPropertySpec1746) MarshalJSON() ([]byte, error) {
 
 func (o BTComputedPartPropertySpec1746) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFeatureSpec129, errBTFeatureSpec129 := json.Marshal(o.BTFeatureSpec129)
+	if errBTFeatureSpec129 != nil {
+		return map[string]interface{}{}, errBTFeatureSpec129
+	}
+	errBTFeatureSpec129 = json.Unmarshal([]byte(serializedBTFeatureSpec129), &toSerialize)
+	if errBTFeatureSpec129 != nil {
+		return map[string]interface{}{}, errBTFeatureSpec129
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTComputedPartPropertySpec1746) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_cone_description_860.go b/onshape/model_bt_cone_description_860.go
index 5a8aec41f..2c009d89f 100644
--- a/onshape/model_bt_cone_description_860.go
+++ b/onshape/model_bt_cone_description_860.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTConeDescription860{}
 
 // BTConeDescription860 struct for BTConeDescription860
 type BTConeDescription860 struct {
+	BTSurfaceDescription-1564
 	// Type of JSON object.
-	BtType    *string        `json:"btType,omitempty"`
-	Axis      *BTVector3d389 `json:"axis,omitempty"`
-	HalfAngle *float64       `json:"halfAngle,omitempty"`
-	Radius    *float64       `json:"radius,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Axis *BTVector3d389 `json:"axis,omitempty"`
+	HalfAngle *float64 `json:"halfAngle,omitempty"`
+	Radius *float64 `json:"radius,omitempty"`
 }
 
 // NewBTConeDescription860 instantiates a new BTConeDescription860 object
@@ -173,7 +174,7 @@ func (o *BTConeDescription860) SetRadius(v float64) {
 }
 
 func (o BTConeDescription860) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTConeDescription860) MarshalJSON() ([]byte, error) {
 
 func (o BTConeDescription860) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSurfaceDescription1564, errBTSurfaceDescription1564 := json.Marshal(o.BTSurfaceDescription1564)
+	if errBTSurfaceDescription1564 != nil {
+		return map[string]interface{}{}, errBTSurfaceDescription1564
+	}
+	errBTSurfaceDescription1564 = json.Unmarshal([]byte(serializedBTSurfaceDescription1564), &toSerialize)
+	if errBTSurfaceDescription1564 != nil {
+		return map[string]interface{}{}, errBTSurfaceDescription1564
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTConeDescription860) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_configured_dimension_column_info_2168.go b/onshape/model_bt_configured_dimension_column_info_2168.go
index 960da141a..1ce87b8f0 100644
--- a/onshape/model_bt_configured_dimension_column_info_2168.go
+++ b/onshape/model_bt_configured_dimension_column_info_2168.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTConfiguredDimensionColumnInfo2168{}
 
 // BTConfiguredDimensionColumnInfo2168 struct for BTConfiguredDimensionColumnInfo2168
 type BTConfiguredDimensionColumnInfo2168 struct {
+	BTConfiguredValuesColumnInfo-1025
 	// Type of JSON object.
-	BtType      *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	DimensionId *string `json:"dimensionId,omitempty"`
 	ParameterId *string `json:"parameterId,omitempty"`
 }
@@ -140,7 +141,7 @@ func (o *BTConfiguredDimensionColumnInfo2168) SetParameterId(v string) {
 }
 
 func (o BTConfiguredDimensionColumnInfo2168) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTConfiguredDimensionColumnInfo2168) MarshalJSON() ([]byte, error) {
 
 func (o BTConfiguredDimensionColumnInfo2168) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTConfiguredValuesColumnInfo1025, errBTConfiguredValuesColumnInfo1025 := json.Marshal(o.BTConfiguredValuesColumnInfo1025)
+	if errBTConfiguredValuesColumnInfo1025 != nil {
+		return map[string]interface{}{}, errBTConfiguredValuesColumnInfo1025
+	}
+	errBTConfiguredValuesColumnInfo1025 = json.Unmarshal([]byte(serializedBTConfiguredValuesColumnInfo1025), &toSerialize)
+	if errBTConfiguredValuesColumnInfo1025 != nil {
+		return map[string]interface{}{}, errBTConfiguredValuesColumnInfo1025
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTConfiguredDimensionColumnInfo2168) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_configured_feature_column_info_1014.go b/onshape/model_bt_configured_feature_column_info_1014.go
index 2124c9657..c002f89ad 100644
--- a/onshape/model_bt_configured_feature_column_info_1014.go
+++ b/onshape/model_bt_configured_feature_column_info_1014.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTConfiguredFeatureColumnInfo1014{}
 
 // BTConfiguredFeatureColumnInfo1014 struct for BTConfiguredFeatureColumnInfo1014
 type BTConfiguredFeatureColumnInfo1014 struct {
+	BTConfiguredValuesColumnInfo-1025
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTConfiguredFeatureColumnInfo1014) SetBtType(v string) {
 }
 
 func (o BTConfiguredFeatureColumnInfo1014) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTConfiguredFeatureColumnInfo1014) MarshalJSON() ([]byte, error) {
 
 func (o BTConfiguredFeatureColumnInfo1014) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTConfiguredValuesColumnInfo1025, errBTConfiguredValuesColumnInfo1025 := json.Marshal(o.BTConfiguredValuesColumnInfo1025)
+	if errBTConfiguredValuesColumnInfo1025 != nil {
+		return map[string]interface{}{}, errBTConfiguredValuesColumnInfo1025
+	}
+	errBTConfiguredValuesColumnInfo1025 = json.Unmarshal([]byte(serializedBTConfiguredValuesColumnInfo1025), &toSerialize)
+	if errBTConfiguredValuesColumnInfo1025 != nil {
+		return map[string]interface{}{}, errBTConfiguredValuesColumnInfo1025
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTConfiguredFeatureColumnInfo1014) UnmarshalJSON(src []byte) er
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_configured_parameter_column_info_2900.go b/onshape/model_bt_configured_parameter_column_info_2900.go
index ef06c12bb..8f468ed16 100644
--- a/onshape/model_bt_configured_parameter_column_info_2900.go
+++ b/onshape/model_bt_configured_parameter_column_info_2900.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTConfiguredParameterColumnInfo2900{}
 
 // BTConfiguredParameterColumnInfo2900 struct for BTConfiguredParameterColumnInfo2900
 type BTConfiguredParameterColumnInfo2900 struct {
+	BTConfiguredValuesColumnInfo-1025
 	// Type of JSON object.
-	BtType                 *string                       `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	InnerParameterLocation *BTInnerParameterLocation1715 `json:"innerParameterLocation,omitempty"`
-	ParameterId            *string                       `json:"parameterId,omitempty"`
+	ParameterId *string `json:"parameterId,omitempty"`
 }
 
 // NewBTConfiguredParameterColumnInfo2900 instantiates a new BTConfiguredParameterColumnInfo2900 object
@@ -140,7 +141,7 @@ func (o *BTConfiguredParameterColumnInfo2900) SetParameterId(v string) {
 }
 
 func (o BTConfiguredParameterColumnInfo2900) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTConfiguredParameterColumnInfo2900) MarshalJSON() ([]byte, error) {
 
 func (o BTConfiguredParameterColumnInfo2900) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTConfiguredValuesColumnInfo1025, errBTConfiguredValuesColumnInfo1025 := json.Marshal(o.BTConfiguredValuesColumnInfo1025)
+	if errBTConfiguredValuesColumnInfo1025 != nil {
+		return map[string]interface{}{}, errBTConfiguredValuesColumnInfo1025
+	}
+	errBTConfiguredValuesColumnInfo1025 = json.Unmarshal([]byte(serializedBTConfiguredValuesColumnInfo1025), &toSerialize)
+	if errBTConfiguredValuesColumnInfo1025 != nil {
+		return map[string]interface{}{}, errBTConfiguredValuesColumnInfo1025
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTConfiguredParameterColumnInfo2900) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_configured_part_properties_table_2740.go b/onshape/model_bt_configured_part_properties_table_2740.go
index 0ababb8d3..0339f51ab 100644
--- a/onshape/model_bt_configured_part_properties_table_2740.go
+++ b/onshape/model_bt_configured_part_properties_table_2740.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTConfiguredPartPropertiesTable2740{}
 
 // BTConfiguredPartPropertiesTable2740 struct for BTConfiguredPartPropertiesTable2740
 type BTConfiguredPartPropertiesTable2740 struct {
+	BTTable-1825
 	// Type of JSON object.
-	BtType               *string  `json:"btType,omitempty"`
-	PartDeterministicId  *string  `json:"partDeterministicId,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	PartDeterministicId *string `json:"partDeterministicId,omitempty"`
 	PartDeterministicIds []string `json:"partDeterministicIds,omitempty"`
-	PropertyNodeId       *string  `json:"propertyNodeId,omitempty"`
+	PropertyNodeId *string `json:"propertyNodeId,omitempty"`
 }
 
 // NewBTConfiguredPartPropertiesTable2740 instantiates a new BTConfiguredPartPropertiesTable2740 object
@@ -173,7 +174,7 @@ func (o *BTConfiguredPartPropertiesTable2740) SetPropertyNodeId(v string) {
 }
 
 func (o BTConfiguredPartPropertiesTable2740) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTConfiguredPartPropertiesTable2740) MarshalJSON() ([]byte, error) {
 
 func (o BTConfiguredPartPropertiesTable2740) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTable1825, errBTTable1825 := json.Marshal(o.BTTable1825)
+	if errBTTable1825 != nil {
+		return map[string]interface{}{}, errBTTable1825
+	}
+	errBTTable1825 = json.Unmarshal([]byte(serializedBTTable1825), &toSerialize)
+	if errBTTable1825 != nil {
+		return map[string]interface{}{}, errBTTable1825
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTConfiguredPartPropertiesTable2740) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_configured_suppression_column_info_2498.go b/onshape/model_bt_configured_suppression_column_info_2498.go
index e24500955..0ca1e3ec3 100644
--- a/onshape/model_bt_configured_suppression_column_info_2498.go
+++ b/onshape/model_bt_configured_suppression_column_info_2498.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTConfiguredSuppressionColumnInfo2498{}
 
 // BTConfiguredSuppressionColumnInfo2498 struct for BTConfiguredSuppressionColumnInfo2498
 type BTConfiguredSuppressionColumnInfo2498 struct {
+	BTConfiguredValuesColumnInfo-1025
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTConfiguredSuppressionColumnInfo2498) SetBtType(v string) {
 }
 
 func (o BTConfiguredSuppressionColumnInfo2498) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTConfiguredSuppressionColumnInfo2498) MarshalJSON() ([]byte, error) {
 
 func (o BTConfiguredSuppressionColumnInfo2498) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTConfiguredValuesColumnInfo1025, errBTConfiguredValuesColumnInfo1025 := json.Marshal(o.BTConfiguredValuesColumnInfo1025)
+	if errBTConfiguredValuesColumnInfo1025 != nil {
+		return map[string]interface{}{}, errBTConfiguredValuesColumnInfo1025
+	}
+	errBTConfiguredValuesColumnInfo1025 = json.Unmarshal([]byte(serializedBTConfiguredValuesColumnInfo1025), &toSerialize)
+	if errBTConfiguredValuesColumnInfo1025 != nil {
+		return map[string]interface{}{}, errBTConfiguredValuesColumnInfo1025
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTConfiguredSuppressionColumnInfo2498) UnmarshalJSON(src []byte
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_configured_values_column_info_1025.go b/onshape/model_bt_configured_values_column_info_1025.go
index 8e28c78b4..e922b9903 100644
--- a/onshape/model_bt_configured_values_column_info_1025.go
+++ b/onshape/model_bt_configured_values_column_info_1025.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTConfiguredValuesColumnInfo1025{}
 
 // BTConfiguredValuesColumnInfo1025 struct for BTConfiguredValuesColumnInfo1025
 type BTConfiguredValuesColumnInfo1025 struct {
+	BTTableColumnInfo-1222
 	// Type of JSON object.
-	BtType     *string                  `json:"btType,omitempty"`
-	ParentId   *string                  `json:"parentId,omitempty"`
-	ParentName *string                  `json:"parentName,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	ParentId *string `json:"parentId,omitempty"`
+	ParentName *string `json:"parentName,omitempty"`
 	ParentType *GBTConfiguredParentType `json:"parentType,omitempty"`
 }
 
@@ -173,7 +174,7 @@ func (o *BTConfiguredValuesColumnInfo1025) SetParentType(v GBTConfiguredParentTy
 }
 
 func (o BTConfiguredValuesColumnInfo1025) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTConfiguredValuesColumnInfo1025) MarshalJSON() ([]byte, error) {
 
 func (o BTConfiguredValuesColumnInfo1025) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableColumnInfo1222, errBTTableColumnInfo1222 := json.Marshal(o.BTTableColumnInfo1222)
+	if errBTTableColumnInfo1222 != nil {
+		return map[string]interface{}{}, errBTTableColumnInfo1222
+	}
+	errBTTableColumnInfo1222 = json.Unmarshal([]byte(serializedBTTableColumnInfo1222), &toSerialize)
+	if errBTTableColumnInfo1222 != nil {
+		return map[string]interface{}{}, errBTTableColumnInfo1222
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTConfiguredValuesColumnInfo1025) UnmarshalJSON(src []byte) err
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_construction_object_filter_113.go b/onshape/model_bt_construction_object_filter_113.go
index 9198fd104..50a23ca26 100644
--- a/onshape/model_bt_construction_object_filter_113.go
+++ b/onshape/model_bt_construction_object_filter_113.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTConstructionObjectFilter113{}
 
 // BTConstructionObjectFilter113 struct for BTConstructionObjectFilter113
 type BTConstructionObjectFilter113 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType         *string `json:"btType,omitempty"`
-	IsConstruction *bool   `json:"isConstruction,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsConstruction *bool `json:"isConstruction,omitempty"`
 }
 
 // NewBTConstructionObjectFilter113 instantiates a new BTConstructionObjectFilter113 object
@@ -107,7 +108,7 @@ func (o *BTConstructionObjectFilter113) SetIsConstruction(v bool) {
 }
 
 func (o BTConstructionObjectFilter113) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTConstructionObjectFilter113) MarshalJSON() ([]byte, error) {
 
 func (o BTConstructionObjectFilter113) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTConstructionObjectFilter113) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_construction_plane_entity_27.go b/onshape/model_bt_construction_plane_entity_27.go
index 323014595..16a16d63d 100644
--- a/onshape/model_bt_construction_plane_entity_27.go
+++ b/onshape/model_bt_construction_plane_entity_27.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTConstructionPlaneEntity27{}
 
 // BTConstructionPlaneEntity27 struct for BTConstructionPlaneEntity27
 type BTConstructionPlaneEntity27 struct {
+	BTFeatureEntity-34
 	// Type of JSON object.
-	BtType    *string `json:"btType,omitempty"`
-	IsDefault *bool   `json:"isDefault,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsDefault *bool `json:"isDefault,omitempty"`
 }
 
 // NewBTConstructionPlaneEntity27 instantiates a new BTConstructionPlaneEntity27 object
@@ -107,7 +108,7 @@ func (o *BTConstructionPlaneEntity27) SetIsDefault(v bool) {
 }
 
 func (o BTConstructionPlaneEntity27) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTConstructionPlaneEntity27) MarshalJSON() ([]byte, error) {
 
 func (o BTConstructionPlaneEntity27) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFeatureEntity34, errBTFeatureEntity34 := json.Marshal(o.BTFeatureEntity34)
+	if errBTFeatureEntity34 != nil {
+		return map[string]interface{}{}, errBTFeatureEntity34
+	}
+	errBTFeatureEntity34 = json.Unmarshal([]byte(serializedBTFeatureEntity34), &toSerialize)
+	if errBTFeatureEntity34 != nil {
+		return map[string]interface{}{}, errBTFeatureEntity34
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTConstructionPlaneEntity27) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_count_dimension_display_data_1778.go b/onshape/model_bt_count_dimension_display_data_1778.go
index 2b8c98501..9f9472b27 100644
--- a/onshape/model_bt_count_dimension_display_data_1778.go
+++ b/onshape/model_bt_count_dimension_display_data_1778.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTCountDimensionDisplayData1778{}
 
 // BTCountDimensionDisplayData1778 struct for BTCountDimensionDisplayData1778
 type BTCountDimensionDisplayData1778 struct {
+	BTDimensionDisplayData-323
 	// Type of JSON object.
-	BtType    *string  `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	PositionX *float64 `json:"positionX,omitempty"`
 	PositionY *float64 `json:"positionY,omitempty"`
 }
@@ -140,7 +141,7 @@ func (o *BTCountDimensionDisplayData1778) SetPositionY(v float64) {
 }
 
 func (o BTCountDimensionDisplayData1778) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTCountDimensionDisplayData1778) MarshalJSON() ([]byte, error) {
 
 func (o BTCountDimensionDisplayData1778) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTDimensionDisplayData323, errBTDimensionDisplayData323 := json.Marshal(o.BTDimensionDisplayData323)
+	if errBTDimensionDisplayData323 != nil {
+		return map[string]interface{}{}, errBTDimensionDisplayData323
+	}
+	errBTDimensionDisplayData323 = json.Unmarshal([]byte(serializedBTDimensionDisplayData323), &toSerialize)
+	if errBTDimensionDisplayData323 != nil {
+		return map[string]interface{}{}, errBTDimensionDisplayData323
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTCountDimensionDisplayData1778) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_curve_geometry_circle_115.go b/onshape/model_bt_curve_geometry_circle_115.go
index 3477977e9..82a23652d 100644
--- a/onshape/model_bt_curve_geometry_circle_115.go
+++ b/onshape/model_bt_curve_geometry_circle_115.go
@@ -20,14 +20,15 @@ var _ MappedNullable = &BTCurveGeometryCircle115{}
 
 // BTCurveGeometryCircle115 struct for BTCurveGeometryCircle115
 type BTCurveGeometryCircle115 struct {
+	BTCurveGeometry-114
 	// Type of JSON object.
-	BtType    *string  `json:"btType,omitempty"`
-	Clockwise *bool    `json:"clockwise,omitempty"`
-	Radius    *float64 `json:"radius,omitempty"`
-	Xcenter   *float64 `json:"xcenter,omitempty"`
-	Xdir      *float64 `json:"xdir,omitempty"`
-	Ycenter   *float64 `json:"ycenter,omitempty"`
-	Ydir      *float64 `json:"ydir,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Clockwise *bool `json:"clockwise,omitempty"`
+	Radius *float64 `json:"radius,omitempty"`
+	Xcenter *float64 `json:"xcenter,omitempty"`
+	Xdir *float64 `json:"xdir,omitempty"`
+	Ycenter *float64 `json:"ycenter,omitempty"`
+	Ydir *float64 `json:"ydir,omitempty"`
 }
 
 // NewBTCurveGeometryCircle115 instantiates a new BTCurveGeometryCircle115 object
@@ -272,7 +273,7 @@ func (o *BTCurveGeometryCircle115) SetYdir(v float64) {
 }
 
 func (o BTCurveGeometryCircle115) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -281,6 +282,14 @@ func (o BTCurveGeometryCircle115) MarshalJSON() ([]byte, error) {
 
 func (o BTCurveGeometryCircle115) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTCurveGeometry114, errBTCurveGeometry114 := json.Marshal(o.BTCurveGeometry114)
+	if errBTCurveGeometry114 != nil {
+		return map[string]interface{}{}, errBTCurveGeometry114
+	}
+	errBTCurveGeometry114 = json.Unmarshal([]byte(serializedBTCurveGeometry114), &toSerialize)
+	if errBTCurveGeometry114 != nil {
+		return map[string]interface{}{}, errBTCurveGeometry114
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -340,3 +349,5 @@ func (v *NullableBTCurveGeometryCircle115) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_curve_geometry_conic_2284.go b/onshape/model_bt_curve_geometry_conic_2284.go
index 5eea8d06b..7edf18e3c 100644
--- a/onshape/model_bt_curve_geometry_conic_2284.go
+++ b/onshape/model_bt_curve_geometry_conic_2284.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTCurveGeometryConic2284{}
 
 // BTCurveGeometryConic2284 struct for BTCurveGeometryConic2284
 type BTCurveGeometryConic2284 struct {
+	BTCurveGeometry-114
 	// Type of JSON object.
-	BtType *string   `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Points []float64 `json:"points,omitempty"`
-	Rho    *float64  `json:"rho,omitempty"`
+	Rho *float64 `json:"rho,omitempty"`
 }
 
 // NewBTCurveGeometryConic2284 instantiates a new BTCurveGeometryConic2284 object
@@ -140,7 +141,7 @@ func (o *BTCurveGeometryConic2284) SetRho(v float64) {
 }
 
 func (o BTCurveGeometryConic2284) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTCurveGeometryConic2284) MarshalJSON() ([]byte, error) {
 
 func (o BTCurveGeometryConic2284) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTCurveGeometry114, errBTCurveGeometry114 := json.Marshal(o.BTCurveGeometry114)
+	if errBTCurveGeometry114 != nil {
+		return map[string]interface{}{}, errBTCurveGeometry114
+	}
+	errBTCurveGeometry114 = json.Unmarshal([]byte(serializedBTCurveGeometry114), &toSerialize)
+	if errBTCurveGeometry114 != nil {
+		return map[string]interface{}{}, errBTCurveGeometry114
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTCurveGeometryConic2284) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_curve_geometry_control_point_spline_2197.go b/onshape/model_bt_curve_geometry_control_point_spline_2197.go
index a935a58c5..41e084280 100644
--- a/onshape/model_bt_curve_geometry_control_point_spline_2197.go
+++ b/onshape/model_bt_curve_geometry_control_point_spline_2197.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTCurveGeometryControlPointSpline2197{}
 
 // BTCurveGeometryControlPointSpline2197 struct for BTCurveGeometryControlPointSpline2197
 type BTCurveGeometryControlPointSpline2197 struct {
+	BTCurveGeometrySpline-118
 	// Type of JSON object.
-	BtType   *string `json:"btType,omitempty"`
-	IsBezier *bool   `json:"isBezier,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsBezier *bool `json:"isBezier,omitempty"`
 }
 
 // NewBTCurveGeometryControlPointSpline2197 instantiates a new BTCurveGeometryControlPointSpline2197 object
@@ -107,7 +108,7 @@ func (o *BTCurveGeometryControlPointSpline2197) SetIsBezier(v bool) {
 }
 
 func (o BTCurveGeometryControlPointSpline2197) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTCurveGeometryControlPointSpline2197) MarshalJSON() ([]byte, error) {
 
 func (o BTCurveGeometryControlPointSpline2197) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTCurveGeometrySpline118, errBTCurveGeometrySpline118 := json.Marshal(o.BTCurveGeometrySpline118)
+	if errBTCurveGeometrySpline118 != nil {
+		return map[string]interface{}{}, errBTCurveGeometrySpline118
+	}
+	errBTCurveGeometrySpline118 = json.Unmarshal([]byte(serializedBTCurveGeometrySpline118), &toSerialize)
+	if errBTCurveGeometrySpline118 != nil {
+		return map[string]interface{}{}, errBTCurveGeometrySpline118
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTCurveGeometryControlPointSpline2197) UnmarshalJSON(src []byte
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_curve_geometry_ellipse_1189.go b/onshape/model_bt_curve_geometry_ellipse_1189.go
index 5724a622c..64c21a382 100644
--- a/onshape/model_bt_curve_geometry_ellipse_1189.go
+++ b/onshape/model_bt_curve_geometry_ellipse_1189.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTCurveGeometryEllipse1189{}
 
 // BTCurveGeometryEllipse1189 struct for BTCurveGeometryEllipse1189
 type BTCurveGeometryEllipse1189 struct {
+	BTCurveGeometryCircle-115
 	// Type of JSON object.
-	BtType      *string  `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	MinorRadius *float64 `json:"minorRadius,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTCurveGeometryEllipse1189) SetMinorRadius(v float64) {
 }
 
 func (o BTCurveGeometryEllipse1189) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTCurveGeometryEllipse1189) MarshalJSON() ([]byte, error) {
 
 func (o BTCurveGeometryEllipse1189) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTCurveGeometryCircle115, errBTCurveGeometryCircle115 := json.Marshal(o.BTCurveGeometryCircle115)
+	if errBTCurveGeometryCircle115 != nil {
+		return map[string]interface{}{}, errBTCurveGeometryCircle115
+	}
+	errBTCurveGeometryCircle115 = json.Unmarshal([]byte(serializedBTCurveGeometryCircle115), &toSerialize)
+	if errBTCurveGeometryCircle115 != nil {
+		return map[string]interface{}{}, errBTCurveGeometryCircle115
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTCurveGeometryEllipse1189) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_curve_geometry_interpolated_spline_116.go b/onshape/model_bt_curve_geometry_interpolated_spline_116.go
index b3ff3b32b..311c4f01b 100644
--- a/onshape/model_bt_curve_geometry_interpolated_spline_116.go
+++ b/onshape/model_bt_curve_geometry_interpolated_spline_116.go
@@ -20,19 +20,20 @@ var _ MappedNullable = &BTCurveGeometryInterpolatedSpline116{}
 
 // BTCurveGeometryInterpolatedSpline116 struct for BTCurveGeometryInterpolatedSpline116
 type BTCurveGeometryInterpolatedSpline116 struct {
+	BTCurveGeometry-114
 	// Type of JSON object.
-	BtType              *string               `json:"btType,omitempty"`
-	Derivatives         *map[string][]float64 `json:"derivatives,omitempty"`
-	EndDerivativeX      *float64              `json:"endDerivativeX,omitempty"`
-	EndDerivativeY      *float64              `json:"endDerivativeY,omitempty"`
-	EndHandleX          *float64              `json:"endHandleX,omitempty"`
-	EndHandleY          *float64              `json:"endHandleY,omitempty"`
-	InterpolationPoints []float64             `json:"interpolationPoints,omitempty"`
-	IsPeriodic          *bool                 `json:"isPeriodic,omitempty"`
-	StartDerivativeX    *float64              `json:"startDerivativeX,omitempty"`
-	StartDerivativeY    *float64              `json:"startDerivativeY,omitempty"`
-	StartHandleX        *float64              `json:"startHandleX,omitempty"`
-	StartHandleY        *float64              `json:"startHandleY,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Derivatives *map[string][]float64 `json:"derivatives,omitempty"`
+	EndDerivativeX *float64 `json:"endDerivativeX,omitempty"`
+	EndDerivativeY *float64 `json:"endDerivativeY,omitempty"`
+	EndHandleX *float64 `json:"endHandleX,omitempty"`
+	EndHandleY *float64 `json:"endHandleY,omitempty"`
+	InterpolationPoints []float64 `json:"interpolationPoints,omitempty"`
+	IsPeriodic *bool `json:"isPeriodic,omitempty"`
+	StartDerivativeX *float64 `json:"startDerivativeX,omitempty"`
+	StartDerivativeY *float64 `json:"startDerivativeY,omitempty"`
+	StartHandleX *float64 `json:"startHandleX,omitempty"`
+	StartHandleY *float64 `json:"startHandleY,omitempty"`
 }
 
 // NewBTCurveGeometryInterpolatedSpline116 instantiates a new BTCurveGeometryInterpolatedSpline116 object
@@ -437,7 +438,7 @@ func (o *BTCurveGeometryInterpolatedSpline116) SetStartHandleY(v float64) {
 }
 
 func (o BTCurveGeometryInterpolatedSpline116) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -446,6 +447,14 @@ func (o BTCurveGeometryInterpolatedSpline116) MarshalJSON() ([]byte, error) {
 
 func (o BTCurveGeometryInterpolatedSpline116) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTCurveGeometry114, errBTCurveGeometry114 := json.Marshal(o.BTCurveGeometry114)
+	if errBTCurveGeometry114 != nil {
+		return map[string]interface{}{}, errBTCurveGeometry114
+	}
+	errBTCurveGeometry114 = json.Unmarshal([]byte(serializedBTCurveGeometry114), &toSerialize)
+	if errBTCurveGeometry114 != nil {
+		return map[string]interface{}{}, errBTCurveGeometry114
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -520,3 +529,5 @@ func (v *NullableBTCurveGeometryInterpolatedSpline116) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_curve_geometry_line_117.go b/onshape/model_bt_curve_geometry_line_117.go
index 95a678515..843ed320f 100644
--- a/onshape/model_bt_curve_geometry_line_117.go
+++ b/onshape/model_bt_curve_geometry_line_117.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTCurveGeometryLine117{}
 
 // BTCurveGeometryLine117 struct for BTCurveGeometryLine117
 type BTCurveGeometryLine117 struct {
+	BTCurveGeometry-114
 	// Type of JSON object.
-	BtType *string  `json:"btType,omitempty"`
-	DirX   *float64 `json:"dirX,omitempty"`
-	DirY   *float64 `json:"dirY,omitempty"`
-	PntX   *float64 `json:"pntX,omitempty"`
-	PntY   *float64 `json:"pntY,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	DirX *float64 `json:"dirX,omitempty"`
+	DirY *float64 `json:"dirY,omitempty"`
+	PntX *float64 `json:"pntX,omitempty"`
+	PntY *float64 `json:"pntY,omitempty"`
 }
 
 // NewBTCurveGeometryLine117 instantiates a new BTCurveGeometryLine117 object
@@ -206,7 +207,7 @@ func (o *BTCurveGeometryLine117) SetPntY(v float64) {
 }
 
 func (o BTCurveGeometryLine117) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTCurveGeometryLine117) MarshalJSON() ([]byte, error) {
 
 func (o BTCurveGeometryLine117) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTCurveGeometry114, errBTCurveGeometry114 := json.Marshal(o.BTCurveGeometry114)
+	if errBTCurveGeometry114 != nil {
+		return map[string]interface{}{}, errBTCurveGeometry114
+	}
+	errBTCurveGeometry114 = json.Unmarshal([]byte(serializedBTCurveGeometry114), &toSerialize)
+	if errBTCurveGeometry114 != nil {
+		return map[string]interface{}{}, errBTCurveGeometry114
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTCurveGeometryLine117) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_curve_geometry_spline_118.go b/onshape/model_bt_curve_geometry_spline_118.go
index 34fa60b5a..d45547c73 100644
--- a/onshape/model_bt_curve_geometry_spline_118.go
+++ b/onshape/model_bt_curve_geometry_spline_118.go
@@ -20,14 +20,15 @@ var _ MappedNullable = &BTCurveGeometrySpline118{}
 
 // BTCurveGeometrySpline118 struct for BTCurveGeometrySpline118
 type BTCurveGeometrySpline118 struct {
+	BTCurveGeometry-114
 	// Type of JSON object.
-	BtType            *string   `json:"btType,omitempty"`
-	ControlPointCount *int32    `json:"controlPointCount,omitempty"`
-	ControlPoints     []float64 `json:"controlPoints,omitempty"`
-	Degree            *int32    `json:"degree,omitempty"`
-	IsPeriodic        *bool     `json:"isPeriodic,omitempty"`
-	IsRational        *bool     `json:"isRational,omitempty"`
-	Knots             []float64 `json:"knots,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	ControlPointCount *int32 `json:"controlPointCount,omitempty"`
+	ControlPoints []float64 `json:"controlPoints,omitempty"`
+	Degree *int32 `json:"degree,omitempty"`
+	IsPeriodic *bool `json:"isPeriodic,omitempty"`
+	IsRational *bool `json:"isRational,omitempty"`
+	Knots []float64 `json:"knots,omitempty"`
 }
 
 // NewBTCurveGeometrySpline118 instantiates a new BTCurveGeometrySpline118 object
@@ -272,7 +273,7 @@ func (o *BTCurveGeometrySpline118) SetKnots(v []float64) {
 }
 
 func (o BTCurveGeometrySpline118) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -281,6 +282,14 @@ func (o BTCurveGeometrySpline118) MarshalJSON() ([]byte, error) {
 
 func (o BTCurveGeometrySpline118) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTCurveGeometry114, errBTCurveGeometry114 := json.Marshal(o.BTCurveGeometry114)
+	if errBTCurveGeometry114 != nil {
+		return map[string]interface{}{}, errBTCurveGeometry114
+	}
+	errBTCurveGeometry114 = json.Unmarshal([]byte(serializedBTCurveGeometry114), &toSerialize)
+	if errBTCurveGeometry114 != nil {
+		return map[string]interface{}{}, errBTCurveGeometry114
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -340,3 +349,5 @@ func (v *NullableBTCurveGeometrySpline118) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_curve_length_dimension_display_data_322.go b/onshape/model_bt_curve_length_dimension_display_data_322.go
index b7d4a5f40..efa62b84a 100644
--- a/onshape/model_bt_curve_length_dimension_display_data_322.go
+++ b/onshape/model_bt_curve_length_dimension_display_data_322.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTCurveLengthDimensionDisplayData322{}
 
 // BTCurveLengthDimensionDisplayData322 struct for BTCurveLengthDimensionDisplayData322
 type BTCurveLengthDimensionDisplayData322 struct {
+	BTDimensionDisplayData-323
 	// Type of JSON object.
-	BtType    *string  `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	PositionX *float64 `json:"positionX,omitempty"`
 	PositionY *float64 `json:"positionY,omitempty"`
 }
@@ -140,7 +141,7 @@ func (o *BTCurveLengthDimensionDisplayData322) SetPositionY(v float64) {
 }
 
 func (o BTCurveLengthDimensionDisplayData322) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTCurveLengthDimensionDisplayData322) MarshalJSON() ([]byte, error) {
 
 func (o BTCurveLengthDimensionDisplayData322) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTDimensionDisplayData323, errBTDimensionDisplayData323 := json.Marshal(o.BTDimensionDisplayData323)
+	if errBTDimensionDisplayData323 != nil {
+		return map[string]interface{}{}, errBTDimensionDisplayData323
+	}
+	errBTDimensionDisplayData323 = json.Unmarshal([]byte(serializedBTDimensionDisplayData323), &toSerialize)
+	if errBTDimensionDisplayData323 != nil {
+		return map[string]interface{}{}, errBTDimensionDisplayData323
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTCurveLengthDimensionDisplayData322) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_cylinder_description_686.go b/onshape/model_bt_cylinder_description_686.go
index 476018c06..d1c08ac01 100644
--- a/onshape/model_bt_cylinder_description_686.go
+++ b/onshape/model_bt_cylinder_description_686.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTCylinderDescription686{}
 
 // BTCylinderDescription686 struct for BTCylinderDescription686
 type BTCylinderDescription686 struct {
+	BTSurfaceDescription-1564
 	// Type of JSON object.
-	BtType *string        `json:"btType,omitempty"`
-	Axis   *BTVector3d389 `json:"axis,omitempty"`
-	Radius *float64       `json:"radius,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Axis *BTVector3d389 `json:"axis,omitempty"`
+	Radius *float64 `json:"radius,omitempty"`
 }
 
 // NewBTCylinderDescription686 instantiates a new BTCylinderDescription686 object
@@ -140,7 +141,7 @@ func (o *BTCylinderDescription686) SetRadius(v float64) {
 }
 
 func (o BTCylinderDescription686) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTCylinderDescription686) MarshalJSON() ([]byte, error) {
 
 func (o BTCylinderDescription686) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSurfaceDescription1564, errBTSurfaceDescription1564 := json.Marshal(o.BTSurfaceDescription1564)
+	if errBTSurfaceDescription1564 != nil {
+		return map[string]interface{}{}, errBTSurfaceDescription1564
+	}
+	errBTSurfaceDescription1564 = json.Unmarshal([]byte(serializedBTSurfaceDescription1564), &toSerialize)
+	if errBTSurfaceDescription1564 != nil {
+		return map[string]interface{}{}, errBTSurfaceDescription1564
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTCylinderDescription686) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_cylindrical_image_mapping_1640.go b/onshape/model_bt_cylindrical_image_mapping_1640.go
index 7f063ceed..aa578d435 100644
--- a/onshape/model_bt_cylindrical_image_mapping_1640.go
+++ b/onshape/model_bt_cylindrical_image_mapping_1640.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTCylindricalImageMapping1640{}
 
 // BTCylindricalImageMapping1640 struct for BTCylindricalImageMapping1640
 type BTCylindricalImageMapping1640 struct {
+	BTImageMapping-3821
 	// Type of JSON object.
-	BtType         *string                `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	CylinderSystem *BTCoordinateSystem387 `json:"cylinderSystem,omitempty"`
-	Radius         *float32               `json:"radius,omitempty"`
+	Radius *float32 `json:"radius,omitempty"`
 }
 
 // NewBTCylindricalImageMapping1640 instantiates a new BTCylindricalImageMapping1640 object
@@ -140,7 +141,7 @@ func (o *BTCylindricalImageMapping1640) SetRadius(v float32) {
 }
 
 func (o BTCylindricalImageMapping1640) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTCylindricalImageMapping1640) MarshalJSON() ([]byte, error) {
 
 func (o BTCylindricalImageMapping1640) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTImageMapping3821, errBTImageMapping3821 := json.Marshal(o.BTImageMapping3821)
+	if errBTImageMapping3821 != nil {
+		return map[string]interface{}{}, errBTImageMapping3821
+	}
+	errBTImageMapping3821 = json.Unmarshal([]byte(serializedBTImageMapping3821), &toSerialize)
+	if errBTImageMapping3821 != nil {
+		return map[string]interface{}{}, errBTImageMapping3821
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTCylindricalImageMapping1640) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_debug_geometry_2059.go b/onshape/model_bt_debug_geometry_2059.go
index 8d60fa205..9af35837e 100644
--- a/onshape/model_bt_debug_geometry_2059.go
+++ b/onshape/model_bt_debug_geometry_2059.go
@@ -20,16 +20,17 @@ var _ MappedNullable = &BTDebugGeometry2059{}
 
 // BTDebugGeometry2059 struct for BTDebugGeometry2059
 type BTDebugGeometry2059 struct {
+	BTEntityGeometry-35
 	// Type of JSON object.
-	BtType                           *string                    `json:"btType,omitempty"`
-	Appearance                       *BTGraphicsAppearance1152  `json:"appearance,omitempty"`
-	BelongsToFlattenedSheetMetalBody *bool                      `json:"belongsToFlattenedSheetMetalBody,omitempty"`
-	BodyId                           *string                    `json:"bodyId,omitempty"`
-	Color                            *GBTDebugEntityColor       `json:"color,omitempty"`
-	DeterministicId                  *string                    `json:"deterministicId,omitempty"`
-	SheetMetalModelId                *string                    `json:"sheetMetalModelId,omitempty"`
-	Style                            *GBTDebugEntityStyle       `json:"style,omitempty"`
-	Tessellation                     *BTTessellatedGeometry2576 `json:"tessellation,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Appearance *BTGraphicsAppearance1152 `json:"appearance,omitempty"`
+	BelongsToFlattenedSheetMetalBody *bool `json:"belongsToFlattenedSheetMetalBody,omitempty"`
+	BodyId *string `json:"bodyId,omitempty"`
+	Color *GBTDebugEntityColor `json:"color,omitempty"`
+	DeterministicId *string `json:"deterministicId,omitempty"`
+	SheetMetalModelId *string `json:"sheetMetalModelId,omitempty"`
+	Style *GBTDebugEntityStyle `json:"style,omitempty"`
+	Tessellation *BTTessellatedGeometry2576 `json:"tessellation,omitempty"`
 }
 
 // NewBTDebugGeometry2059 instantiates a new BTDebugGeometry2059 object
@@ -338,7 +339,7 @@ func (o *BTDebugGeometry2059) SetTessellation(v BTTessellatedGeometry2576) {
 }
 
 func (o BTDebugGeometry2059) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -347,6 +348,14 @@ func (o BTDebugGeometry2059) MarshalJSON() ([]byte, error) {
 
 func (o BTDebugGeometry2059) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTEntityGeometry35, errBTEntityGeometry35 := json.Marshal(o.BTEntityGeometry35)
+	if errBTEntityGeometry35 != nil {
+		return map[string]interface{}{}, errBTEntityGeometry35
+	}
+	errBTEntityGeometry35 = json.Unmarshal([]byte(serializedBTEntityGeometry35), &toSerialize)
+	if errBTEntityGeometry35 != nil {
+		return map[string]interface{}{}, errBTEntityGeometry35
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -412,3 +421,5 @@ func (v *NullableBTDebugGeometry2059) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_diff_json_response_2725.go b/onshape/model_bt_diff_json_response_2725.go
index e05b35768..06d37c7d3 100644
--- a/onshape/model_bt_diff_json_response_2725.go
+++ b/onshape/model_bt_diff_json_response_2725.go
@@ -21,11 +21,11 @@ var _ MappedNullable = &BTDiffJsonResponse2725{}
 // BTDiffJsonResponse2725 struct for BTDiffJsonResponse2725
 type BTDiffJsonResponse2725 struct {
 	// Type of JSON object.
-	BtType         *string                      `json:"btType,omitempty"`
-	Change         *BTJEdit3734                 `json:"change,omitempty"`
-	Patch          *BTDiffJsonResponse2725Patch `json:"patch,omitempty"`
-	SourceChangeId *string                      `json:"sourceChangeId,omitempty"`
-	TargetChangeId *string                      `json:"targetChangeId,omitempty"`
+	BtType         *string                                   `json:"btType,omitempty"`
+	Change         *BTJEdit3734                              `json:"change,omitempty"`
+	Patch          *BTArcLengthDimensionDisplayData1018AllOf `json:"patch,omitempty"`
+	SourceChangeId *string                                   `json:"sourceChangeId,omitempty"`
+	TargetChangeId *string                                   `json:"targetChangeId,omitempty"`
 }
 
 // NewBTDiffJsonResponse2725 instantiates a new BTDiffJsonResponse2725 object
@@ -110,9 +110,9 @@ func (o *BTDiffJsonResponse2725) SetChange(v BTJEdit3734) {
 }
 
 // GetPatch returns the Patch field value if set, zero value otherwise.
-func (o *BTDiffJsonResponse2725) GetPatch() BTDiffJsonResponse2725Patch {
+func (o *BTDiffJsonResponse2725) GetPatch() BTArcLengthDimensionDisplayData1018AllOf {
 	if o == nil || IsNil(o.Patch) {
-		var ret BTDiffJsonResponse2725Patch
+		var ret BTArcLengthDimensionDisplayData1018AllOf
 		return ret
 	}
 	return *o.Patch
@@ -120,7 +120,7 @@ func (o *BTDiffJsonResponse2725) GetPatch() BTDiffJsonResponse2725Patch {
 
 // GetPatchOk returns a tuple with the Patch field value if set, nil otherwise
 // and a boolean to check if the value has been set.
-func (o *BTDiffJsonResponse2725) GetPatchOk() (*BTDiffJsonResponse2725Patch, bool) {
+func (o *BTDiffJsonResponse2725) GetPatchOk() (*BTArcLengthDimensionDisplayData1018AllOf, bool) {
 	if o == nil || IsNil(o.Patch) {
 		return nil, false
 	}
@@ -136,8 +136,8 @@ func (o *BTDiffJsonResponse2725) HasPatch() bool {
 	return false
 }
 
-// SetPatch gets a reference to the given BTDiffJsonResponse2725Patch and assigns it to the Patch field.
-func (o *BTDiffJsonResponse2725) SetPatch(v BTDiffJsonResponse2725Patch) {
+// SetPatch gets a reference to the given BTArcLengthDimensionDisplayData1018AllOf and assigns it to the Patch field.
+func (o *BTDiffJsonResponse2725) SetPatch(v BTArcLengthDimensionDisplayData1018AllOf) {
 	o.Patch = &v
 }
 
diff --git a/onshape/model_bt_document_info.go b/onshape/model_bt_document_info.go
index 808cbbc68..a12918f6e 100644
--- a/onshape/model_bt_document_info.go
+++ b/onshape/model_bt_document_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTDocumentInfo type satisfies the MappedNullable interface at compile time
@@ -20,6 +22,7 @@ var _ MappedNullable = &BTDocumentInfo{}
 
 // BTDocumentInfo struct for BTDocumentInfo
 type BTDocumentInfo struct {
+	BTDocumentSummaryInfo
 	AnonymousAccessAllowed        *bool                   `json:"anonymousAccessAllowed,omitempty"`
 	AnonymousAllowsExport         *bool                   `json:"anonymousAllowsExport,omitempty"`
 	CanMove                       *bool                   `json:"canMove,omitempty"`
@@ -83,6 +86,8 @@ type BTDocumentInfo struct {
 	ViewRef *string `json:"viewRef,omitempty"`
 }
 
+type _BTDocumentInfo BTDocumentInfo
+
 // NewBTDocumentInfo instantiates a new BTDocumentInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -2109,6 +2114,43 @@ func (o BTDocumentInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTDocumentInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTDocumentInfo := _BTDocumentInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTDocumentInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTDocumentInfo(varBTDocumentInfo)
+
+	return err
+}
+
 type NullableBTDocumentInfo struct {
 	value *BTDocumentInfo
 	isSet bool
diff --git a/onshape/model_bt_document_label_info.go b/onshape/model_bt_document_label_info.go
index 7087eaf79..11588e257 100644
--- a/onshape/model_bt_document_label_info.go
+++ b/onshape/model_bt_document_label_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTDocumentLabelInfo type satisfies the MappedNullable interface at compile time
@@ -20,10 +22,13 @@ var _ MappedNullable = &BTDocumentLabelInfo{}
 
 // BTDocumentLabelInfo struct for BTDocumentLabelInfo
 type BTDocumentLabelInfo struct {
+	BTGlobalTreeNodeInfo
 	ParentLabelId *string `json:"parentLabelId,omitempty"`
 	Path          *string `json:"path,omitempty"`
 }
 
+type _BTDocumentLabelInfo BTDocumentLabelInfo
+
 // NewBTDocumentLabelInfo instantiates a new BTDocumentLabelInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -125,6 +130,43 @@ func (o BTDocumentLabelInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTDocumentLabelInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTDocumentLabelInfo := _BTDocumentLabelInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTDocumentLabelInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTDocumentLabelInfo(varBTDocumentLabelInfo)
+
+	return err
+}
+
 type NullableBTDocumentLabelInfo struct {
 	value *BTDocumentLabelInfo
 	isSet bool
diff --git a/onshape/model_bt_document_open_event_params.go b/onshape/model_bt_document_open_event_params.go
index 45e890bca..39adb4f54 100644
--- a/onshape/model_bt_document_open_event_params.go
+++ b/onshape/model_bt_document_open_event_params.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTDocumentOpenEventParams{}
 
 // BTDocumentOpenEventParams struct for BTDocumentOpenEventParams
 type BTDocumentOpenEventParams struct {
+	BTEventParams
 	DocumentId *string `json:"documentId,omitempty"`
 }
 
diff --git a/onshape/model_bt_document_processing_info.go b/onshape/model_bt_document_processing_info.go
index d06b53ed0..fe4831523 100644
--- a/onshape/model_bt_document_processing_info.go
+++ b/onshape/model_bt_document_processing_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTDocumentProcessingInfo type satisfies the MappedNullable interface at compile time
@@ -20,10 +22,13 @@ var _ MappedNullable = &BTDocumentProcessingInfo{}
 
 // BTDocumentProcessingInfo struct for BTDocumentProcessingInfo
 type BTDocumentProcessingInfo struct {
+	BTDocumentInfo
 	TranslationEventKey *string `json:"translationEventKey,omitempty"`
 	TranslationId       *string `json:"translationId,omitempty"`
 }
 
+type _BTDocumentProcessingInfo BTDocumentProcessingInfo
+
 // NewBTDocumentProcessingInfo instantiates a new BTDocumentProcessingInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -125,6 +130,43 @@ func (o BTDocumentProcessingInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTDocumentProcessingInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTDocumentProcessingInfo := _BTDocumentProcessingInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTDocumentProcessingInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTDocumentProcessingInfo(varBTDocumentProcessingInfo)
+
+	return err
+}
+
 type NullableBTDocumentProcessingInfo struct {
 	value *BTDocumentProcessingInfo
 	isSet bool
diff --git a/onshape/model_bt_document_selector_parameters_info.go b/onshape/model_bt_document_selector_parameters_info.go
index c1922aced..a2915a377 100644
--- a/onshape/model_bt_document_selector_parameters_info.go
+++ b/onshape/model_bt_document_selector_parameters_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTDocumentSelectorParametersInfo type satisfies the MappedNullable interface at compile time
@@ -23,6 +25,8 @@ type BTDocumentSelectorParametersInfo struct {
 	JsonType string `json:"jsonType"`
 }
 
+type _BTDocumentSelectorParametersInfo BTDocumentSelectorParametersInfo
+
 // NewBTDocumentSelectorParametersInfo instantiates a new BTDocumentSelectorParametersInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -79,6 +83,43 @@ func (o BTDocumentSelectorParametersInfo) ToMap() (map[string]interface{}, error
 	return toSerialize, nil
 }
 
+func (o *BTDocumentSelectorParametersInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTDocumentSelectorParametersInfo := _BTDocumentSelectorParametersInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTDocumentSelectorParametersInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTDocumentSelectorParametersInfo(varBTDocumentSelectorParametersInfo)
+
+	return err
+}
+
 type NullableBTDocumentSelectorParametersInfo struct {
 	value *BTDocumentSelectorParametersInfo
 	isSet bool
diff --git a/onshape/model_bt_document_summary_info.go b/onshape/model_bt_document_summary_info.go
index 19eaf8ee3..d2909e7f1 100644
--- a/onshape/model_bt_document_summary_info.go
+++ b/onshape/model_bt_document_summary_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTDocumentSummaryInfo type satisfies the MappedNullable interface at compile time
@@ -20,6 +22,7 @@ var _ MappedNullable = &BTDocumentSummaryInfo{}
 
 // BTDocumentSummaryInfo struct for BTDocumentSummaryInfo
 type BTDocumentSummaryInfo struct {
+	BTGlobalTreeNodeInfo
 	AnonymousAccessAllowed            *bool                 `json:"anonymousAccessAllowed,omitempty"`
 	AnonymousAllowsExport             *bool                 `json:"anonymousAllowsExport,omitempty"`
 	CanUnshare                        *bool                 `json:"canUnshare,omitempty"`
@@ -57,6 +60,8 @@ type BTDocumentSummaryInfo struct {
 	UserAccountLimitsBreached         *bool                 `json:"userAccountLimitsBreached,omitempty"`
 }
 
+type _BTDocumentSummaryInfo BTDocumentSummaryInfo
+
 // NewBTDocumentSummaryInfo instantiates a new BTDocumentSummaryInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -1313,6 +1318,43 @@ func (o BTDocumentSummaryInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTDocumentSummaryInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTDocumentSummaryInfo := _BTDocumentSummaryInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTDocumentSummaryInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTDocumentSummaryInfo(varBTDocumentSummaryInfo)
+
+	return err
+}
+
 type NullableBTDocumentSummaryInfo struct {
 	value *BTDocumentSummaryInfo
 	isSet bool
diff --git a/onshape/model_bt_document_summary_search_info.go b/onshape/model_bt_document_summary_search_info.go
index 1921b57e2..ad3cc3057 100644
--- a/onshape/model_bt_document_summary_search_info.go
+++ b/onshape/model_bt_document_summary_search_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTDocumentSummarySearchInfo type satisfies the MappedNullable interface at compile time
@@ -20,9 +22,12 @@ var _ MappedNullable = &BTDocumentSummarySearchInfo{}
 
 // BTDocumentSummarySearchInfo struct for BTDocumentSummarySearchInfo
 type BTDocumentSummarySearchInfo struct {
+	BTDocumentSummaryInfo
 	SearchHits []BTDocumentSearchHitInfo `json:"searchHits,omitempty"`
 }
 
+type _BTDocumentSummarySearchInfo BTDocumentSummarySearchInfo
+
 // NewBTDocumentSummarySearchInfo instantiates a new BTDocumentSummarySearchInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -89,6 +94,43 @@ func (o BTDocumentSummarySearchInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTDocumentSummarySearchInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTDocumentSummarySearchInfo := _BTDocumentSummarySearchInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTDocumentSummarySearchInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTDocumentSummarySearchInfo(varBTDocumentSummarySearchInfo)
+
+	return err
+}
+
 type NullableBTDocumentSummarySearchInfo struct {
 	value *BTDocumentSummarySearchInfo
 	isSet bool
diff --git a/onshape/model_bt_edge_topology_filter_122.go b/onshape/model_bt_edge_topology_filter_122.go
index 7fbc593de..a029cc1ce 100644
--- a/onshape/model_bt_edge_topology_filter_122.go
+++ b/onshape/model_bt_edge_topology_filter_122.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTEdgeTopologyFilter122{}
 
 // BTEdgeTopologyFilter122 struct for BTEdgeTopologyFilter122
 type BTEdgeTopologyFilter122 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType         *string          `json:"btType,omitempty"`
-	EdgeTopology   *GBTEdgeTopology `json:"edgeTopology,omitempty"`
-	IsInternalEdge *bool            `json:"isInternalEdge,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	EdgeTopology *GBTEdgeTopology `json:"edgeTopology,omitempty"`
+	IsInternalEdge *bool `json:"isInternalEdge,omitempty"`
 }
 
 // NewBTEdgeTopologyFilter122 instantiates a new BTEdgeTopologyFilter122 object
@@ -140,7 +141,7 @@ func (o *BTEdgeTopologyFilter122) SetIsInternalEdge(v bool) {
 }
 
 func (o BTEdgeTopologyFilter122) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTEdgeTopologyFilter122) MarshalJSON() ([]byte, error) {
 
 func (o BTEdgeTopologyFilter122) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTEdgeTopologyFilter122) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_ellipse_description_866.go b/onshape/model_bt_ellipse_description_866.go
index 843d108e9..c76ff287a 100644
--- a/onshape/model_bt_ellipse_description_866.go
+++ b/onshape/model_bt_ellipse_description_866.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTEllipseDescription866{}
 
 // BTEllipseDescription866 struct for BTEllipseDescription866
 type BTEllipseDescription866 struct {
+	BTCurveDescription-1583
 	// Type of JSON object.
-	BtType      *string        `json:"btType,omitempty"`
-	MajorAxis   *BTVector3d389 `json:"majorAxis,omitempty"`
-	MajorRadius *float64       `json:"majorRadius,omitempty"`
-	MinorRadius *float64       `json:"minorRadius,omitempty"`
-	Normal      *BTVector3d389 `json:"normal,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	MajorAxis *BTVector3d389 `json:"majorAxis,omitempty"`
+	MajorRadius *float64 `json:"majorRadius,omitempty"`
+	MinorRadius *float64 `json:"minorRadius,omitempty"`
+	Normal *BTVector3d389 `json:"normal,omitempty"`
 }
 
 // NewBTEllipseDescription866 instantiates a new BTEllipseDescription866 object
@@ -206,7 +207,7 @@ func (o *BTEllipseDescription866) SetNormal(v BTVector3d389) {
 }
 
 func (o BTEllipseDescription866) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTEllipseDescription866) MarshalJSON() ([]byte, error) {
 
 func (o BTEllipseDescription866) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTCurveDescription1583, errBTCurveDescription1583 := json.Marshal(o.BTCurveDescription1583)
+	if errBTCurveDescription1583 != nil {
+		return map[string]interface{}{}, errBTCurveDescription1583
+	}
+	errBTCurveDescription1583 = json.Unmarshal([]byte(serializedBTCurveDescription1583), &toSerialize)
+	if errBTCurveDescription1583 != nil {
+		return map[string]interface{}{}, errBTCurveDescription1583
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTEllipseDescription866) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_ellipse_diameter_dimension_display_data_1301.go b/onshape/model_bt_ellipse_diameter_dimension_display_data_1301.go
index 463f7967e..6df39a7c2 100644
--- a/onshape/model_bt_ellipse_diameter_dimension_display_data_1301.go
+++ b/onshape/model_bt_ellipse_diameter_dimension_display_data_1301.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTEllipseDiameterDimensionDisplayData1301{}
 
 // BTEllipseDiameterDimensionDisplayData1301 struct for BTEllipseDiameterDimensionDisplayData1301
 type BTEllipseDiameterDimensionDisplayData1301 struct {
+	BTLinearDimensionDisplayData-330
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTEllipseDiameterDimensionDisplayData1301) SetBtType(v string) {
 }
 
 func (o BTEllipseDiameterDimensionDisplayData1301) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTEllipseDiameterDimensionDisplayData1301) MarshalJSON() ([]byte, error)
 
 func (o BTEllipseDiameterDimensionDisplayData1301) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTLinearDimensionDisplayData330, errBTLinearDimensionDisplayData330 := json.Marshal(o.BTLinearDimensionDisplayData330)
+	if errBTLinearDimensionDisplayData330 != nil {
+		return map[string]interface{}{}, errBTLinearDimensionDisplayData330
+	}
+	errBTLinearDimensionDisplayData330 = json.Unmarshal([]byte(serializedBTLinearDimensionDisplayData330), &toSerialize)
+	if errBTLinearDimensionDisplayData330 != nil {
+		return map[string]interface{}{}, errBTLinearDimensionDisplayData330
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTEllipseDiameterDimensionDisplayData1301) UnmarshalJSON(src []
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_entity_degenerate_edge_1129.go b/onshape/model_bt_entity_degenerate_edge_1129.go
index b4edd20fc..5b172c2ea 100644
--- a/onshape/model_bt_entity_degenerate_edge_1129.go
+++ b/onshape/model_bt_entity_degenerate_edge_1129.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTEntityDegenerateEdge1129{}
 
 // BTEntityDegenerateEdge1129 struct for BTEntityDegenerateEdge1129
 type BTEntityDegenerateEdge1129 struct {
+	BTTessellatedGeometry-2576
 	// Type of JSON object.
-	BtType *string   `json:"btType,omitempty"`
-	Point  []float32 `json:"point,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Point []float32 `json:"point,omitempty"`
 }
 
 // NewBTEntityDegenerateEdge1129 instantiates a new BTEntityDegenerateEdge1129 object
@@ -107,7 +108,7 @@ func (o *BTEntityDegenerateEdge1129) SetPoint(v []float32) {
 }
 
 func (o BTEntityDegenerateEdge1129) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTEntityDegenerateEdge1129) MarshalJSON() ([]byte, error) {
 
 func (o BTEntityDegenerateEdge1129) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTessellatedGeometry2576, errBTTessellatedGeometry2576 := json.Marshal(o.BTTessellatedGeometry2576)
+	if errBTTessellatedGeometry2576 != nil {
+		return map[string]interface{}{}, errBTTessellatedGeometry2576
+	}
+	errBTTessellatedGeometry2576 = json.Unmarshal([]byte(serializedBTTessellatedGeometry2576), &toSerialize)
+	if errBTTessellatedGeometry2576 != nil {
+		return map[string]interface{}{}, errBTTessellatedGeometry2576
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTEntityDegenerateEdge1129) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_entity_deletion_24.go b/onshape/model_bt_entity_deletion_24.go
index b67bf0225..b8f3a5f2c 100644
--- a/onshape/model_bt_entity_deletion_24.go
+++ b/onshape/model_bt_entity_deletion_24.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTEntityDeletion24{}
 
 // BTEntityDeletion24 struct for BTEntityDeletion24
 type BTEntityDeletion24 struct {
+	BTBaseEntityData-33
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTEntityDeletion24) SetBtType(v string) {
 }
 
 func (o BTEntityDeletion24) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTEntityDeletion24) MarshalJSON() ([]byte, error) {
 
 func (o BTEntityDeletion24) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTBaseEntityData33, errBTBaseEntityData33 := json.Marshal(o.BTBaseEntityData33)
+	if errBTBaseEntityData33 != nil {
+		return map[string]interface{}{}, errBTBaseEntityData33
+	}
+	errBTBaseEntityData33 = json.Unmarshal([]byte(serializedBTBaseEntityData33), &toSerialize)
+	if errBTBaseEntityData33 != nil {
+		return map[string]interface{}{}, errBTBaseEntityData33
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTEntityDeletion24) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_entity_edge_30.go b/onshape/model_bt_entity_edge_30.go
index de380cbfe..79322acf5 100644
--- a/onshape/model_bt_entity_edge_30.go
+++ b/onshape/model_bt_entity_edge_30.go
@@ -20,14 +20,15 @@ var _ MappedNullable = &BTEntityEdge30{}
 
 // BTEntityEdge30 struct for BTEntityEdge30
 type BTEntityEdge30 struct {
+	BTTessellatedGeometry-2576
 	// Type of JSON object.
-	BtType               *string                        `json:"btType,omitempty"`
-	CompressedPoints     *BTImmutableByteArray          `json:"compressedPoints,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	CompressedPoints *BTImmutableByteArray `json:"compressedPoints,omitempty"`
 	EdgeSmoothnessStatus *GBTEntityEdgeSmoothnessStatus `json:"edgeSmoothnessStatus,omitempty"`
-	EdgeType             *GBTEdgeType                   `json:"edgeType,omitempty"`
-	IsClosed             *bool                          `json:"isClosed,omitempty"`
-	IsInternalEdge       *bool                          `json:"isInternalEdge,omitempty"`
-	Points               *BTImmutableFloatArray         `json:"points,omitempty"`
+	EdgeType *GBTEdgeType `json:"edgeType,omitempty"`
+	IsClosed *bool `json:"isClosed,omitempty"`
+	IsInternalEdge *bool `json:"isInternalEdge,omitempty"`
+	Points *BTImmutableFloatArray `json:"points,omitempty"`
 }
 
 // NewBTEntityEdge30 instantiates a new BTEntityEdge30 object
@@ -272,7 +273,7 @@ func (o *BTEntityEdge30) SetPoints(v BTImmutableFloatArray) {
 }
 
 func (o BTEntityEdge30) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -281,6 +282,14 @@ func (o BTEntityEdge30) MarshalJSON() ([]byte, error) {
 
 func (o BTEntityEdge30) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTessellatedGeometry2576, errBTTessellatedGeometry2576 := json.Marshal(o.BTTessellatedGeometry2576)
+	if errBTTessellatedGeometry2576 != nil {
+		return map[string]interface{}{}, errBTTessellatedGeometry2576
+	}
+	errBTTessellatedGeometry2576 = json.Unmarshal([]byte(serializedBTTessellatedGeometry2576), &toSerialize)
+	if errBTTessellatedGeometry2576 != nil {
+		return map[string]interface{}{}, errBTTessellatedGeometry2576
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -340,3 +349,5 @@ func (v *NullableBTEntityEdge30) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_entity_face_31.go b/onshape/model_bt_entity_face_31.go
index c353399a8..9fa011133 100644
--- a/onshape/model_bt_entity_face_31.go
+++ b/onshape/model_bt_entity_face_31.go
@@ -20,21 +20,22 @@ var _ MappedNullable = &BTEntityFace31{}
 
 // BTEntityFace31 struct for BTEntityFace31
 type BTEntityFace31 struct {
+	BTTessellatedGeometry-2576
 	// Type of JSON object.
-	BtType                          *string                 `json:"btType,omitempty"`
-	CompressedUvs                   *BTImmutableByteArray   `json:"compressedUvs,omitempty"`
-	FlipComputedNormals             *bool                   `json:"flipComputedNormals,omitempty"`
-	Indices                         *BTImmutableIntArray    `json:"indices,omitempty"`
-	IndicesStoredAsDifferences      *bool                   `json:"indicesStoredAsDifferences,omitempty"`
-	IsPlanar                        *bool                   `json:"isPlanar,omitempty"`
-	MaxPrincipleCurvatureMagnitudes *BTImmutableFloatArray  `json:"maxPrincipleCurvatureMagnitudes,omitempty"`
-	MinPrincipleCurvatureMagnitudes *BTImmutableFloatArray  `json:"minPrincipleCurvatureMagnitudes,omitempty"`
-	Normals                         *BTImmutableFloatArray  `json:"normals,omitempty"`
-	Points                          *BTImmutableFloatArray  `json:"points,omitempty"`
-	SurfaceParameters               *BTImmutableDoubleArray `json:"surfaceParameters,omitempty"`
-	SurfaceType                     *GBTSurfaceType         `json:"surfaceType,omitempty"`
-	TextureCoordinates              *BTImmutableFloatArray  `json:"textureCoordinates,omitempty"`
-	TriangleCount                   *int32                  `json:"triangleCount,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	CompressedUvs *BTImmutableByteArray `json:"compressedUvs,omitempty"`
+	FlipComputedNormals *bool `json:"flipComputedNormals,omitempty"`
+	Indices *BTImmutableIntArray `json:"indices,omitempty"`
+	IndicesStoredAsDifferences *bool `json:"indicesStoredAsDifferences,omitempty"`
+	IsPlanar *bool `json:"isPlanar,omitempty"`
+	MaxPrincipleCurvatureMagnitudes *BTImmutableFloatArray `json:"maxPrincipleCurvatureMagnitudes,omitempty"`
+	MinPrincipleCurvatureMagnitudes *BTImmutableFloatArray `json:"minPrincipleCurvatureMagnitudes,omitempty"`
+	Normals *BTImmutableFloatArray `json:"normals,omitempty"`
+	Points *BTImmutableFloatArray `json:"points,omitempty"`
+	SurfaceParameters *BTImmutableDoubleArray `json:"surfaceParameters,omitempty"`
+	SurfaceType *GBTSurfaceType `json:"surfaceType,omitempty"`
+	TextureCoordinates *BTImmutableFloatArray `json:"textureCoordinates,omitempty"`
+	TriangleCount *int32 `json:"triangleCount,omitempty"`
 }
 
 // NewBTEntityFace31 instantiates a new BTEntityFace31 object
@@ -503,7 +504,7 @@ func (o *BTEntityFace31) SetTriangleCount(v int32) {
 }
 
 func (o BTEntityFace31) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -512,6 +513,14 @@ func (o BTEntityFace31) MarshalJSON() ([]byte, error) {
 
 func (o BTEntityFace31) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTessellatedGeometry2576, errBTTessellatedGeometry2576 := json.Marshal(o.BTTessellatedGeometry2576)
+	if errBTTessellatedGeometry2576 != nil {
+		return map[string]interface{}{}, errBTTessellatedGeometry2576
+	}
+	errBTTessellatedGeometry2576 = json.Unmarshal([]byte(serializedBTTessellatedGeometry2576), &toSerialize)
+	if errBTTessellatedGeometry2576 != nil {
+		return map[string]interface{}{}, errBTTessellatedGeometry2576
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -592,3 +601,5 @@ func (v *NullableBTEntityFace31) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_entity_point_29.go b/onshape/model_bt_entity_point_29.go
index 2c893f964..5a5ab8c4f 100644
--- a/onshape/model_bt_entity_point_29.go
+++ b/onshape/model_bt_entity_point_29.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTEntityPoint29{}
 
 // BTEntityPoint29 struct for BTEntityPoint29
 type BTEntityPoint29 struct {
+	BTTessellatedGeometry-2576
 	// Type of JSON object.
-	BtType *string   `json:"btType,omitempty"`
-	Point  []float32 `json:"point,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Point []float32 `json:"point,omitempty"`
 }
 
 // NewBTEntityPoint29 instantiates a new BTEntityPoint29 object
@@ -107,7 +108,7 @@ func (o *BTEntityPoint29) SetPoint(v []float32) {
 }
 
 func (o BTEntityPoint29) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTEntityPoint29) MarshalJSON() ([]byte, error) {
 
 func (o BTEntityPoint29) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTessellatedGeometry2576, errBTTessellatedGeometry2576 := json.Marshal(o.BTTessellatedGeometry2576)
+	if errBTTessellatedGeometry2576 != nil {
+		return map[string]interface{}{}, errBTTessellatedGeometry2576
+	}
+	errBTTessellatedGeometry2576 = json.Unmarshal([]byte(serializedBTTessellatedGeometry2576), &toSerialize)
+	if errBTTessellatedGeometry2576 != nil {
+		return map[string]interface{}{}, errBTTessellatedGeometry2576
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTEntityPoint29) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_entity_type_filter_124.go b/onshape/model_bt_entity_type_filter_124.go
index 24f07836c..3e3b0d605 100644
--- a/onshape/model_bt_entity_type_filter_124.go
+++ b/onshape/model_bt_entity_type_filter_124.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTEntityTypeFilter124{}
 
 // BTEntityTypeFilter124 struct for BTEntityTypeFilter124
 type BTEntityTypeFilter124 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType     *string        `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	EntityType *GBTEntityType `json:"entityType,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTEntityTypeFilter124) SetEntityType(v GBTEntityType) {
 }
 
 func (o BTEntityTypeFilter124) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTEntityTypeFilter124) MarshalJSON() ([]byte, error) {
 
 func (o BTEntityTypeFilter124) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTEntityTypeFilter124) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_explosion_2754.go b/onshape/model_bt_explosion_2754.go
index b9cf1445e..29f5513a8 100644
--- a/onshape/model_bt_explosion_2754.go
+++ b/onshape/model_bt_explosion_2754.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTExplosion2754{}
 
 // BTExplosion2754 struct for BTExplosion2754
 type BTExplosion2754 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
-	BtType             *string                               `json:"btType,omitempty"`
-	ExplodeSteps       []BTExplosionStepFeature3008          `json:"explodeSteps,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	ExplodeSteps []BTExplosionStepFeature3008 `json:"explodeSteps,omitempty"`
 	StartingPositionId *BTMicroversionIdAndConfiguration2338 `json:"startingPositionId,omitempty"`
 }
 
@@ -140,7 +141,7 @@ func (o *BTExplosion2754) SetStartingPositionId(v BTMicroversionIdAndConfigurati
 }
 
 func (o BTExplosion2754) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTExplosion2754) MarshalJSON() ([]byte, error) {
 
 func (o BTExplosion2754) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTExplosion2754) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_explosion_step_feature_3008.go b/onshape/model_bt_explosion_step_feature_3008.go
index bff3d42dc..1cf5c02c0 100644
--- a/onshape/model_bt_explosion_step_feature_3008.go
+++ b/onshape/model_bt_explosion_step_feature_3008.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTExplosionStepFeature3008{}
 
 // BTExplosionStepFeature3008 struct for BTExplosionStepFeature3008
 type BTExplosionStepFeature3008 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTExplosionStepFeature3008) SetBtType(v string) {
 }
 
 func (o BTExplosionStepFeature3008) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTExplosionStepFeature3008) MarshalJSON() ([]byte, error) {
 
 func (o BTExplosionStepFeature3008) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTExplosionStepFeature3008) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_export_body_properties_3559.go b/onshape/model_bt_export_body_properties_3559.go
index 1720fcb46..8e0c31d32 100644
--- a/onshape/model_bt_export_body_properties_3559.go
+++ b/onshape/model_bt_export_body_properties_3559.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTExportBodyProperties3559{}
 
 // BTExportBodyProperties3559 struct for BTExportBodyProperties3559
 type BTExportBodyProperties3559 struct {
+	BTExportModelProperties-3216
 	// Type of JSON object.
-	BtType     *string             `json:"btType,omitempty"`
-	Material   *BTPartMaterial1445 `json:"material,omitempty"`
-	Visibility *GBTPartVisibility  `json:"visibility,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Material *BTPartMaterial1445 `json:"material,omitempty"`
+	Visibility *GBTPartVisibility `json:"visibility,omitempty"`
 }
 
 // NewBTExportBodyProperties3559 instantiates a new BTExportBodyProperties3559 object
@@ -140,7 +141,7 @@ func (o *BTExportBodyProperties3559) SetVisibility(v GBTPartVisibility) {
 }
 
 func (o BTExportBodyProperties3559) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTExportBodyProperties3559) MarshalJSON() ([]byte, error) {
 
 func (o BTExportBodyProperties3559) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTExportModelProperties3216, errBTExportModelProperties3216 := json.Marshal(o.BTExportModelProperties3216)
+	if errBTExportModelProperties3216 != nil {
+		return map[string]interface{}{}, errBTExportModelProperties3216
+	}
+	errBTExportModelProperties3216 = json.Unmarshal([]byte(serializedBTExportModelProperties3216), &toSerialize)
+	if errBTExportModelProperties3216 != nil {
+		return map[string]interface{}{}, errBTExportModelProperties3216
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTExportBodyProperties3559) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_export_model_arc_edge_geometry_1257.go b/onshape/model_bt_export_model_arc_edge_geometry_1257.go
index f30d79706..ea6a44661 100644
--- a/onshape/model_bt_export_model_arc_edge_geometry_1257.go
+++ b/onshape/model_bt_export_model_arc_edge_geometry_1257.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTExportModelArcEdgeGeometry1257{}
 
 // BTExportModelArcEdgeGeometry1257 struct for BTExportModelArcEdgeGeometry1257
 type BTExportModelArcEdgeGeometry1257 struct {
+	BTExportModelEdgeGeometry-1125
 	// Type of JSON object.
-	BtType         *string  `json:"btType,omitempty"`
-	ArcIsClockwise *bool    `json:"arcIsClockwise,omitempty"`
-	ArcSweep       *float64 `json:"arcSweep,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	ArcIsClockwise *bool `json:"arcIsClockwise,omitempty"`
+	ArcSweep *float64 `json:"arcSweep,omitempty"`
 }
 
 // NewBTExportModelArcEdgeGeometry1257 instantiates a new BTExportModelArcEdgeGeometry1257 object
@@ -140,7 +141,7 @@ func (o *BTExportModelArcEdgeGeometry1257) SetArcSweep(v float64) {
 }
 
 func (o BTExportModelArcEdgeGeometry1257) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTExportModelArcEdgeGeometry1257) MarshalJSON() ([]byte, error) {
 
 func (o BTExportModelArcEdgeGeometry1257) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTExportModelEdgeGeometry1125, errBTExportModelEdgeGeometry1125 := json.Marshal(o.BTExportModelEdgeGeometry1125)
+	if errBTExportModelEdgeGeometry1125 != nil {
+		return map[string]interface{}{}, errBTExportModelEdgeGeometry1125
+	}
+	errBTExportModelEdgeGeometry1125 = json.Unmarshal([]byte(serializedBTExportModelEdgeGeometry1125), &toSerialize)
+	if errBTExportModelEdgeGeometry1125 != nil {
+		return map[string]interface{}{}, errBTExportModelEdgeGeometry1125
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTExportModelArcEdgeGeometry1257) UnmarshalJSON(src []byte) err
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_export_tessellated_edges_body_890.go b/onshape/model_bt_export_tessellated_edges_body_890.go
index 91a4c602e..ab7075423 100644
--- a/onshape/model_bt_export_tessellated_edges_body_890.go
+++ b/onshape/model_bt_export_tessellated_edges_body_890.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTExportTessellatedEdgesBody890{}
 
 // BTExportTessellatedEdgesBody890 struct for BTExportTessellatedEdgesBody890
 type BTExportTessellatedEdgesBody890 struct {
+	BTExportTessellatedBody-3398
 	// Type of JSON object.
-	BtType *string                            `json:"btType,omitempty"`
-	Edges  []BTExportTessellatedEdgesEdge1364 `json:"edges,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Edges []BTExportTessellatedEdgesEdge1364 `json:"edges,omitempty"`
 }
 
 // NewBTExportTessellatedEdgesBody890 instantiates a new BTExportTessellatedEdgesBody890 object
@@ -107,7 +108,7 @@ func (o *BTExportTessellatedEdgesBody890) SetEdges(v []BTExportTessellatedEdgesE
 }
 
 func (o BTExportTessellatedEdgesBody890) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTExportTessellatedEdgesBody890) MarshalJSON() ([]byte, error) {
 
 func (o BTExportTessellatedEdgesBody890) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTExportTessellatedBody3398, errBTExportTessellatedBody3398 := json.Marshal(o.BTExportTessellatedBody3398)
+	if errBTExportTessellatedBody3398 != nil {
+		return map[string]interface{}{}, errBTExportTessellatedBody3398
+	}
+	errBTExportTessellatedBody3398 = json.Unmarshal([]byte(serializedBTExportTessellatedBody3398), &toSerialize)
+	if errBTExportTessellatedBody3398 != nil {
+		return map[string]interface{}{}, errBTExportTessellatedBody3398
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTExportTessellatedEdgesBody890) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_export_tessellated_faces_body_1321.go b/onshape/model_bt_export_tessellated_faces_body_1321.go
index 75fd77a46..c0c0ecb83 100644
--- a/onshape/model_bt_export_tessellated_faces_body_1321.go
+++ b/onshape/model_bt_export_tessellated_faces_body_1321.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTExportTessellatedFacesBody1321{}
 
 // BTExportTessellatedFacesBody1321 struct for BTExportTessellatedFacesBody1321
 type BTExportTessellatedFacesBody1321 struct {
+	BTExportTessellatedBody-3398
 	// Type of JSON object.
-	BtType      *string                            `json:"btType,omitempty"`
-	Appearance  *BTGraphicsAppearance1152          `json:"appearance,omitempty"`
-	BodyType    *GBTBodyType                       `json:"bodyType,omitempty"`
-	Faces       []BTExportTessellatedFacesFace1192 `json:"faces,omitempty"`
-	FacetPoints []BTVector3d389                    `json:"facetPoints,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Appearance *BTGraphicsAppearance1152 `json:"appearance,omitempty"`
+	BodyType *GBTBodyType `json:"bodyType,omitempty"`
+	Faces []BTExportTessellatedFacesFace1192 `json:"faces,omitempty"`
+	FacetPoints []BTVector3d389 `json:"facetPoints,omitempty"`
 }
 
 // NewBTExportTessellatedFacesBody1321 instantiates a new BTExportTessellatedFacesBody1321 object
@@ -206,7 +207,7 @@ func (o *BTExportTessellatedFacesBody1321) SetFacetPoints(v []BTVector3d389) {
 }
 
 func (o BTExportTessellatedFacesBody1321) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTExportTessellatedFacesBody1321) MarshalJSON() ([]byte, error) {
 
 func (o BTExportTessellatedFacesBody1321) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTExportTessellatedBody3398, errBTExportTessellatedBody3398 := json.Marshal(o.BTExportTessellatedBody3398)
+	if errBTExportTessellatedBody3398 != nil {
+		return map[string]interface{}{}, errBTExportTessellatedBody3398
+	}
+	errBTExportTessellatedBody3398 = json.Unmarshal([]byte(serializedBTExportTessellatedBody3398), &toSerialize)
+	if errBTExportTessellatedBody3398 != nil {
+		return map[string]interface{}{}, errBTExportTessellatedBody3398
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTExportTessellatedFacesBody1321) UnmarshalJSON(src []byte) err
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_external_reference_1936.go b/onshape/model_bt_external_reference_1936.go
index cdfa97c34..f112444cd 100644
--- a/onshape/model_bt_external_reference_1936.go
+++ b/onshape/model_bt_external_reference_1936.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTExternalReference1936{}
 
 // BTExternalReference1936 struct for BTExternalReference1936
 type BTExternalReference1936 struct {
+	BTElementReference-725
 	// Type of JSON object.
-	BtType            *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	DocumentVersionId *string `json:"documentVersionId,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTExternalReference1936) SetDocumentVersionId(v string) {
 }
 
 func (o BTExternalReference1936) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTExternalReference1936) MarshalJSON() ([]byte, error) {
 
 func (o BTExternalReference1936) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTElementReference725, errBTElementReference725 := json.Marshal(o.BTElementReference725)
+	if errBTElementReference725 != nil {
+		return map[string]interface{}{}, errBTElementReference725
+	}
+	errBTElementReference725 = json.Unmarshal([]byte(serializedBTElementReference725), &toSerialize)
+	if errBTElementReference725 != nil {
+		return map[string]interface{}{}, errBTElementReference725
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTExternalReference1936) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_feature_entity_34.go b/onshape/model_bt_feature_entity_34.go
index 85a766a41..52fdefd6a 100644
--- a/onshape/model_bt_feature_entity_34.go
+++ b/onshape/model_bt_feature_entity_34.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTFeatureEntity34{}
 
 // BTFeatureEntity34 struct for BTFeatureEntity34
 type BTFeatureEntity34 struct {
+	BTBaseEntityData-33
 	// Type of JSON object.
-	BtType                 *string                       `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	DomainSpecificMetadata []BTDomainSpecificMetadata961 `json:"domainSpecificMetadata,omitempty"`
-	FirstGeometry          *BTEntityGeometry35           `json:"firstGeometry,omitempty"`
+	FirstGeometry *BTEntityGeometry35 `json:"firstGeometry,omitempty"`
 }
 
 // NewBTFeatureEntity34 instantiates a new BTFeatureEntity34 object
@@ -140,7 +141,7 @@ func (o *BTFeatureEntity34) SetFirstGeometry(v BTEntityGeometry35) {
 }
 
 func (o BTFeatureEntity34) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTFeatureEntity34) MarshalJSON() ([]byte, error) {
 
 func (o BTFeatureEntity34) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTBaseEntityData33, errBTBaseEntityData33 := json.Marshal(o.BTBaseEntityData33)
+	if errBTBaseEntityData33 != nil {
+		return map[string]interface{}{}, errBTBaseEntityData33
+	}
+	errBTBaseEntityData33 = json.Unmarshal([]byte(serializedBTBaseEntityData33), &toSerialize)
+	if errBTBaseEntityData33 != nil {
+		return map[string]interface{}{}, errBTBaseEntityData33
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTFeatureEntity34) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_feature_filter_127.go b/onshape/model_bt_feature_filter_127.go
index d0552b41b..70fec6f46 100644
--- a/onshape/model_bt_feature_filter_127.go
+++ b/onshape/model_bt_feature_filter_127.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTFeatureFilter127{}
 
 // BTFeatureFilter127 struct for BTFeatureFilter127
 type BTFeatureFilter127 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType    *string                    `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Exclusion *GBTFeatureFilterExclusion `json:"exclusion,omitempty"`
-	FeatureId *string                    `json:"featureId,omitempty"`
+	FeatureId *string `json:"featureId,omitempty"`
 }
 
 // NewBTFeatureFilter127 instantiates a new BTFeatureFilter127 object
@@ -140,7 +141,7 @@ func (o *BTFeatureFilter127) SetFeatureId(v string) {
 }
 
 func (o BTFeatureFilter127) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTFeatureFilter127) MarshalJSON() ([]byte, error) {
 
 func (o BTFeatureFilter127) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTFeatureFilter127) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_feature_studio_contents_2239.go b/onshape/model_bt_feature_studio_contents_2239.go
index 268d75206..1228e2489 100644
--- a/onshape/model_bt_feature_studio_contents_2239.go
+++ b/onshape/model_bt_feature_studio_contents_2239.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTFeatureStudioContents2239{}
 
 // BTFeatureStudioContents2239 struct for BTFeatureStudioContents2239
 type BTFeatureStudioContents2239 struct {
+	BTFeatureApiBase-1430
 	// Type of JSON object.
-	BtType   *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Contents *string `json:"contents,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTFeatureStudioContents2239) SetContents(v string) {
 }
 
 func (o BTFeatureStudioContents2239) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTFeatureStudioContents2239) MarshalJSON() ([]byte, error) {
 
 func (o BTFeatureStudioContents2239) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFeatureApiBase1430, errBTFeatureApiBase1430 := json.Marshal(o.BTFeatureApiBase1430)
+	if errBTFeatureApiBase1430 != nil {
+		return map[string]interface{}{}, errBTFeatureApiBase1430
+	}
+	errBTFeatureApiBase1430 = json.Unmarshal([]byte(serializedBTFeatureApiBase1430), &toSerialize)
+	if errBTFeatureApiBase1430 != nil {
+		return map[string]interface{}{}, errBTFeatureApiBase1430
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTFeatureStudioContents2239) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_feature_type_filter_962.go b/onshape/model_bt_feature_type_filter_962.go
index f2e1fb0e9..b553259b9 100644
--- a/onshape/model_bt_feature_type_filter_962.go
+++ b/onshape/model_bt_feature_type_filter_962.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTFeatureTypeFilter962{}
 
 // BTFeatureTypeFilter962 struct for BTFeatureTypeFilter962
 type BTFeatureTypeFilter962 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType      *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	FeatureType *string `json:"featureType,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTFeatureTypeFilter962) SetFeatureType(v string) {
 }
 
 func (o BTFeatureTypeFilter962) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTFeatureTypeFilter962) MarshalJSON() ([]byte, error) {
 
 func (o BTFeatureTypeFilter962) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTFeatureTypeFilter962) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_flat_sheet_metal_filter_3018.go b/onshape/model_bt_flat_sheet_metal_filter_3018.go
index 1e818dd46..fc8e53293 100644
--- a/onshape/model_bt_flat_sheet_metal_filter_3018.go
+++ b/onshape/model_bt_flat_sheet_metal_filter_3018.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTFlatSheetMetalFilter3018{}
 
 // BTFlatSheetMetalFilter3018 struct for BTFlatSheetMetalFilter3018
 type BTFlatSheetMetalFilter3018 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType *string                            `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Allows *GBTFilterFlattenedGeometryOptions `json:"allows,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTFlatSheetMetalFilter3018) SetAllows(v GBTFilterFlattenedGeometryOptio
 }
 
 func (o BTFlatSheetMetalFilter3018) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTFlatSheetMetalFilter3018) MarshalJSON() ([]byte, error) {
 
 func (o BTFlatSheetMetalFilter3018) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTFlatSheetMetalFilter3018) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_folder_info.go b/onshape/model_bt_folder_info.go
index 000818d85..483b82091 100644
--- a/onshape/model_bt_folder_info.go
+++ b/onshape/model_bt_folder_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTFolderInfo type satisfies the MappedNullable interface at compile time
@@ -20,6 +22,7 @@ var _ MappedNullable = &BTFolderInfo{}
 
 // BTFolderInfo struct for BTFolderInfo
 type BTFolderInfo struct {
+	BTGlobalTreeNodeInfo
 	Active                    *bool                         `json:"active,omitempty"`
 	CanUnshare                *bool                         `json:"canUnshare,omitempty"`
 	ElementLibrarySummaryInfo []BTElementLibrarySummaryInfo `json:"elementLibrarySummaryInfo,omitempty"`
@@ -30,6 +33,8 @@ type BTFolderInfo struct {
 	TrashedAt                 *JSONTime                     `json:"trashedAt,omitempty"`
 }
 
+type _BTFolderInfo BTFolderInfo
+
 // NewBTFolderInfo instantiates a new BTFolderInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -341,6 +346,43 @@ func (o BTFolderInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTFolderInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTFolderInfo := _BTFolderInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTFolderInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTFolderInfo(varBTFolderInfo)
+
+	return err
+}
+
 type NullableBTFolderInfo struct {
 	value *BTFolderInfo
 	isSet bool
diff --git a/onshape/model_bt_full_element_id_and_part_id_643.go b/onshape/model_bt_full_element_id_and_part_id_643.go
index fd6d8dd38..4d9193d1b 100644
--- a/onshape/model_bt_full_element_id_and_part_id_643.go
+++ b/onshape/model_bt_full_element_id_and_part_id_643.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTFullElementIdAndPartId643{}
 
 // BTFullElementIdAndPartId643 struct for BTFullElementIdAndPartId643
 type BTFullElementIdAndPartId643 struct {
+	BTFullElementIdWithDocument-1729
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 	PartId *string `json:"partId,omitempty"`
@@ -107,7 +108,7 @@ func (o *BTFullElementIdAndPartId643) SetPartId(v string) {
 }
 
 func (o BTFullElementIdAndPartId643) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTFullElementIdAndPartId643) MarshalJSON() ([]byte, error) {
 
 func (o BTFullElementIdAndPartId643) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFullElementIdWithDocument1729, errBTFullElementIdWithDocument1729 := json.Marshal(o.BTFullElementIdWithDocument1729)
+	if errBTFullElementIdWithDocument1729 != nil {
+		return map[string]interface{}{}, errBTFullElementIdWithDocument1729
+	}
+	errBTFullElementIdWithDocument1729 = json.Unmarshal([]byte(serializedBTFullElementIdWithDocument1729), &toSerialize)
+	if errBTFullElementIdWithDocument1729 != nil {
+		return map[string]interface{}{}, errBTFullElementIdWithDocument1729
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTFullElementIdAndPartId643) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_generated_graphics_appearance_4159.go b/onshape/model_bt_generated_graphics_appearance_4159.go
index 47b531371..ec957e717 100644
--- a/onshape/model_bt_generated_graphics_appearance_4159.go
+++ b/onshape/model_bt_generated_graphics_appearance_4159.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTGeneratedGraphicsAppearance4159{}
 
 // BTGeneratedGraphicsAppearance4159 struct for BTGeneratedGraphicsAppearance4159
 type BTGeneratedGraphicsAppearance4159 struct {
+	BTGraphicsAppearance-1152
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTGeneratedGraphicsAppearance4159) SetBtType(v string) {
 }
 
 func (o BTGeneratedGraphicsAppearance4159) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTGeneratedGraphicsAppearance4159) MarshalJSON() ([]byte, error) {
 
 func (o BTGeneratedGraphicsAppearance4159) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTGraphicsAppearance1152, errBTGraphicsAppearance1152 := json.Marshal(o.BTGraphicsAppearance1152)
+	if errBTGraphicsAppearance1152 != nil {
+		return map[string]interface{}{}, errBTGraphicsAppearance1152
+	}
+	errBTGraphicsAppearance1152 = json.Unmarshal([]byte(serializedBTGraphicsAppearance1152), &toSerialize)
+	if errBTGraphicsAppearance1152 != nil {
+		return map[string]interface{}{}, errBTGraphicsAppearance1152
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTGeneratedGraphicsAppearance4159) UnmarshalJSON(src []byte) er
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_geometry_filter_130.go b/onshape/model_bt_geometry_filter_130.go
index 8c8bf8bfd..f88858968 100644
--- a/onshape/model_bt_geometry_filter_130.go
+++ b/onshape/model_bt_geometry_filter_130.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTGeometryFilter130{}
 
 // BTGeometryFilter130 struct for BTGeometryFilter130
 type BTGeometryFilter130 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType       *string          `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	GeometryType *GBTGeometryType `json:"geometryType,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTGeometryFilter130) SetGeometryType(v GBTGeometryType) {
 }
 
 func (o BTGeometryFilter130) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTGeometryFilter130) MarshalJSON() ([]byte, error) {
 
 func (o BTGeometryFilter130) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTGeometryFilter130) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_get_json_response_2137_tree.go b/onshape/model_bt_get_json_response_2137_tree.go
index 140b6610c..1be30abeb 100644
--- a/onshape/model_bt_get_json_response_2137_tree.go
+++ b/onshape/model_bt_get_json_response_2137_tree.go
@@ -96,16 +96,20 @@ func (o BTGetJsonResponse2137Tree) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
-func (o *BTGetJsonResponse2137Tree) UnmarshalJSON(bytes []byte) (err error) {
+func (o *BTGetJsonResponse2137Tree) UnmarshalJSON(data []byte) (err error) {
 	varBTGetJsonResponse2137Tree := _BTGetJsonResponse2137Tree{}
 
-	if err = json.Unmarshal(bytes, &varBTGetJsonResponse2137Tree); err == nil {
-		*o = BTGetJsonResponse2137Tree(varBTGetJsonResponse2137Tree)
+	err = json.Unmarshal(data, &varBTGetJsonResponse2137Tree)
+
+	if err != nil {
+		return err
 	}
 
+	*o = BTGetJsonResponse2137Tree(varBTGetJsonResponse2137Tree)
+
 	additionalProperties := make(map[string]interface{})
 
-	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
+	if err = json.Unmarshal(data, &additionalProperties); err == nil {
 		delete(additionalProperties, "btType")
 		o.AdditionalProperties = additionalProperties
 	}
diff --git a/onshape/model_bt_global_tree_magic_node_info.go b/onshape/model_bt_global_tree_magic_node_info.go
index 501f83f2d..238c38406 100644
--- a/onshape/model_bt_global_tree_magic_node_info.go
+++ b/onshape/model_bt_global_tree_magic_node_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTGlobalTreeMagicNodeInfo type satisfies the MappedNullable interface at compile time
@@ -20,9 +22,12 @@ var _ MappedNullable = &BTGlobalTreeMagicNodeInfo{}
 
 // BTGlobalTreeMagicNodeInfo struct for BTGlobalTreeMagicNodeInfo
 type BTGlobalTreeMagicNodeInfo struct {
+	BTGlobalTreeNodeInfo
 	SubType *int32 `json:"subType,omitempty"`
 }
 
+type _BTGlobalTreeMagicNodeInfo BTGlobalTreeMagicNodeInfo
+
 // NewBTGlobalTreeMagicNodeInfo instantiates a new BTGlobalTreeMagicNodeInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -89,6 +94,43 @@ func (o BTGlobalTreeMagicNodeInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTGlobalTreeMagicNodeInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTGlobalTreeMagicNodeInfo := _BTGlobalTreeMagicNodeInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTGlobalTreeMagicNodeInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTGlobalTreeMagicNodeInfo(varBTGlobalTreeMagicNodeInfo)
+
+	return err
+}
+
 type NullableBTGlobalTreeMagicNodeInfo struct {
 	value *BTGlobalTreeMagicNodeInfo
 	isSet bool
diff --git a/onshape/model_bt_global_tree_node_info.go b/onshape/model_bt_global_tree_node_info.go
index e052519c8..bedbbbad1 100644
--- a/onshape/model_bt_global_tree_node_info.go
+++ b/onshape/model_bt_global_tree_node_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTGlobalTreeNodeInfo type satisfies the MappedNullable interface at compile time
@@ -45,6 +47,8 @@ type BTGlobalTreeNodeInfo struct {
 	ViewRef *string `json:"viewRef,omitempty"`
 }
 
+type _BTGlobalTreeNodeInfo BTGlobalTreeNodeInfo
+
 // NewBTGlobalTreeNodeInfo instantiates a new BTGlobalTreeNodeInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -731,6 +735,43 @@ func (o BTGlobalTreeNodeInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTGlobalTreeNodeInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTGlobalTreeNodeInfo := _BTGlobalTreeNodeInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTGlobalTreeNodeInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTGlobalTreeNodeInfo(varBTGlobalTreeNodeInfo)
+
+	return err
+}
+
 type NullableBTGlobalTreeNodeInfo struct {
 	value *BTGlobalTreeNodeInfo
 	isSet bool
diff --git a/onshape/model_bt_image_filter_853.go b/onshape/model_bt_image_filter_853.go
index 15c558789..efbcfef6e 100644
--- a/onshape/model_bt_image_filter_853.go
+++ b/onshape/model_bt_image_filter_853.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTImageFilter853{}
 
 // BTImageFilter853 struct for BTImageFilter853
 type BTImageFilter853 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType  *string `json:"btType,omitempty"`
-	IsImage *bool   `json:"isImage,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsImage *bool `json:"isImage,omitempty"`
 }
 
 // NewBTImageFilter853 instantiates a new BTImageFilter853 object
@@ -107,7 +108,7 @@ func (o *BTImageFilter853) SetIsImage(v bool) {
 }
 
 func (o BTImageFilter853) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTImageFilter853) MarshalJSON() ([]byte, error) {
 
 func (o BTImageFilter853) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTImageFilter853) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_inner_array_parameter_location_2368.go b/onshape/model_bt_inner_array_parameter_location_2368.go
index 093f802d7..e9066131f 100644
--- a/onshape/model_bt_inner_array_parameter_location_2368.go
+++ b/onshape/model_bt_inner_array_parameter_location_2368.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTInnerArrayParameterLocation2368{}
 
 // BTInnerArrayParameterLocation2368 struct for BTInnerArrayParameterLocation2368
 type BTInnerArrayParameterLocation2368 struct {
+	BTInnerParameterLocation-1715
 	// Type of JSON object.
-	BtType           *string `json:"btType,omitempty"`
-	Index            *int32  `json:"index,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Index *int32 `json:"index,omitempty"`
 	OuterParameterId *string `json:"outerParameterId,omitempty"`
 }
 
@@ -140,7 +141,7 @@ func (o *BTInnerArrayParameterLocation2368) SetOuterParameterId(v string) {
 }
 
 func (o BTInnerArrayParameterLocation2368) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTInnerArrayParameterLocation2368) MarshalJSON() ([]byte, error) {
 
 func (o BTInnerArrayParameterLocation2368) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTInnerParameterLocation1715, errBTInnerParameterLocation1715 := json.Marshal(o.BTInnerParameterLocation1715)
+	if errBTInnerParameterLocation1715 != nil {
+		return map[string]interface{}{}, errBTInnerParameterLocation1715
+	}
+	errBTInnerParameterLocation1715 = json.Unmarshal([]byte(serializedBTInnerParameterLocation1715), &toSerialize)
+	if errBTInnerParameterLocation1715 != nil {
+		return map[string]interface{}{}, errBTInnerParameterLocation1715
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTInnerArrayParameterLocation2368) UnmarshalJSON(src []byte) er
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_inner_derived_parameter_location_591.go b/onshape/model_bt_inner_derived_parameter_location_591.go
index d86b0a41c..1f39da24d 100644
--- a/onshape/model_bt_inner_derived_parameter_location_591.go
+++ b/onshape/model_bt_inner_derived_parameter_location_591.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTInnerDerivedParameterLocation591{}
 
 // BTInnerDerivedParameterLocation591 struct for BTInnerDerivedParameterLocation591
 type BTInnerDerivedParameterLocation591 struct {
+	BTInnerParameterLocation-1715
 	// Type of JSON object.
-	BtType           *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	OuterParameterId *string `json:"outerParameterId,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTInnerDerivedParameterLocation591) SetOuterParameterId(v string) {
 }
 
 func (o BTInnerDerivedParameterLocation591) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTInnerDerivedParameterLocation591) MarshalJSON() ([]byte, error) {
 
 func (o BTInnerDerivedParameterLocation591) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTInnerParameterLocation1715, errBTInnerParameterLocation1715 := json.Marshal(o.BTInnerParameterLocation1715)
+	if errBTInnerParameterLocation1715 != nil {
+		return map[string]interface{}{}, errBTInnerParameterLocation1715
+	}
+	errBTInnerParameterLocation1715 = json.Unmarshal([]byte(serializedBTInnerParameterLocation1715), &toSerialize)
+	if errBTInnerParameterLocation1715 != nil {
+		return map[string]interface{}{}, errBTInnerParameterLocation1715
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTInnerDerivedParameterLocation591) UnmarshalJSON(src []byte) e
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_instance_642.go b/onshape/model_bt_instance_642.go
index 9ea4d5ac4..2f842511d 100644
--- a/onshape/model_bt_instance_642.go
+++ b/onshape/model_bt_instance_642.go
@@ -20,22 +20,23 @@ var _ MappedNullable = &BTInstance642{}
 
 // BTInstance642 struct for BTInstance642
 type BTInstance642 struct {
+	BTInstanceBase-2263
 	// Type of JSON object.
-	BtType                                  *string                                     `json:"btType,omitempty"`
-	Configuration                           []BTMParameter1                             `json:"configuration,omitempty"`
-	Configured                              *bool                                       `json:"configured,omitempty"`
-	DocumentId                              *string                                     `json:"documentId,omitempty"`
-	ElementId                               *string                                     `json:"elementId,omitempty"`
-	ElementReference                        *BTElementReference725                      `json:"elementReference,omitempty"`
-	ExternalDocumentWithVersion             *BTDocumentWithVersionId                    `json:"externalDocumentWithVersion,omitempty"`
-	ExternalDocumentWithVersionAndElementId *BTDocumentWithVersionAndElementId          `json:"externalDocumentWithVersionAndElementId,omitempty"`
-	LockedState                             *BTMParameter1                              `json:"lockedState,omitempty"`
-	MicroversionId                          *BTMicroversionId366                        `json:"microversionId,omitempty"`
-	Name                                    *string                                     `json:"name,omitempty"`
-	Parameters                              []BTMParameter1                             `json:"parameters,omitempty"`
-	ReferenceParameter                      *BTMParameterReferenceWithConfiguration3028 `json:"referenceParameter,omitempty"`
-	VersionId                               *string                                     `json:"versionId,omitempty"`
-	VersionIdIfExternal                     *string                                     `json:"versionIdIfExternal,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Configuration []BTMParameter1 `json:"configuration,omitempty"`
+	Configured *bool `json:"configured,omitempty"`
+	DocumentId *string `json:"documentId,omitempty"`
+	ElementId *string `json:"elementId,omitempty"`
+	ElementReference *BTElementReference725 `json:"elementReference,omitempty"`
+	ExternalDocumentWithVersion *BTDocumentWithVersionId `json:"externalDocumentWithVersion,omitempty"`
+	ExternalDocumentWithVersionAndElementId *BTDocumentWithVersionAndElementId `json:"externalDocumentWithVersionAndElementId,omitempty"`
+	LockedState *BTMParameter1 `json:"lockedState,omitempty"`
+	MicroversionId *BTMicroversionId366 `json:"microversionId,omitempty"`
+	Name *string `json:"name,omitempty"`
+	Parameters []BTMParameter1 `json:"parameters,omitempty"`
+	ReferenceParameter *BTMParameterReferenceWithConfiguration3028 `json:"referenceParameter,omitempty"`
+	VersionId *string `json:"versionId,omitempty"`
+	VersionIdIfExternal *string `json:"versionIdIfExternal,omitempty"`
 }
 
 // NewBTInstance642 instantiates a new BTInstance642 object
@@ -536,7 +537,7 @@ func (o *BTInstance642) SetVersionIdIfExternal(v string) {
 }
 
 func (o BTInstance642) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -545,6 +546,14 @@ func (o BTInstance642) MarshalJSON() ([]byte, error) {
 
 func (o BTInstance642) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTInstanceBase2263, errBTInstanceBase2263 := json.Marshal(o.BTInstanceBase2263)
+	if errBTInstanceBase2263 != nil {
+		return map[string]interface{}{}, errBTInstanceBase2263
+	}
+	errBTInstanceBase2263 = json.Unmarshal([]byte(serializedBTInstanceBase2263), &toSerialize)
+	if errBTInstanceBase2263 != nil {
+		return map[string]interface{}{}, errBTInstanceBase2263
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -628,3 +637,5 @@ func (v *NullableBTInstance642) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_instance_base_2263.go b/onshape/model_bt_instance_base_2263.go
index 8ac401830..170fe20f6 100644
--- a/onshape/model_bt_instance_base_2263.go
+++ b/onshape/model_bt_instance_base_2263.go
@@ -20,33 +20,34 @@ var _ MappedNullable = &BTInstanceBase2263{}
 
 // BTInstanceBase2263 struct for BTInstanceBase2263
 type BTInstanceBase2263 struct {
+	BTMNode-19
 	// Type of JSON object.
-	BtType                            *string                               `json:"btType,omitempty"`
-	AssemblyInstance                  *bool                                 `json:"assemblyInstance,omitempty"`
-	AssemblyPattern                   *bool                                 `json:"assemblyPattern,omitempty"`
-	AssemblyReplicate                 *bool                                 `json:"assemblyReplicate,omitempty"`
-	ClonedInstance                    *bool                                 `json:"clonedInstance,omitempty"`
-	CustomData                        *map[string]BTReferenceCustomData1551 `json:"customData,omitempty"`
-	InstanceFolder                    *bool                                 `json:"instanceFolder,omitempty"`
-	InstanceName                      *string                               `json:"instanceName,omitempty"`
-	IsFlattenedPart                   *bool                                 `json:"isFlattenedPart,omitempty"`
-	Locked                            *bool                                 `json:"locked,omitempty"`
-	ParametricInstance                *bool                                 `json:"parametricInstance,omitempty"`
-	ParametricOutputInstance          *bool                                 `json:"parametricOutputInstance,omitempty"`
-	ParametricPartStudioChildInstance *bool                                 `json:"parametricPartStudioChildInstance,omitempty"`
-	ParametricPartStudioInstance      *bool                                 `json:"parametricPartStudioInstance,omitempty"`
-	PartInstance                      *bool                                 `json:"partInstance,omitempty"`
-	Releasable                        *bool                                 `json:"releasable,omitempty"`
-	RevisionCustomData                *BTRevisionCustomData2090             `json:"revisionCustomData,omitempty"`
-	StandardContent                   *bool                                 `json:"standardContent,omitempty"`
-	StandardContentParametersId       *string                               `json:"standardContentParametersId,omitempty"`
-	Suppressed                        *bool                                 `json:"suppressed,omitempty"`
-	SuppressedFieldIndex              *int32                                `json:"suppressedFieldIndex,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	AssemblyInstance *bool `json:"assemblyInstance,omitempty"`
+	AssemblyPattern *bool `json:"assemblyPattern,omitempty"`
+	AssemblyReplicate *bool `json:"assemblyReplicate,omitempty"`
+	ClonedInstance *bool `json:"clonedInstance,omitempty"`
+	CustomData *map[string]BTReferenceCustomData1551 `json:"customData,omitempty"`
+	InstanceFolder *bool `json:"instanceFolder,omitempty"`
+	InstanceName *string `json:"instanceName,omitempty"`
+	IsFlattenedPart *bool `json:"isFlattenedPart,omitempty"`
+	Locked *bool `json:"locked,omitempty"`
+	ParametricInstance *bool `json:"parametricInstance,omitempty"`
+	ParametricOutputInstance *bool `json:"parametricOutputInstance,omitempty"`
+	ParametricPartStudioChildInstance *bool `json:"parametricPartStudioChildInstance,omitempty"`
+	ParametricPartStudioInstance *bool `json:"parametricPartStudioInstance,omitempty"`
+	PartInstance *bool `json:"partInstance,omitempty"`
+	Releasable *bool `json:"releasable,omitempty"`
+	RevisionCustomData *BTRevisionCustomData2090 `json:"revisionCustomData,omitempty"`
+	StandardContent *bool `json:"standardContent,omitempty"`
+	StandardContentParametersId *string `json:"standardContentParametersId,omitempty"`
+	Suppressed *bool `json:"suppressed,omitempty"`
+	SuppressedFieldIndex *int32 `json:"suppressedFieldIndex,omitempty"`
 	// `true` if the suppression is configured in the Part Studio.
-	SuppressionConfigured  *bool                    `json:"suppressionConfigured,omitempty"`
-	SuppressionState       *BTMSuppressionState1924 `json:"suppressionState,omitempty"`
-	ValidRevisionReference *bool                    `json:"validRevisionReference,omitempty"`
-	Version                *int32                   `json:"version,omitempty"`
+	SuppressionConfigured *bool `json:"suppressionConfigured,omitempty"`
+	SuppressionState *BTMSuppressionState1924 `json:"suppressionState,omitempty"`
+	ValidRevisionReference *bool `json:"validRevisionReference,omitempty"`
+	Version *int32 `json:"version,omitempty"`
 }
 
 // NewBTInstanceBase2263 instantiates a new BTInstanceBase2263 object
@@ -867,7 +868,7 @@ func (o *BTInstanceBase2263) SetVersion(v int32) {
 }
 
 func (o BTInstanceBase2263) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -876,6 +877,14 @@ func (o BTInstanceBase2263) MarshalJSON() ([]byte, error) {
 
 func (o BTInstanceBase2263) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMNode19, errBTMNode19 := json.Marshal(o.BTMNode19)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
+	errBTMNode19 = json.Unmarshal([]byte(serializedBTMNode19), &toSerialize)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -989,3 +998,5 @@ func (v *NullableBTInstanceBase2263) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_instance_control_node_750.go b/onshape/model_bt_instance_control_node_750.go
index 564c4bae7..f59759719 100644
--- a/onshape/model_bt_instance_control_node_750.go
+++ b/onshape/model_bt_instance_control_node_750.go
@@ -20,13 +20,14 @@ var _ MappedNullable = &BTInstanceControlNode750{}
 
 // BTInstanceControlNode750 struct for BTInstanceControlNode750
 type BTInstanceControlNode750 struct {
+	BTMNode-19
 	// Type of JSON object.
-	BtType               *string `json:"btType,omitempty"`
-	Suppressed           *bool   `json:"suppressed,omitempty"`
-	SuppressedFieldIndex *int32  `json:"suppressedFieldIndex,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Suppressed *bool `json:"suppressed,omitempty"`
+	SuppressedFieldIndex *int32 `json:"suppressedFieldIndex,omitempty"`
 	// `true` if the suppression is configured in the Part Studio.
-	SuppressionConfigured *bool                    `json:"suppressionConfigured,omitempty"`
-	SuppressionState      *BTMSuppressionState1924 `json:"suppressionState,omitempty"`
+	SuppressionConfigured *bool `json:"suppressionConfigured,omitempty"`
+	SuppressionState *BTMSuppressionState1924 `json:"suppressionState,omitempty"`
 }
 
 // NewBTInstanceControlNode750 instantiates a new BTInstanceControlNode750 object
@@ -207,7 +208,7 @@ func (o *BTInstanceControlNode750) SetSuppressionState(v BTMSuppressionState1924
 }
 
 func (o BTInstanceControlNode750) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -216,6 +217,14 @@ func (o BTInstanceControlNode750) MarshalJSON() ([]byte, error) {
 
 func (o BTInstanceControlNode750) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMNode19, errBTMNode19 := json.Marshal(o.BTMNode19)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
+	errBTMNode19 = json.Unmarshal([]byte(serializedBTMNode19), &toSerialize)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -269,3 +278,5 @@ func (v *NullableBTInstanceControlNode750) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_instance_folder_3627.go b/onshape/model_bt_instance_folder_3627.go
index 185223bbc..39e4625fd 100644
--- a/onshape/model_bt_instance_folder_3627.go
+++ b/onshape/model_bt_instance_folder_3627.go
@@ -20,15 +20,16 @@ var _ MappedNullable = &BTInstanceFolder3627{}
 
 // BTInstanceFolder3627 struct for BTInstanceFolder3627
 type BTInstanceFolder3627 struct {
+	BTInstanceBase-2263
 	// Type of JSON object.
-	BtType         *string         `json:"btType,omitempty"`
-	FeatureFolder  *bool           `json:"featureFolder,omitempty"`
-	FolderEnd      *bool           `json:"folderEnd,omitempty"`
-	FolderStart    *bool           `json:"folderStart,omitempty"`
-	Name           *string         `json:"name,omitempty"`
-	Parameters     []BTMParameter1 `json:"parameters,omitempty"`
-	StartNodeId    *string         `json:"startNodeId,omitempty"`
-	StartNodeIdRaw *BTObjectId     `json:"startNodeIdRaw,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	FeatureFolder *bool `json:"featureFolder,omitempty"`
+	FolderEnd *bool `json:"folderEnd,omitempty"`
+	FolderStart *bool `json:"folderStart,omitempty"`
+	Name *string `json:"name,omitempty"`
+	Parameters []BTMParameter1 `json:"parameters,omitempty"`
+	StartNodeId *string `json:"startNodeId,omitempty"`
+	StartNodeIdRaw *BTObjectId `json:"startNodeIdRaw,omitempty"`
 }
 
 // NewBTInstanceFolder3627 instantiates a new BTInstanceFolder3627 object
@@ -305,7 +306,7 @@ func (o *BTInstanceFolder3627) SetStartNodeIdRaw(v BTObjectId) {
 }
 
 func (o BTInstanceFolder3627) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -314,6 +315,14 @@ func (o BTInstanceFolder3627) MarshalJSON() ([]byte, error) {
 
 func (o BTInstanceFolder3627) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTInstanceBase2263, errBTInstanceBase2263 := json.Marshal(o.BTInstanceBase2263)
+	if errBTInstanceBase2263 != nil {
+		return map[string]interface{}{}, errBTInstanceBase2263
+	}
+	errBTInstanceBase2263 = json.Unmarshal([]byte(serializedBTInstanceBase2263), &toSerialize)
+	if errBTInstanceBase2263 != nil {
+		return map[string]interface{}{}, errBTInstanceBase2263
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -376,3 +385,5 @@ func (v *NullableBTInstanceFolder3627) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_instance_standard_content_data_2081.go b/onshape/model_bt_instance_standard_content_data_2081.go
index c891e85af..501b7d602 100644
--- a/onshape/model_bt_instance_standard_content_data_2081.go
+++ b/onshape/model_bt_instance_standard_content_data_2081.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTInstanceStandardContentData2081{}
 
 // BTInstanceStandardContentData2081 struct for BTInstanceStandardContentData2081
 type BTInstanceStandardContentData2081 struct {
+	BTReferenceCustomData-1551
 	// Type of JSON object.
-	BtType       *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	ParametersId *string `json:"parametersId,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTInstanceStandardContentData2081) SetParametersId(v string) {
 }
 
 func (o BTInstanceStandardContentData2081) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTInstanceStandardContentData2081) MarshalJSON() ([]byte, error) {
 
 func (o BTInstanceStandardContentData2081) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTReferenceCustomData1551, errBTReferenceCustomData1551 := json.Marshal(o.BTReferenceCustomData1551)
+	if errBTReferenceCustomData1551 != nil {
+		return map[string]interface{}{}, errBTReferenceCustomData1551
+	}
+	errBTReferenceCustomData1551 = json.Unmarshal([]byte(serializedBTReferenceCustomData1551), &toSerialize)
+	if errBTReferenceCustomData1551 != nil {
+		return map[string]interface{}{}, errBTReferenceCustomData1551
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTInstanceStandardContentData2081) UnmarshalJSON(src []byte) er
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_json_match_2290.go b/onshape/model_bt_json_match_2290.go
index d820caf09..04cd8c057 100644
--- a/onshape/model_bt_json_match_2290.go
+++ b/onshape/model_bt_json_match_2290.go
@@ -21,9 +21,9 @@ var _ MappedNullable = &BTJsonMatch2290{}
 // BTJsonMatch2290 struct for BTJsonMatch2290
 type BTJsonMatch2290 struct {
 	// Type of JSON object.
-	BtType           *string                      `json:"btType,omitempty"`
-	DefiniteJsonPath *string                      `json:"definiteJsonPath,omitempty"`
-	Node             *BTDiffJsonResponse2725Patch `json:"node,omitempty"`
+	BtType           *string                                   `json:"btType,omitempty"`
+	DefiniteJsonPath *string                                   `json:"definiteJsonPath,omitempty"`
+	Node             *BTArcLengthDimensionDisplayData1018AllOf `json:"node,omitempty"`
 }
 
 // NewBTJsonMatch2290 instantiates a new BTJsonMatch2290 object
@@ -108,9 +108,9 @@ func (o *BTJsonMatch2290) SetDefiniteJsonPath(v string) {
 }
 
 // GetNode returns the Node field value if set, zero value otherwise.
-func (o *BTJsonMatch2290) GetNode() BTDiffJsonResponse2725Patch {
+func (o *BTJsonMatch2290) GetNode() BTArcLengthDimensionDisplayData1018AllOf {
 	if o == nil || IsNil(o.Node) {
-		var ret BTDiffJsonResponse2725Patch
+		var ret BTArcLengthDimensionDisplayData1018AllOf
 		return ret
 	}
 	return *o.Node
@@ -118,7 +118,7 @@ func (o *BTJsonMatch2290) GetNode() BTDiffJsonResponse2725Patch {
 
 // GetNodeOk returns a tuple with the Node field value if set, nil otherwise
 // and a boolean to check if the value has been set.
-func (o *BTJsonMatch2290) GetNodeOk() (*BTDiffJsonResponse2725Patch, bool) {
+func (o *BTJsonMatch2290) GetNodeOk() (*BTArcLengthDimensionDisplayData1018AllOf, bool) {
 	if o == nil || IsNil(o.Node) {
 		return nil, false
 	}
@@ -134,8 +134,8 @@ func (o *BTJsonMatch2290) HasNode() bool {
 	return false
 }
 
-// SetNode gets a reference to the given BTDiffJsonResponse2725Patch and assigns it to the Node field.
-func (o *BTJsonMatch2290) SetNode(v BTDiffJsonResponse2725Patch) {
+// SetNode gets a reference to the given BTArcLengthDimensionDisplayData1018AllOf and assigns it to the Node field.
+func (o *BTJsonMatch2290) SetNode(v BTArcLengthDimensionDisplayData1018AllOf) {
 	o.Node = &v
 }
 
diff --git a/onshape/model_bt_line_description_1559.go b/onshape/model_bt_line_description_1559.go
index 05a790d8b..a425b2c9d 100644
--- a/onshape/model_bt_line_description_1559.go
+++ b/onshape/model_bt_line_description_1559.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTLineDescription1559{}
 
 // BTLineDescription1559 struct for BTLineDescription1559
 type BTLineDescription1559 struct {
+	BTCurveDescription-1583
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTLineDescription1559) SetBtType(v string) {
 }
 
 func (o BTLineDescription1559) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTLineDescription1559) MarshalJSON() ([]byte, error) {
 
 func (o BTLineDescription1559) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTCurveDescription1583, errBTCurveDescription1583 := json.Marshal(o.BTCurveDescription1583)
+	if errBTCurveDescription1583 != nil {
+		return map[string]interface{}{}, errBTCurveDescription1583
+	}
+	errBTCurveDescription1583 = json.Unmarshal([]byte(serializedBTCurveDescription1583), &toSerialize)
+	if errBTCurveDescription1583 != nil {
+		return map[string]interface{}{}, errBTCurveDescription1583
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTLineDescription1559) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_linear_dimension_display_data_330.go b/onshape/model_bt_linear_dimension_display_data_330.go
index 79cfba6de..8bdf6ad99 100644
--- a/onshape/model_bt_linear_dimension_display_data_330.go
+++ b/onshape/model_bt_linear_dimension_display_data_330.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTLinearDimensionDisplayData330{}
 
 // BTLinearDimensionDisplayData330 struct for BTLinearDimensionDisplayData330
 type BTLinearDimensionDisplayData330 struct {
+	BTDimensionDisplayData-323
 	// Type of JSON object.
-	BtType            *string  `json:"btType,omitempty"`
-	PositionX         *float64 `json:"positionX,omitempty"`
-	PositionY         *float64 `json:"positionY,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	PositionX *float64 `json:"positionX,omitempty"`
+	PositionY *float64 `json:"positionY,omitempty"`
 	WitnessEndPoint0X *float64 `json:"witnessEndPoint0X,omitempty"`
 	WitnessEndPoint0Y *float64 `json:"witnessEndPoint0Y,omitempty"`
 	WitnessEndPoint1X *float64 `json:"witnessEndPoint1X,omitempty"`
@@ -272,7 +273,7 @@ func (o *BTLinearDimensionDisplayData330) SetWitnessEndPoint1Y(v float64) {
 }
 
 func (o BTLinearDimensionDisplayData330) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -281,6 +282,14 @@ func (o BTLinearDimensionDisplayData330) MarshalJSON() ([]byte, error) {
 
 func (o BTLinearDimensionDisplayData330) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTDimensionDisplayData323, errBTDimensionDisplayData323 := json.Marshal(o.BTDimensionDisplayData323)
+	if errBTDimensionDisplayData323 != nil {
+		return map[string]interface{}{}, errBTDimensionDisplayData323
+	}
+	errBTDimensionDisplayData323 = json.Unmarshal([]byte(serializedBTDimensionDisplayData323), &toSerialize)
+	if errBTDimensionDisplayData323 != nil {
+		return map[string]interface{}{}, errBTDimensionDisplayData323
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -340,3 +349,5 @@ func (v *NullableBTLinearDimensionDisplayData330) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_mate_connector_entity_28.go b/onshape/model_bt_mate_connector_entity_28.go
index beb8c388d..5637ae363 100644
--- a/onshape/model_bt_mate_connector_entity_28.go
+++ b/onshape/model_bt_mate_connector_entity_28.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTMateConnectorEntity28{}
 
 // BTMateConnectorEntity28 struct for BTMateConnectorEntity28
 type BTMateConnectorEntity28 struct {
+	BTFeatureEntity-34
 	// Type of JSON object.
-	BtType           *string                `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	CoordinateSystem *BTCoordinateSystem387 `json:"coordinateSystem,omitempty"`
-	PartId           *string                `json:"partId,omitempty"`
+	PartId *string `json:"partId,omitempty"`
 }
 
 // NewBTMateConnectorEntity28 instantiates a new BTMateConnectorEntity28 object
@@ -140,7 +141,7 @@ func (o *BTMateConnectorEntity28) SetPartId(v string) {
 }
 
 func (o BTMateConnectorEntity28) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTMateConnectorEntity28) MarshalJSON() ([]byte, error) {
 
 func (o BTMateConnectorEntity28) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFeatureEntity34, errBTFeatureEntity34 := json.Marshal(o.BTFeatureEntity34)
+	if errBTFeatureEntity34 != nil {
+		return map[string]interface{}{}, errBTFeatureEntity34
+	}
+	errBTFeatureEntity34 = json.Unmarshal([]byte(serializedBTFeatureEntity34), &toSerialize)
+	if errBTFeatureEntity34 != nil {
+		return map[string]interface{}{}, errBTFeatureEntity34
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTMateConnectorEntity28) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_mate_connector_filter_163.go b/onshape/model_bt_mate_connector_filter_163.go
index 12b5947c2..af979a2cd 100644
--- a/onshape/model_bt_mate_connector_filter_163.go
+++ b/onshape/model_bt_mate_connector_filter_163.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTMateConnectorFilter163{}
 
 // BTMateConnectorFilter163 struct for BTMateConnectorFilter163
 type BTMateConnectorFilter163 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType             *string `json:"btType,omitempty"`
-	RequiresOccurrence *bool   `json:"requiresOccurrence,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	RequiresOccurrence *bool `json:"requiresOccurrence,omitempty"`
 }
 
 // NewBTMateConnectorFilter163 instantiates a new BTMateConnectorFilter163 object
@@ -107,7 +108,7 @@ func (o *BTMateConnectorFilter163) SetRequiresOccurrence(v bool) {
 }
 
 func (o BTMateConnectorFilter163) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMateConnectorFilter163) MarshalJSON() ([]byte, error) {
 
 func (o BTMateConnectorFilter163) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMateConnectorFilter163) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_mate_filter_162.go b/onshape/model_bt_mate_filter_162.go
index b9cab29df..7c834c7c2 100644
--- a/onshape/model_bt_mate_filter_162.go
+++ b/onshape/model_bt_mate_filter_162.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTMateFilter162{}
 
 // BTMateFilter162 struct for BTMateFilter162
 type BTMateFilter162 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType               *string `json:"btType,omitempty"`
-	RequireMateQueryData *bool   `json:"requireMateQueryData,omitempty"`
-	TopLevelMateOnly     *bool   `json:"topLevelMateOnly,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	RequireMateQueryData *bool `json:"requireMateQueryData,omitempty"`
+	TopLevelMateOnly *bool `json:"topLevelMateOnly,omitempty"`
 }
 
 // NewBTMateFilter162 instantiates a new BTMateFilter162 object
@@ -140,7 +141,7 @@ func (o *BTMateFilter162) SetTopLevelMateOnly(v bool) {
 }
 
 func (o BTMateFilter162) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTMateFilter162) MarshalJSON() ([]byte, error) {
 
 func (o BTMateFilter162) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTMateFilter162) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_mate_occurrence_data_1671.go b/onshape/model_bt_mate_occurrence_data_1671.go
index cf9adbd18..4e1e5db59 100644
--- a/onshape/model_bt_mate_occurrence_data_1671.go
+++ b/onshape/model_bt_mate_occurrence_data_1671.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTMateOccurrenceData1671{}
 
 // BTMateOccurrenceData1671 struct for BTMateOccurrenceData1671
 type BTMateOccurrenceData1671 struct {
+	BTFeatureOccurrenceData-775
 	// Type of JSON object.
-	BtType   *string             `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	ValueMap *map[string]float64 `json:"valueMap,omitempty"`
-	Values   []float64           `json:"values,omitempty"`
+	Values []float64 `json:"values,omitempty"`
 }
 
 // NewBTMateOccurrenceData1671 instantiates a new BTMateOccurrenceData1671 object
@@ -140,7 +141,7 @@ func (o *BTMateOccurrenceData1671) SetValues(v []float64) {
 }
 
 func (o BTMateOccurrenceData1671) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTMateOccurrenceData1671) MarshalJSON() ([]byte, error) {
 
 func (o BTMateOccurrenceData1671) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFeatureOccurrenceData775, errBTFeatureOccurrenceData775 := json.Marshal(o.BTFeatureOccurrenceData775)
+	if errBTFeatureOccurrenceData775 != nil {
+		return map[string]interface{}{}, errBTFeatureOccurrenceData775
+	}
+	errBTFeatureOccurrenceData775 = json.Unmarshal([]byte(serializedBTFeatureOccurrenceData775), &toSerialize)
+	if errBTFeatureOccurrenceData775 != nil {
+		return map[string]interface{}{}, errBTFeatureOccurrenceData775
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTMateOccurrenceData1671) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_metadata_element_info.go b/onshape/model_bt_metadata_element_info.go
index fb33eb8b1..5838a3854 100644
--- a/onshape/model_bt_metadata_element_info.go
+++ b/onshape/model_bt_metadata_element_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTMetadataElementInfo type satisfies the MappedNullable interface at compile time
@@ -20,12 +22,15 @@ var _ MappedNullable = &BTMetadataElementInfo{}
 
 // BTMetadataElementInfo struct for BTMetadataElementInfo
 type BTMetadataElementInfo struct {
+	BTMetadataObjectInfo
 	ElementId   *string                                     `json:"elementId,omitempty"`
 	ElementType *int32                                      `json:"elementType,omitempty"`
 	MimeType    *string                                     `json:"mimeType,omitempty"`
 	Parts       *BTMetadataObjectListInfoBTMetadataPartInfo `json:"parts,omitempty"`
 }
 
+type _BTMetadataElementInfo BTMetadataElementInfo
+
 // NewBTMetadataElementInfo instantiates a new BTMetadataElementInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -197,6 +202,43 @@ func (o BTMetadataElementInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTMetadataElementInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTMetadataElementInfo := _BTMetadataElementInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTMetadataElementInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTMetadataElementInfo(varBTMetadataElementInfo)
+
+	return err
+}
+
 type NullableBTMetadataElementInfo struct {
 	value *BTMetadataElementInfo
 	isSet bool
diff --git a/onshape/model_bt_metadata_object_info.go b/onshape/model_bt_metadata_object_info.go
index 08a18ef2f..d1f71039c 100644
--- a/onshape/model_bt_metadata_object_info.go
+++ b/onshape/model_bt_metadata_object_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTMetadataObjectInfo type satisfies the MappedNullable interface at compile time
@@ -26,6 +28,8 @@ type BTMetadataObjectInfo struct {
 	Thumbnail  *BTThumbnailInfo         `json:"thumbnail,omitempty"`
 }
 
+type _BTMetadataObjectInfo BTMetadataObjectInfo
+
 // NewBTMetadataObjectInfo instantiates a new BTMetadataObjectInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -187,6 +191,43 @@ func (o BTMetadataObjectInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTMetadataObjectInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTMetadataObjectInfo := _BTMetadataObjectInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTMetadataObjectInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTMetadataObjectInfo(varBTMetadataObjectInfo)
+
+	return err
+}
+
 type NullableBTMetadataObjectInfo struct {
 	value *BTMetadataObjectInfo
 	isSet bool
diff --git a/onshape/model_bt_metadata_part_info.go b/onshape/model_bt_metadata_part_info.go
index 774791169..07a6293f7 100644
--- a/onshape/model_bt_metadata_part_info.go
+++ b/onshape/model_bt_metadata_part_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTMetadataPartInfo type satisfies the MappedNullable interface at compile time
@@ -20,6 +22,7 @@ var _ MappedNullable = &BTMetadataPartInfo{}
 
 // BTMetadataPartInfo struct for BTMetadataPartInfo
 type BTMetadataPartInfo struct {
+	BTMetadataObjectInfo
 	IsFlattenedBody *bool   `json:"isFlattenedBody,omitempty"`
 	MeshState       *int32  `json:"meshState,omitempty"`
 	PartId          *string `json:"partId,omitempty"`
@@ -27,6 +30,8 @@ type BTMetadataPartInfo struct {
 	PartType        *string `json:"partType,omitempty"`
 }
 
+type _BTMetadataPartInfo BTMetadataPartInfo
+
 // NewBTMetadataPartInfo instantiates a new BTMetadataPartInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -233,6 +238,43 @@ func (o BTMetadataPartInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTMetadataPartInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTMetadataPartInfo := _BTMetadataPartInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTMetadataPartInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTMetadataPartInfo(varBTMetadataPartInfo)
+
+	return err
+}
+
 type NullableBTMetadataPartInfo struct {
 	value *BTMetadataPartInfo
 	isSet bool
diff --git a/onshape/model_bt_metadata_property_info.go b/onshape/model_bt_metadata_property_info.go
index 2841ca703..1acfc0927 100644
--- a/onshape/model_bt_metadata_property_info.go
+++ b/onshape/model_bt_metadata_property_info.go
@@ -210,7 +210,7 @@ func (o *BTMetadataPropertyInfo) GetDefaultValueOk() (*interface{}, bool) {
 
 // HasDefaultValue returns a boolean if a field has been set.
 func (o *BTMetadataPropertyInfo) HasDefaultValue() bool {
-	if o != nil && IsNil(o.DefaultValue) {
+	if o != nil && !IsNil(o.DefaultValue) {
 		return true
 	}
 
@@ -691,7 +691,7 @@ func (o *BTMetadataPropertyInfo) GetValueOk() (*interface{}, bool) {
 
 // HasValue returns a boolean if a field has been set.
 func (o *BTMetadataPropertyInfo) HasValue() bool {
-	if o != nil && IsNil(o.Value) {
+	if o != nil && !IsNil(o.Value) {
 		return true
 	}
 
diff --git a/onshape/model_bt_modifiable_entity_only_filter_1593.go b/onshape/model_bt_modifiable_entity_only_filter_1593.go
index 3f09af3ad..3117c1486 100644
--- a/onshape/model_bt_modifiable_entity_only_filter_1593.go
+++ b/onshape/model_bt_modifiable_entity_only_filter_1593.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTModifiableEntityOnlyFilter1593{}
 
 // BTModifiableEntityOnlyFilter1593 struct for BTModifiableEntityOnlyFilter1593
 type BTModifiableEntityOnlyFilter1593 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType         *string `json:"btType,omitempty"`
-	ModifiableOnly *bool   `json:"modifiableOnly,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	ModifiableOnly *bool `json:"modifiableOnly,omitempty"`
 }
 
 // NewBTModifiableEntityOnlyFilter1593 instantiates a new BTModifiableEntityOnlyFilter1593 object
@@ -107,7 +108,7 @@ func (o *BTModifiableEntityOnlyFilter1593) SetModifiableOnly(v bool) {
 }
 
 func (o BTModifiableEntityOnlyFilter1593) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTModifiableEntityOnlyFilter1593) MarshalJSON() ([]byte, error) {
 
 func (o BTModifiableEntityOnlyFilter1593) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTModifiableEntityOnlyFilter1593) UnmarshalJSON(src []byte) err
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_named_position_values_column_info_816.go b/onshape/model_bt_named_position_values_column_info_816.go
index 3b3a932b2..0b81e28ae 100644
--- a/onshape/model_bt_named_position_values_column_info_816.go
+++ b/onshape/model_bt_named_position_values_column_info_816.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTNamedPositionValuesColumnInfo816{}
 
 // BTNamedPositionValuesColumnInfo816 struct for BTNamedPositionValuesColumnInfo816
 type BTNamedPositionValuesColumnInfo816 struct {
+	BTTableColumnInfo-1222
 	// Type of JSON object.
-	BtType         *string `json:"btType,omitempty"`
-	ColumnHasError *bool   `json:"columnHasError,omitempty"`
-	ParameterId    *string `json:"parameterId,omitempty"`
-	ParentId       *string `json:"parentId,omitempty"`
-	ParentName     *string `json:"parentName,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	ColumnHasError *bool `json:"columnHasError,omitempty"`
+	ParameterId *string `json:"parameterId,omitempty"`
+	ParentId *string `json:"parentId,omitempty"`
+	ParentName *string `json:"parentName,omitempty"`
 }
 
 // NewBTNamedPositionValuesColumnInfo816 instantiates a new BTNamedPositionValuesColumnInfo816 object
@@ -206,7 +207,7 @@ func (o *BTNamedPositionValuesColumnInfo816) SetParentName(v string) {
 }
 
 func (o BTNamedPositionValuesColumnInfo816) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTNamedPositionValuesColumnInfo816) MarshalJSON() ([]byte, error) {
 
 func (o BTNamedPositionValuesColumnInfo816) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableColumnInfo1222, errBTTableColumnInfo1222 := json.Marshal(o.BTTableColumnInfo1222)
+	if errBTTableColumnInfo1222 != nil {
+		return map[string]interface{}{}, errBTTableColumnInfo1222
+	}
+	errBTTableColumnInfo1222 = json.Unmarshal([]byte(serializedBTTableColumnInfo1222), &toSerialize)
+	if errBTTableColumnInfo1222 != nil {
+		return map[string]interface{}{}, errBTTableColumnInfo1222
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTNamedPositionValuesColumnInfo816) UnmarshalJSON(src []byte) e
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_non_aligned_bounding_box_4180.go b/onshape/model_bt_non_aligned_bounding_box_4180.go
index 7ea8739aa..49991e06d 100644
--- a/onshape/model_bt_non_aligned_bounding_box_4180.go
+++ b/onshape/model_bt_non_aligned_bounding_box_4180.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTNonAlignedBoundingBox4180{}
 
 // BTNonAlignedBoundingBox4180 struct for BTNonAlignedBoundingBox4180
 type BTNonAlignedBoundingBox4180 struct {
+	BTBoundingBox-1052
 	// Type of JSON object.
-	BtType           *string                `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	CoordinateSystem *BTCoordinateSystem387 `json:"coordinateSystem,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTNonAlignedBoundingBox4180) SetCoordinateSystem(v BTCoordinateSystem38
 }
 
 func (o BTNonAlignedBoundingBox4180) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTNonAlignedBoundingBox4180) MarshalJSON() ([]byte, error) {
 
 func (o BTNonAlignedBoundingBox4180) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTBoundingBox1052, errBTBoundingBox1052 := json.Marshal(o.BTBoundingBox1052)
+	if errBTBoundingBox1052 != nil {
+		return map[string]interface{}{}, errBTBoundingBox1052
+	}
+	errBTBoundingBox1052 = json.Unmarshal([]byte(serializedBTBoundingBox1052), &toSerialize)
+	if errBTBoundingBox1052 != nil {
+		return map[string]interface{}{}, errBTBoundingBox1052
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTNonAlignedBoundingBox4180) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_not_filter_165.go b/onshape/model_bt_not_filter_165.go
index 3adc965df..5630c762e 100644
--- a/onshape/model_bt_not_filter_165.go
+++ b/onshape/model_bt_not_filter_165.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTNotFilter165{}
 
 // BTNotFilter165 struct for BTNotFilter165
 type BTNotFilter165 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType  *string           `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Operand *BTQueryFilter183 `json:"operand,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTNotFilter165) SetOperand(v BTQueryFilter183) {
 }
 
 func (o BTNotFilter165) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTNotFilter165) MarshalJSON() ([]byte, error) {
 
 func (o BTNotFilter165) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTNotFilter165) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_nullable_quantity_range_1340.go b/onshape/model_bt_nullable_quantity_range_1340.go
index 99323416a..470026146 100644
--- a/onshape/model_bt_nullable_quantity_range_1340.go
+++ b/onshape/model_bt_nullable_quantity_range_1340.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTNullableQuantityRange1340{}
 
 // BTNullableQuantityRange1340 struct for BTNullableQuantityRange1340
 type BTNullableQuantityRange1340 struct {
+	BTQuantityRange-181
 	// Type of JSON object.
-	BtType          *string `json:"btType,omitempty"`
-	HasDefaultValue *bool   `json:"hasDefaultValue,omitempty"`
-	HasMaxValue     *bool   `json:"hasMaxValue,omitempty"`
-	HasMinValue     *bool   `json:"hasMinValue,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	HasDefaultValue *bool `json:"hasDefaultValue,omitempty"`
+	HasMaxValue *bool `json:"hasMaxValue,omitempty"`
+	HasMinValue *bool `json:"hasMinValue,omitempty"`
 }
 
 // NewBTNullableQuantityRange1340 instantiates a new BTNullableQuantityRange1340 object
@@ -173,7 +174,7 @@ func (o *BTNullableQuantityRange1340) SetHasMinValue(v bool) {
 }
 
 func (o BTNullableQuantityRange1340) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTNullableQuantityRange1340) MarshalJSON() ([]byte, error) {
 
 func (o BTNullableQuantityRange1340) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQuantityRange181, errBTQuantityRange181 := json.Marshal(o.BTQuantityRange181)
+	if errBTQuantityRange181 != nil {
+		return map[string]interface{}{}, errBTQuantityRange181
+	}
+	errBTQuantityRange181 = json.Unmarshal([]byte(serializedBTQuantityRange181), &toSerialize)
+	if errBTQuantityRange181 != nil {
+		return map[string]interface{}{}, errBTQuantityRange181
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTNullableQuantityRange1340) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_occurrence_filter_166.go b/onshape/model_bt_occurrence_filter_166.go
index 148cd882d..dde4dde7f 100644
--- a/onshape/model_bt_occurrence_filter_166.go
+++ b/onshape/model_bt_occurrence_filter_166.go
@@ -20,23 +20,24 @@ var _ MappedNullable = &BTOccurrenceFilter166{}
 
 // BTOccurrenceFilter166 struct for BTOccurrenceFilter166
 type BTOccurrenceFilter166 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType                                   *string `json:"btType,omitempty"`
-	ExcludeFlattenedParts                    *bool   `json:"excludeFlattenedParts,omitempty"`
-	ExcludeParametricPartStudioChildInstance *bool   `json:"excludeParametricPartStudioChildInstance,omitempty"`
-	ExcludeParametricPartStudioInstance      *bool   `json:"excludeParametricPartStudioInstance,omitempty"`
-	ExcludePatternInstances                  *bool   `json:"excludePatternInstances,omitempty"`
-	ExcludeReplicatedInstances               *bool   `json:"excludeReplicatedInstances,omitempty"`
-	ExcludeSketch                            *bool   `json:"excludeSketch,omitempty"`
-	ExcludeStandardContent                   *bool   `json:"excludeStandardContent,omitempty"`
-	ExcludeStudioInserts                     *bool   `json:"excludeStudioInserts,omitempty"`
-	ExcludeSubAssemblies                     *bool   `json:"excludeSubAssemblies,omitempty"`
-	ExcludeSuppressed                        *bool   `json:"excludeSuppressed,omitempty"`
-	IncludeAssemblyRoot                      *bool   `json:"includeAssemblyRoot,omitempty"`
-	IncludeParametricInstance                *bool   `json:"includeParametricInstance,omitempty"`
-	IncludePatternOccurrence                 *bool   `json:"includePatternOccurrence,omitempty"`
-	SolidOrCompositeBodyOnly                 *bool   `json:"solidOrCompositeBodyOnly,omitempty"`
-	TopLevelOnly                             *bool   `json:"topLevelOnly,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	ExcludeFlattenedParts *bool `json:"excludeFlattenedParts,omitempty"`
+	ExcludeParametricPartStudioChildInstance *bool `json:"excludeParametricPartStudioChildInstance,omitempty"`
+	ExcludeParametricPartStudioInstance *bool `json:"excludeParametricPartStudioInstance,omitempty"`
+	ExcludePatternInstances *bool `json:"excludePatternInstances,omitempty"`
+	ExcludeReplicatedInstances *bool `json:"excludeReplicatedInstances,omitempty"`
+	ExcludeSketch *bool `json:"excludeSketch,omitempty"`
+	ExcludeStandardContent *bool `json:"excludeStandardContent,omitempty"`
+	ExcludeStudioInserts *bool `json:"excludeStudioInserts,omitempty"`
+	ExcludeSubAssemblies *bool `json:"excludeSubAssemblies,omitempty"`
+	ExcludeSuppressed *bool `json:"excludeSuppressed,omitempty"`
+	IncludeAssemblyRoot *bool `json:"includeAssemblyRoot,omitempty"`
+	IncludeParametricInstance *bool `json:"includeParametricInstance,omitempty"`
+	IncludePatternOccurrence *bool `json:"includePatternOccurrence,omitempty"`
+	SolidOrCompositeBodyOnly *bool `json:"solidOrCompositeBodyOnly,omitempty"`
+	TopLevelOnly *bool `json:"topLevelOnly,omitempty"`
 }
 
 // NewBTOccurrenceFilter166 instantiates a new BTOccurrenceFilter166 object
@@ -569,7 +570,7 @@ func (o *BTOccurrenceFilter166) SetTopLevelOnly(v bool) {
 }
 
 func (o BTOccurrenceFilter166) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -578,6 +579,14 @@ func (o BTOccurrenceFilter166) MarshalJSON() ([]byte, error) {
 
 func (o BTOccurrenceFilter166) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -664,3 +673,5 @@ func (v *NullableBTOccurrenceFilter166) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_occurrence_with_full_part_ids_1464.go b/onshape/model_bt_occurrence_with_full_part_ids_1464.go
index 0224ec76f..79299c23d 100644
--- a/onshape/model_bt_occurrence_with_full_part_ids_1464.go
+++ b/onshape/model_bt_occurrence_with_full_part_ids_1464.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTOccurrenceWithFullPartIds1464{}
 
 // BTOccurrenceWithFullPartIds1464 struct for BTOccurrenceWithFullPartIds1464
 type BTOccurrenceWithFullPartIds1464 struct {
+	BTOccurrence-74
 	// Type of JSON object.
-	BtType        *string                          `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	FullElementId *BTFullElementIdWithDocument1729 `json:"fullElementId,omitempty"`
-	PartIds       []string                         `json:"partIds,omitempty"`
-	Transform     *BTBSMatrix386                   `json:"transform,omitempty"`
+	PartIds []string `json:"partIds,omitempty"`
+	Transform *BTBSMatrix386 `json:"transform,omitempty"`
 }
 
 // NewBTOccurrenceWithFullPartIds1464 instantiates a new BTOccurrenceWithFullPartIds1464 object
@@ -173,7 +174,7 @@ func (o *BTOccurrenceWithFullPartIds1464) SetTransform(v BTBSMatrix386) {
 }
 
 func (o BTOccurrenceWithFullPartIds1464) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTOccurrenceWithFullPartIds1464) MarshalJSON() ([]byte, error) {
 
 func (o BTOccurrenceWithFullPartIds1464) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTOccurrence74, errBTOccurrence74 := json.Marshal(o.BTOccurrence74)
+	if errBTOccurrence74 != nil {
+		return map[string]interface{}{}, errBTOccurrence74
+	}
+	errBTOccurrence74 = json.Unmarshal([]byte(serializedBTOccurrence74), &toSerialize)
+	if errBTOccurrence74 != nil {
+		return map[string]interface{}{}, errBTOccurrence74
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTOccurrenceWithFullPartIds1464) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_origin_entity_935.go b/onshape/model_bt_origin_entity_935.go
index 026c1df6f..9691f62f3 100644
--- a/onshape/model_bt_origin_entity_935.go
+++ b/onshape/model_bt_origin_entity_935.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTOriginEntity935{}
 
 // BTOriginEntity935 struct for BTOriginEntity935
 type BTOriginEntity935 struct {
+	BTFeatureEntity-34
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTOriginEntity935) SetBtType(v string) {
 }
 
 func (o BTOriginEntity935) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTOriginEntity935) MarshalJSON() ([]byte, error) {
 
 func (o BTOriginEntity935) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFeatureEntity34, errBTFeatureEntity34 := json.Marshal(o.BTFeatureEntity34)
+	if errBTFeatureEntity34 != nil {
+		return map[string]interface{}{}, errBTFeatureEntity34
+	}
+	errBTFeatureEntity34 = json.Unmarshal([]byte(serializedBTFeatureEntity34), &toSerialize)
+	if errBTFeatureEntity34 != nil {
+		return map[string]interface{}{}, errBTFeatureEntity34
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTOriginEntity935) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_other_document_selector_parameters_info.go b/onshape/model_bt_other_document_selector_parameters_info.go
index 38b0ea3fa..4adf4ef4c 100644
--- a/onshape/model_bt_other_document_selector_parameters_info.go
+++ b/onshape/model_bt_other_document_selector_parameters_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTOtherDocumentSelectorParametersInfo type satisfies the MappedNullable interface at compile time
@@ -20,11 +22,14 @@ var _ MappedNullable = &BTOtherDocumentSelectorParametersInfo{}
 
 // BTOtherDocumentSelectorParametersInfo struct for BTOtherDocumentSelectorParametersInfo
 type BTOtherDocumentSelectorParametersInfo struct {
+	BTDocumentSelectorParametersInfo
 	FolderStatePath    []BTFolderStateInfo `json:"folderStatePath,omitempty"`
 	SelectedDocumentId *string             `json:"selectedDocumentId,omitempty"`
 	SelectedVersionId  *string             `json:"selectedVersionId,omitempty"`
 }
 
+type _BTOtherDocumentSelectorParametersInfo BTOtherDocumentSelectorParametersInfo
+
 // NewBTOtherDocumentSelectorParametersInfo instantiates a new BTOtherDocumentSelectorParametersInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -161,6 +166,43 @@ func (o BTOtherDocumentSelectorParametersInfo) ToMap() (map[string]interface{},
 	return toSerialize, nil
 }
 
+func (o *BTOtherDocumentSelectorParametersInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTOtherDocumentSelectorParametersInfo := _BTOtherDocumentSelectorParametersInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTOtherDocumentSelectorParametersInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTOtherDocumentSelectorParametersInfo(varBTOtherDocumentSelectorParametersInfo)
+
+	return err
+}
+
 type NullableBTOtherDocumentSelectorParametersInfo struct {
 	value *BTOtherDocumentSelectorParametersInfo
 	isSet bool
diff --git a/onshape/model_bt_parameter_spec_appearance_1740.go b/onshape/model_bt_parameter_spec_appearance_1740.go
index e6f7f8417..512450464 100644
--- a/onshape/model_bt_parameter_spec_appearance_1740.go
+++ b/onshape/model_bt_parameter_spec_appearance_1740.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecAppearance1740{}
 
 // BTParameterSpecAppearance1740 struct for BTParameterSpecAppearance1740
 type BTParameterSpecAppearance1740 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecAppearance1740) SetBtType(v string) {
 }
 
 func (o BTParameterSpecAppearance1740) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecAppearance1740) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecAppearance1740) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecAppearance1740) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_array_2600.go b/onshape/model_bt_parameter_spec_array_2600.go
index 72df10ed9..8211897c8 100644
--- a/onshape/model_bt_parameter_spec_array_2600.go
+++ b/onshape/model_bt_parameter_spec_array_2600.go
@@ -20,14 +20,15 @@ var _ MappedNullable = &BTParameterSpecArray2600{}
 
 // BTParameterSpecArray2600 struct for BTParameterSpecArray2600
 type BTParameterSpecArray2600 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
-	BtType            *string            `json:"btType,omitempty"`
-	DrivenQuery       *string            `json:"drivenQuery,omitempty"`
-	ItemLabelTemplate *string            `json:"itemLabelTemplate,omitempty"`
-	ItemName          *string            `json:"itemName,omitempty"`
-	MaxNumberOfPicks  *int32             `json:"maxNumberOfPicks,omitempty"`
-	Parameters        []BTParameterSpec6 `json:"parameters,omitempty"`
-	ShowLabelsOnly    *bool              `json:"showLabelsOnly,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	DrivenQuery *string `json:"drivenQuery,omitempty"`
+	ItemLabelTemplate *string `json:"itemLabelTemplate,omitempty"`
+	ItemName *string `json:"itemName,omitempty"`
+	MaxNumberOfPicks *int32 `json:"maxNumberOfPicks,omitempty"`
+	Parameters []BTParameterSpec6 `json:"parameters,omitempty"`
+	ShowLabelsOnly *bool `json:"showLabelsOnly,omitempty"`
 }
 
 // NewBTParameterSpecArray2600 instantiates a new BTParameterSpecArray2600 object
@@ -272,7 +273,7 @@ func (o *BTParameterSpecArray2600) SetShowLabelsOnly(v bool) {
 }
 
 func (o BTParameterSpecArray2600) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -281,6 +282,14 @@ func (o BTParameterSpecArray2600) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecArray2600) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -340,3 +349,5 @@ func (v *NullableBTParameterSpecArray2600) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_boolean_170.go b/onshape/model_bt_parameter_spec_boolean_170.go
index 2445de118..03fcdfe8d 100644
--- a/onshape/model_bt_parameter_spec_boolean_170.go
+++ b/onshape/model_bt_parameter_spec_boolean_170.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecBoolean170{}
 
 // BTParameterSpecBoolean170 struct for BTParameterSpecBoolean170
 type BTParameterSpecBoolean170 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecBoolean170) SetBtType(v string) {
 }
 
 func (o BTParameterSpecBoolean170) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecBoolean170) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecBoolean170) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecBoolean170) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_categories_4083.go b/onshape/model_bt_parameter_spec_categories_4083.go
index c3eaca560..e481070d4 100644
--- a/onshape/model_bt_parameter_spec_categories_4083.go
+++ b/onshape/model_bt_parameter_spec_categories_4083.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTParameterSpecCategories4083{}
 
 // BTParameterSpecCategories4083 struct for BTParameterSpecCategories4083
 type BTParameterSpecCategories4083 struct {
+	BTParameterSpecMultiEnum-3118
 	// Type of JSON object.
-	BtType                    *string             `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	CategoryIdToMetadataTypes *map[string][]int32 `json:"categoryIdToMetadataTypes,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTParameterSpecCategories4083) SetCategoryIdToMetadataTypes(v map[strin
 }
 
 func (o BTParameterSpecCategories4083) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTParameterSpecCategories4083) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecCategories4083) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpecMultiEnum3118, errBTParameterSpecMultiEnum3118 := json.Marshal(o.BTParameterSpecMultiEnum3118)
+	if errBTParameterSpecMultiEnum3118 != nil {
+		return map[string]interface{}{}, errBTParameterSpecMultiEnum3118
+	}
+	errBTParameterSpecMultiEnum3118 = json.Unmarshal([]byte(serializedBTParameterSpecMultiEnum3118), &toSerialize)
+	if errBTParameterSpecMultiEnum3118 != nil {
+		return map[string]interface{}{}, errBTParameterSpecMultiEnum3118
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTParameterSpecCategories4083) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_database_1071.go b/onshape/model_bt_parameter_spec_database_1071.go
index 574f0ae9e..e2fea7d57 100644
--- a/onshape/model_bt_parameter_spec_database_1071.go
+++ b/onshape/model_bt_parameter_spec_database_1071.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecDatabase1071{}
 
 // BTParameterSpecDatabase1071 struct for BTParameterSpecDatabase1071
 type BTParameterSpecDatabase1071 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecDatabase1071) SetBtType(v string) {
 }
 
 func (o BTParameterSpecDatabase1071) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecDatabase1071) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecDatabase1071) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecDatabase1071) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_derived_736.go b/onshape/model_bt_parameter_spec_derived_736.go
index a60e85406..15c286e7d 100644
--- a/onshape/model_bt_parameter_spec_derived_736.go
+++ b/onshape/model_bt_parameter_spec_derived_736.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecDerived736{}
 
 // BTParameterSpecDerived736 struct for BTParameterSpecDerived736
 type BTParameterSpecDerived736 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecDerived736) SetBtType(v string) {
 }
 
 func (o BTParameterSpecDerived736) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecDerived736) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecDerived736) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecDerived736) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_enum_171.go b/onshape/model_bt_parameter_spec_enum_171.go
index 26687e0be..9dfc2857e 100644
--- a/onshape/model_bt_parameter_spec_enum_171.go
+++ b/onshape/model_bt_parameter_spec_enum_171.go
@@ -20,14 +20,15 @@ var _ MappedNullable = &BTParameterSpecEnum171{}
 
 // BTParameterSpecEnum171 struct for BTParameterSpecEnum171
 type BTParameterSpecEnum171 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
-	BtType                         *string                                       `json:"btType,omitempty"`
-	EnumName                       *string                                       `json:"enumName,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	EnumName *string `json:"enumName,omitempty"`
 	EnumValueToVisibilityCondition *map[string]BTParameterVisibilityCondition177 `json:"enumValueToVisibilityCondition,omitempty"`
-	Namespace                      *string                                       `json:"namespace,omitempty"`
-	OptionIconUris                 []string                                      `json:"optionIconUris,omitempty"`
-	OptionNames                    []string                                      `json:"optionNames,omitempty"`
-	Options                        []string                                      `json:"options,omitempty"`
+	Namespace *string `json:"namespace,omitempty"`
+	OptionIconUris []string `json:"optionIconUris,omitempty"`
+	OptionNames []string `json:"optionNames,omitempty"`
+	Options []string `json:"options,omitempty"`
 }
 
 // NewBTParameterSpecEnum171 instantiates a new BTParameterSpecEnum171 object
@@ -272,7 +273,7 @@ func (o *BTParameterSpecEnum171) SetOptions(v []string) {
 }
 
 func (o BTParameterSpecEnum171) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -281,6 +282,14 @@ func (o BTParameterSpecEnum171) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecEnum171) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -340,3 +349,5 @@ func (v *NullableBTParameterSpecEnum171) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_feature_list_703.go b/onshape/model_bt_parameter_spec_feature_list_703.go
index 5c67d5c1f..7d3880128 100644
--- a/onshape/model_bt_parameter_spec_feature_list_703.go
+++ b/onshape/model_bt_parameter_spec_feature_list_703.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecFeatureList703{}
 
 // BTParameterSpecFeatureList703 struct for BTParameterSpecFeatureList703
 type BTParameterSpecFeatureList703 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecFeatureList703) SetBtType(v string) {
 }
 
 func (o BTParameterSpecFeatureList703) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecFeatureList703) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecFeatureList703) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecFeatureList703) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_foreign_id_172.go b/onshape/model_bt_parameter_spec_foreign_id_172.go
index c785fd795..3bd6377de 100644
--- a/onshape/model_bt_parameter_spec_foreign_id_172.go
+++ b/onshape/model_bt_parameter_spec_foreign_id_172.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecForeignId172{}
 
 // BTParameterSpecForeignId172 struct for BTParameterSpecForeignId172
 type BTParameterSpecForeignId172 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecForeignId172) SetBtType(v string) {
 }
 
 func (o BTParameterSpecForeignId172) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecForeignId172) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecForeignId172) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecForeignId172) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_lookup_table_path_761.go b/onshape/model_bt_parameter_spec_lookup_table_path_761.go
index c7007a3ed..af6f0fb79 100644
--- a/onshape/model_bt_parameter_spec_lookup_table_path_761.go
+++ b/onshape/model_bt_parameter_spec_lookup_table_path_761.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTParameterSpecLookupTablePath761{}
 
 // BTParameterSpecLookupTablePath761 struct for BTParameterSpecLookupTablePath761
 type BTParameterSpecLookupTablePath761 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
-	BtType      *string                              `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	LookupTable *BTParameterLookupTableListEntry1916 `json:"lookupTable,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTParameterSpecLookupTablePath761) SetLookupTable(v BTParameterLookupTa
 }
 
 func (o BTParameterSpecLookupTablePath761) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTParameterSpecLookupTablePath761) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecLookupTablePath761) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTParameterSpecLookupTablePath761) UnmarshalJSON(src []byte) er
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_material_2700.go b/onshape/model_bt_parameter_spec_material_2700.go
index 905a9d2ae..5ae06fe42 100644
--- a/onshape/model_bt_parameter_spec_material_2700.go
+++ b/onshape/model_bt_parameter_spec_material_2700.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecMaterial2700{}
 
 // BTParameterSpecMaterial2700 struct for BTParameterSpecMaterial2700
 type BTParameterSpecMaterial2700 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecMaterial2700) SetBtType(v string) {
 }
 
 func (o BTParameterSpecMaterial2700) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecMaterial2700) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecMaterial2700) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecMaterial2700) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_multi_enum_3118.go b/onshape/model_bt_parameter_spec_multi_enum_3118.go
index 406b7d33e..2917371bb 100644
--- a/onshape/model_bt_parameter_spec_multi_enum_3118.go
+++ b/onshape/model_bt_parameter_spec_multi_enum_3118.go
@@ -20,14 +20,15 @@ var _ MappedNullable = &BTParameterSpecMultiEnum3118{}
 
 // BTParameterSpecMultiEnum3118 struct for BTParameterSpecMultiEnum3118
 type BTParameterSpecMultiEnum3118 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
-	BtType                         *string                                       `json:"btType,omitempty"`
-	EnumName                       *string                                       `json:"enumName,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	EnumName *string `json:"enumName,omitempty"`
 	EnumValueToVisibilityCondition *map[string]BTParameterVisibilityCondition177 `json:"enumValueToVisibilityCondition,omitempty"`
-	Multivalued                    *bool                                         `json:"multivalued,omitempty"`
-	Namespace                      *string                                       `json:"namespace,omitempty"`
-	OptionNames                    []string                                      `json:"optionNames,omitempty"`
-	Options                        []string                                      `json:"options,omitempty"`
+	Multivalued *bool `json:"multivalued,omitempty"`
+	Namespace *string `json:"namespace,omitempty"`
+	OptionNames []string `json:"optionNames,omitempty"`
+	Options []string `json:"options,omitempty"`
 }
 
 // NewBTParameterSpecMultiEnum3118 instantiates a new BTParameterSpecMultiEnum3118 object
@@ -272,7 +273,7 @@ func (o *BTParameterSpecMultiEnum3118) SetOptions(v []string) {
 }
 
 func (o BTParameterSpecMultiEnum3118) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -281,6 +282,14 @@ func (o BTParameterSpecMultiEnum3118) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecMultiEnum3118) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -340,3 +349,5 @@ func (v *NullableBTParameterSpecMultiEnum3118) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_nullable_quantity_715.go b/onshape/model_bt_parameter_spec_nullable_quantity_715.go
index 8fde03c77..f4eae421b 100644
--- a/onshape/model_bt_parameter_spec_nullable_quantity_715.go
+++ b/onshape/model_bt_parameter_spec_nullable_quantity_715.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTParameterSpecNullableQuantity715{}
 
 // BTParameterSpecNullableQuantity715 struct for BTParameterSpecNullableQuantity715
 type BTParameterSpecNullableQuantity715 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
-	BtType *string                       `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Ranges []BTNullableQuantityRange1340 `json:"ranges,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTParameterSpecNullableQuantity715) SetRanges(v []BTNullableQuantityRan
 }
 
 func (o BTParameterSpecNullableQuantity715) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTParameterSpecNullableQuantity715) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecNullableQuantity715) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTParameterSpecNullableQuantity715) UnmarshalJSON(src []byte) e
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_progress_3078.go b/onshape/model_bt_parameter_spec_progress_3078.go
index 325d9c5fc..0798b95cf 100644
--- a/onshape/model_bt_parameter_spec_progress_3078.go
+++ b/onshape/model_bt_parameter_spec_progress_3078.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecProgress3078{}
 
 // BTParameterSpecProgress3078 struct for BTParameterSpecProgress3078
 type BTParameterSpecProgress3078 struct {
+	BTReadOnlyParameterSpec-1889
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecProgress3078) SetBtType(v string) {
 }
 
 func (o BTParameterSpecProgress3078) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecProgress3078) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecProgress3078) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTReadOnlyParameterSpec1889, errBTReadOnlyParameterSpec1889 := json.Marshal(o.BTReadOnlyParameterSpec1889)
+	if errBTReadOnlyParameterSpec1889 != nil {
+		return map[string]interface{}{}, errBTReadOnlyParameterSpec1889
+	}
+	errBTReadOnlyParameterSpec1889 = json.Unmarshal([]byte(serializedBTReadOnlyParameterSpec1889), &toSerialize)
+	if errBTReadOnlyParameterSpec1889 != nil {
+		return map[string]interface{}{}, errBTReadOnlyParameterSpec1889
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecProgress3078) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_quantity_173.go b/onshape/model_bt_parameter_spec_quantity_173.go
index afad313f0..ae6ff83d5 100644
--- a/onshape/model_bt_parameter_spec_quantity_173.go
+++ b/onshape/model_bt_parameter_spec_quantity_173.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTParameterSpecQuantity173{}
 
 // BTParameterSpecQuantity173 struct for BTParameterSpecQuantity173
 type BTParameterSpecQuantity173 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
-	BtType *string              `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Ranges []BTQuantityRange181 `json:"ranges,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTParameterSpecQuantity173) SetRanges(v []BTQuantityRange181) {
 }
 
 func (o BTParameterSpecQuantity173) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTParameterSpecQuantity173) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecQuantity173) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTParameterSpecQuantity173) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_query_174.go b/onshape/model_bt_parameter_spec_query_174.go
index b19567972..8e2312f83 100644
--- a/onshape/model_bt_parameter_spec_query_174.go
+++ b/onshape/model_bt_parameter_spec_query_174.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTParameterSpecQuery174{}
 
 // BTParameterSpecQuery174 struct for BTParameterSpecQuery174
 type BTParameterSpecQuery174 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
-	BtType                    *string           `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	AdditionalBoxSelectFilter *BTQueryFilter183 `json:"additionalBoxSelectFilter,omitempty"`
-	Filter                    *BTQueryFilter183 `json:"filter,omitempty"`
-	MaxNumberOfPicks          *int32            `json:"maxNumberOfPicks,omitempty"`
+	Filter *BTQueryFilter183 `json:"filter,omitempty"`
+	MaxNumberOfPicks *int32 `json:"maxNumberOfPicks,omitempty"`
 }
 
 // NewBTParameterSpecQuery174 instantiates a new BTParameterSpecQuery174 object
@@ -173,7 +174,7 @@ func (o *BTParameterSpecQuery174) SetMaxNumberOfPicks(v int32) {
 }
 
 func (o BTParameterSpecQuery174) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTParameterSpecQuery174) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecQuery174) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTParameterSpecQuery174) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_reference_2789.go b/onshape/model_bt_parameter_spec_reference_2789.go
index 38db8857e..09c41bba0 100644
--- a/onshape/model_bt_parameter_spec_reference_2789.go
+++ b/onshape/model_bt_parameter_spec_reference_2789.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTParameterSpecReference2789{}
 
 // BTParameterSpecReference2789 struct for BTParameterSpecReference2789
 type BTParameterSpecReference2789 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
-	BtType              *string                      `json:"btType,omitempty"`
-	DefaultPurpose      *BTElementLibraryPurpose3353 `json:"defaultPurpose,omitempty"`
-	LibraryDefinitionId *string                      `json:"libraryDefinitionId,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	DefaultPurpose *BTElementLibraryPurpose3353 `json:"defaultPurpose,omitempty"`
+	LibraryDefinitionId *string `json:"libraryDefinitionId,omitempty"`
 }
 
 // NewBTParameterSpecReference2789 instantiates a new BTParameterSpecReference2789 object
@@ -140,7 +141,7 @@ func (o *BTParameterSpecReference2789) SetLibraryDefinitionId(v string) {
 }
 
 func (o BTParameterSpecReference2789) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTParameterSpecReference2789) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecReference2789) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTParameterSpecReference2789) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_reference_assembly_2821.go b/onshape/model_bt_parameter_spec_reference_assembly_2821.go
index eb9e74ea9..3a4531217 100644
--- a/onshape/model_bt_parameter_spec_reference_assembly_2821.go
+++ b/onshape/model_bt_parameter_spec_reference_assembly_2821.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecReferenceAssembly2821{}
 
 // BTParameterSpecReferenceAssembly2821 struct for BTParameterSpecReferenceAssembly2821
 type BTParameterSpecReferenceAssembly2821 struct {
+	BTParameterSpecReference-2789
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecReferenceAssembly2821) SetBtType(v string) {
 }
 
 func (o BTParameterSpecReferenceAssembly2821) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecReferenceAssembly2821) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecReferenceAssembly2821) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpecReference2789, errBTParameterSpecReference2789 := json.Marshal(o.BTParameterSpecReference2789)
+	if errBTParameterSpecReference2789 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReference2789
+	}
+	errBTParameterSpecReference2789 = json.Unmarshal([]byte(serializedBTParameterSpecReference2789), &toSerialize)
+	if errBTParameterSpecReference2789 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReference2789
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecReferenceAssembly2821) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_reference_blob_1367.go b/onshape/model_bt_parameter_spec_reference_blob_1367.go
index e7f67bca2..0f1d6591a 100644
--- a/onshape/model_bt_parameter_spec_reference_blob_1367.go
+++ b/onshape/model_bt_parameter_spec_reference_blob_1367.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecReferenceBlob1367{}
 
 // BTParameterSpecReferenceBlob1367 struct for BTParameterSpecReferenceBlob1367
 type BTParameterSpecReferenceBlob1367 struct {
+	BTParameterSpecReference-2789
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecReferenceBlob1367) SetBtType(v string) {
 }
 
 func (o BTParameterSpecReferenceBlob1367) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecReferenceBlob1367) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecReferenceBlob1367) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpecReference2789, errBTParameterSpecReference2789 := json.Marshal(o.BTParameterSpecReference2789)
+	if errBTParameterSpecReference2789 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReference2789
+	}
+	errBTParameterSpecReference2789 = json.Unmarshal([]byte(serializedBTParameterSpecReference2789), &toSerialize)
+	if errBTParameterSpecReference2789 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReference2789
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecReferenceBlob1367) UnmarshalJSON(src []byte) err
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_reference_cad_import_1792.go b/onshape/model_bt_parameter_spec_reference_cad_import_1792.go
index 34280251a..f686540d6 100644
--- a/onshape/model_bt_parameter_spec_reference_cad_import_1792.go
+++ b/onshape/model_bt_parameter_spec_reference_cad_import_1792.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecReferenceCADImport1792{}
 
 // BTParameterSpecReferenceCADImport1792 struct for BTParameterSpecReferenceCADImport1792
 type BTParameterSpecReferenceCADImport1792 struct {
+	BTParameterSpecReferenceBlob-1367
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecReferenceCADImport1792) SetBtType(v string) {
 }
 
 func (o BTParameterSpecReferenceCADImport1792) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecReferenceCADImport1792) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecReferenceCADImport1792) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpecReferenceBlob1367, errBTParameterSpecReferenceBlob1367 := json.Marshal(o.BTParameterSpecReferenceBlob1367)
+	if errBTParameterSpecReferenceBlob1367 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReferenceBlob1367
+	}
+	errBTParameterSpecReferenceBlob1367 = json.Unmarshal([]byte(serializedBTParameterSpecReferenceBlob1367), &toSerialize)
+	if errBTParameterSpecReferenceBlob1367 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReferenceBlob1367
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecReferenceCADImport1792) UnmarshalJSON(src []byte
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_reference_image_1722.go b/onshape/model_bt_parameter_spec_reference_image_1722.go
index 58a7cc7da..c7884ce28 100644
--- a/onshape/model_bt_parameter_spec_reference_image_1722.go
+++ b/onshape/model_bt_parameter_spec_reference_image_1722.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecReferenceImage1722{}
 
 // BTParameterSpecReferenceImage1722 struct for BTParameterSpecReferenceImage1722
 type BTParameterSpecReferenceImage1722 struct {
+	BTParameterSpecReferenceBlob-1367
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecReferenceImage1722) SetBtType(v string) {
 }
 
 func (o BTParameterSpecReferenceImage1722) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecReferenceImage1722) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecReferenceImage1722) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpecReferenceBlob1367, errBTParameterSpecReferenceBlob1367 := json.Marshal(o.BTParameterSpecReferenceBlob1367)
+	if errBTParameterSpecReferenceBlob1367 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReferenceBlob1367
+	}
+	errBTParameterSpecReferenceBlob1367 = json.Unmarshal([]byte(serializedBTParameterSpecReferenceBlob1367), &toSerialize)
+	if errBTParameterSpecReferenceBlob1367 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReferenceBlob1367
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecReferenceImage1722) UnmarshalJSON(src []byte) er
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_reference_json_1816.go b/onshape/model_bt_parameter_spec_reference_json_1816.go
index 3767dd557..e88263bf7 100644
--- a/onshape/model_bt_parameter_spec_reference_json_1816.go
+++ b/onshape/model_bt_parameter_spec_reference_json_1816.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecReferenceJSON1816{}
 
 // BTParameterSpecReferenceJSON1816 struct for BTParameterSpecReferenceJSON1816
 type BTParameterSpecReferenceJSON1816 struct {
+	BTParameterSpecReferenceBlob-1367
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecReferenceJSON1816) SetBtType(v string) {
 }
 
 func (o BTParameterSpecReferenceJSON1816) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecReferenceJSON1816) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecReferenceJSON1816) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpecReferenceBlob1367, errBTParameterSpecReferenceBlob1367 := json.Marshal(o.BTParameterSpecReferenceBlob1367)
+	if errBTParameterSpecReferenceBlob1367 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReferenceBlob1367
+	}
+	errBTParameterSpecReferenceBlob1367 = json.Unmarshal([]byte(serializedBTParameterSpecReferenceBlob1367), &toSerialize)
+	if errBTParameterSpecReferenceBlob1367 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReferenceBlob1367
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecReferenceJSON1816) UnmarshalJSON(src []byte) err
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_reference_part_studio_1256.go b/onshape/model_bt_parameter_spec_reference_part_studio_1256.go
index 3931669a6..45c65fb44 100644
--- a/onshape/model_bt_parameter_spec_reference_part_studio_1256.go
+++ b/onshape/model_bt_parameter_spec_reference_part_studio_1256.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTParameterSpecReferencePartStudio1256{}
 
 // BTParameterSpecReferencePartStudio1256 struct for BTParameterSpecReferencePartStudio1256
 type BTParameterSpecReferencePartStudio1256 struct {
+	BTParameterSpecReference-2789
 	// Type of JSON object.
-	BtType                      *string                                `json:"btType,omitempty"`
-	AllowedInsertableTypes      []GBTPartStudioItemType                `json:"allowedInsertableTypes,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	AllowedInsertableTypes []GBTPartStudioItemType `json:"allowedInsertableTypes,omitempty"`
 	ComputedConfigurationInputs []BTComputedConfigurationInputSpec2525 `json:"computedConfigurationInputs,omitempty"`
-	MaxNumberOfPicks            *int32                                 `json:"maxNumberOfPicks,omitempty"`
+	MaxNumberOfPicks *int32 `json:"maxNumberOfPicks,omitempty"`
 }
 
 // NewBTParameterSpecReferencePartStudio1256 instantiates a new BTParameterSpecReferencePartStudio1256 object
@@ -173,7 +174,7 @@ func (o *BTParameterSpecReferencePartStudio1256) SetMaxNumberOfPicks(v int32) {
 }
 
 func (o BTParameterSpecReferencePartStudio1256) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTParameterSpecReferencePartStudio1256) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecReferencePartStudio1256) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpecReference2789, errBTParameterSpecReference2789 := json.Marshal(o.BTParameterSpecReference2789)
+	if errBTParameterSpecReference2789 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReference2789
+	}
+	errBTParameterSpecReference2789 = json.Unmarshal([]byte(serializedBTParameterSpecReference2789), &toSerialize)
+	if errBTParameterSpecReference2789 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReference2789
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTParameterSpecReferencePartStudio1256) UnmarshalJSON(src []byt
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_reference_table_1520.go b/onshape/model_bt_parameter_spec_reference_table_1520.go
index 7f51c836b..5efe04b26 100644
--- a/onshape/model_bt_parameter_spec_reference_table_1520.go
+++ b/onshape/model_bt_parameter_spec_reference_table_1520.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecReferenceTable1520{}
 
 // BTParameterSpecReferenceTable1520 struct for BTParameterSpecReferenceTable1520
 type BTParameterSpecReferenceTable1520 struct {
+	BTParameterSpecReferenceBlob-1367
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecReferenceTable1520) SetBtType(v string) {
 }
 
 func (o BTParameterSpecReferenceTable1520) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecReferenceTable1520) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecReferenceTable1520) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpecReferenceBlob1367, errBTParameterSpecReferenceBlob1367 := json.Marshal(o.BTParameterSpecReferenceBlob1367)
+	if errBTParameterSpecReferenceBlob1367 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReferenceBlob1367
+	}
+	errBTParameterSpecReferenceBlob1367 = json.Unmarshal([]byte(serializedBTParameterSpecReferenceBlob1367), &toSerialize)
+	if errBTParameterSpecReferenceBlob1367 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReferenceBlob1367
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecReferenceTable1520) UnmarshalJSON(src []byte) er
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_reference_with_configuration_2950.go b/onshape/model_bt_parameter_spec_reference_with_configuration_2950.go
index fd34480d7..d988813b2 100644
--- a/onshape/model_bt_parameter_spec_reference_with_configuration_2950.go
+++ b/onshape/model_bt_parameter_spec_reference_with_configuration_2950.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTParameterSpecReferenceWithConfiguration2950{}
 
 // BTParameterSpecReferenceWithConfiguration2950 struct for BTParameterSpecReferenceWithConfiguration2950
 type BTParameterSpecReferenceWithConfiguration2950 struct {
+	BTParameterSpecReference-2789
 	// Type of JSON object.
-	BtType                 *string                 `json:"btType,omitempty"`
-	AllowAssemblies        *bool                   `json:"allowAssemblies,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	AllowAssemblies *bool `json:"allowAssemblies,omitempty"`
 	AllowedInsertableTypes []GBTPartStudioItemType `json:"allowedInsertableTypes,omitempty"`
-	MaxNumberOfPicks       *int32                  `json:"maxNumberOfPicks,omitempty"`
+	MaxNumberOfPicks *int32 `json:"maxNumberOfPicks,omitempty"`
 }
 
 // NewBTParameterSpecReferenceWithConfiguration2950 instantiates a new BTParameterSpecReferenceWithConfiguration2950 object
@@ -173,7 +174,7 @@ func (o *BTParameterSpecReferenceWithConfiguration2950) SetMaxNumberOfPicks(v in
 }
 
 func (o BTParameterSpecReferenceWithConfiguration2950) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTParameterSpecReferenceWithConfiguration2950) MarshalJSON() ([]byte, er
 
 func (o BTParameterSpecReferenceWithConfiguration2950) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpecReference2789, errBTParameterSpecReference2789 := json.Marshal(o.BTParameterSpecReference2789)
+	if errBTParameterSpecReference2789 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReference2789
+	}
+	errBTParameterSpecReference2789 = json.Unmarshal([]byte(serializedBTParameterSpecReference2789), &toSerialize)
+	if errBTParameterSpecReference2789 != nil {
+		return map[string]interface{}{}, errBTParameterSpecReference2789
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTParameterSpecReferenceWithConfiguration2950) UnmarshalJSON(sr
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_string_175.go b/onshape/model_bt_parameter_spec_string_175.go
index 9e512c203..82a9125e1 100644
--- a/onshape/model_bt_parameter_spec_string_175.go
+++ b/onshape/model_bt_parameter_spec_string_175.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTParameterSpecString175{}
 
 // BTParameterSpecString175 struct for BTParameterSpecString175
 type BTParameterSpecString175 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
-	BtType                *string                      `json:"btType,omitempty"`
-	DisallowsEmptyStrings *string                      `json:"disallowsEmptyStrings,omitempty"`
-	DisallowsHtml         *string                      `json:"disallowsHtml,omitempty"`
-	FormatConditions      []BTStringFormatCondition683 `json:"formatConditions,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	DisallowsEmptyStrings *string `json:"disallowsEmptyStrings,omitempty"`
+	DisallowsHtml *string `json:"disallowsHtml,omitempty"`
+	FormatConditions []BTStringFormatCondition683 `json:"formatConditions,omitempty"`
 }
 
 // NewBTParameterSpecString175 instantiates a new BTParameterSpecString175 object
@@ -173,7 +174,7 @@ func (o *BTParameterSpecString175) SetFormatConditions(v []BTStringFormatConditi
 }
 
 func (o BTParameterSpecString175) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTParameterSpecString175) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecString175) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTParameterSpecString175) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_spec_string_with_tolerances_2535.go b/onshape/model_bt_parameter_spec_string_with_tolerances_2535.go
index 2595ff958..908c35c71 100644
--- a/onshape/model_bt_parameter_spec_string_with_tolerances_2535.go
+++ b/onshape/model_bt_parameter_spec_string_with_tolerances_2535.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterSpecStringWithTolerances2535{}
 
 // BTParameterSpecStringWithTolerances2535 struct for BTParameterSpecStringWithTolerances2535
 type BTParameterSpecStringWithTolerances2535 struct {
+	BTReadOnlyParameterSpec-1889
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterSpecStringWithTolerances2535) SetBtType(v string) {
 }
 
 func (o BTParameterSpecStringWithTolerances2535) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterSpecStringWithTolerances2535) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterSpecStringWithTolerances2535) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTReadOnlyParameterSpec1889, errBTReadOnlyParameterSpec1889 := json.Marshal(o.BTReadOnlyParameterSpec1889)
+	if errBTReadOnlyParameterSpec1889 != nil {
+		return map[string]interface{}{}, errBTReadOnlyParameterSpec1889
+	}
+	errBTReadOnlyParameterSpec1889 = json.Unmarshal([]byte(serializedBTReadOnlyParameterSpec1889), &toSerialize)
+	if errBTReadOnlyParameterSpec1889 != nil {
+		return map[string]interface{}{}, errBTReadOnlyParameterSpec1889
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterSpecStringWithTolerances2535) UnmarshalJSON(src []by
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_visibility_always_hidden_176.go b/onshape/model_bt_parameter_visibility_always_hidden_176.go
index d6762798a..bde764fb4 100644
--- a/onshape/model_bt_parameter_visibility_always_hidden_176.go
+++ b/onshape/model_bt_parameter_visibility_always_hidden_176.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterVisibilityAlwaysHidden176{}
 
 // BTParameterVisibilityAlwaysHidden176 struct for BTParameterVisibilityAlwaysHidden176
 type BTParameterVisibilityAlwaysHidden176 struct {
+	BTParameterVisibilityCondition-177
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterVisibilityAlwaysHidden176) SetBtType(v string) {
 }
 
 func (o BTParameterVisibilityAlwaysHidden176) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterVisibilityAlwaysHidden176) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterVisibilityAlwaysHidden176) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterVisibilityCondition177, errBTParameterVisibilityCondition177 := json.Marshal(o.BTParameterVisibilityCondition177)
+	if errBTParameterVisibilityCondition177 != nil {
+		return map[string]interface{}{}, errBTParameterVisibilityCondition177
+	}
+	errBTParameterVisibilityCondition177 = json.Unmarshal([]byte(serializedBTParameterVisibilityCondition177), &toSerialize)
+	if errBTParameterVisibilityCondition177 != nil {
+		return map[string]interface{}{}, errBTParameterVisibilityCondition177
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterVisibilityAlwaysHidden176) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_visibility_logical_178.go b/onshape/model_bt_parameter_visibility_logical_178.go
index 113f62f7b..0182154b2 100644
--- a/onshape/model_bt_parameter_visibility_logical_178.go
+++ b/onshape/model_bt_parameter_visibility_logical_178.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTParameterVisibilityLogical178{}
 
 // BTParameterVisibilityLogical178 struct for BTParameterVisibilityLogical178
 type BTParameterVisibilityLogical178 struct {
+	BTParameterVisibilityCondition-177
 	// Type of JSON object.
-	BtType    *string                             `json:"btType,omitempty"`
-	Children  []BTParameterVisibilityCondition177 `json:"children,omitempty"`
-	Operation *GBTParameterVisibilityLogicalOp    `json:"operation,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Children []BTParameterVisibilityCondition177 `json:"children,omitempty"`
+	Operation *GBTParameterVisibilityLogicalOp `json:"operation,omitempty"`
 }
 
 // NewBTParameterVisibilityLogical178 instantiates a new BTParameterVisibilityLogical178 object
@@ -140,7 +141,7 @@ func (o *BTParameterVisibilityLogical178) SetOperation(v GBTParameterVisibilityL
 }
 
 func (o BTParameterVisibilityLogical178) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTParameterVisibilityLogical178) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterVisibilityLogical178) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterVisibilityCondition177, errBTParameterVisibilityCondition177 := json.Marshal(o.BTParameterVisibilityCondition177)
+	if errBTParameterVisibilityCondition177 != nil {
+		return map[string]interface{}{}, errBTParameterVisibilityCondition177
+	}
+	errBTParameterVisibilityCondition177 = json.Unmarshal([]byte(serializedBTParameterVisibilityCondition177), &toSerialize)
+	if errBTParameterVisibilityCondition177 != nil {
+		return map[string]interface{}{}, errBTParameterVisibilityCondition177
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTParameterVisibilityLogical178) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_visibility_on_equal_180.go b/onshape/model_bt_parameter_visibility_on_equal_180.go
index d1879d850..aa9e9770a 100644
--- a/onshape/model_bt_parameter_visibility_on_equal_180.go
+++ b/onshape/model_bt_parameter_visibility_on_equal_180.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTParameterVisibilityOnEqual180{}
 
 // BTParameterVisibilityOnEqual180 struct for BTParameterVisibilityOnEqual180
 type BTParameterVisibilityOnEqual180 struct {
+	BTParameterVisibilityCondition-177
 	// Type of JSON object.
-	BtType      *string `json:"btType,omitempty"`
-	InArray     *bool   `json:"inArray,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	InArray *bool `json:"inArray,omitempty"`
 	ParameterId *string `json:"parameterId,omitempty"`
-	Value       *string `json:"value,omitempty"`
+	Value *string `json:"value,omitempty"`
 }
 
 // NewBTParameterVisibilityOnEqual180 instantiates a new BTParameterVisibilityOnEqual180 object
@@ -173,7 +174,7 @@ func (o *BTParameterVisibilityOnEqual180) SetValue(v string) {
 }
 
 func (o BTParameterVisibilityOnEqual180) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTParameterVisibilityOnEqual180) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterVisibilityOnEqual180) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterVisibilityCondition177, errBTParameterVisibilityCondition177 := json.Marshal(o.BTParameterVisibilityCondition177)
+	if errBTParameterVisibilityCondition177 != nil {
+		return map[string]interface{}{}, errBTParameterVisibilityCondition177
+	}
+	errBTParameterVisibilityCondition177 = json.Unmarshal([]byte(serializedBTParameterVisibilityCondition177), &toSerialize)
+	if errBTParameterVisibilityCondition177 != nil {
+		return map[string]interface{}{}, errBTParameterVisibilityCondition177
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTParameterVisibilityOnEqual180) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parameter_visibility_on_mate_dof_type_2114.go b/onshape/model_bt_parameter_visibility_on_mate_dof_type_2114.go
index 641634ad6..4004197bb 100644
--- a/onshape/model_bt_parameter_visibility_on_mate_dof_type_2114.go
+++ b/onshape/model_bt_parameter_visibility_on_mate_dof_type_2114.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParameterVisibilityOnMateDOFType2114{}
 
 // BTParameterVisibilityOnMateDOFType2114 struct for BTParameterVisibilityOnMateDOFType2114
 type BTParameterVisibilityOnMateDOFType2114 struct {
+	BTParameterVisibilityOnEqual-180
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParameterVisibilityOnMateDOFType2114) SetBtType(v string) {
 }
 
 func (o BTParameterVisibilityOnMateDOFType2114) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParameterVisibilityOnMateDOFType2114) MarshalJSON() ([]byte, error) {
 
 func (o BTParameterVisibilityOnMateDOFType2114) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterVisibilityOnEqual180, errBTParameterVisibilityOnEqual180 := json.Marshal(o.BTParameterVisibilityOnEqual180)
+	if errBTParameterVisibilityOnEqual180 != nil {
+		return map[string]interface{}{}, errBTParameterVisibilityOnEqual180
+	}
+	errBTParameterVisibilityOnEqual180 = json.Unmarshal([]byte(serializedBTParameterVisibilityOnEqual180), &toSerialize)
+	if errBTParameterVisibilityOnEqual180 != nil {
+		return map[string]interface{}{}, errBTParameterVisibilityOnEqual180
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParameterVisibilityOnMateDOFType2114) UnmarshalJSON(src []byt
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parametric_instance_2641.go b/onshape/model_bt_parametric_instance_2641.go
index f6f60d88a..84d2a2ff3 100644
--- a/onshape/model_bt_parametric_instance_2641.go
+++ b/onshape/model_bt_parametric_instance_2641.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTParametricInstance2641{}
 
 // BTParametricInstance2641 struct for BTParametricInstance2641
 type BTParametricInstance2641 struct {
+	BTInstanceBase-2263
 	// Type of JSON object.
-	BtType               *string                    `json:"btType,omitempty"`
-	Feature              *BTMAssemblyFeature887     `json:"feature,omitempty"`
-	FeatureId            *string                    `json:"featureId,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Feature *BTMAssemblyFeature887 `json:"feature,omitempty"`
+	FeatureId *string `json:"featureId,omitempty"`
 	InstanceControlNodes []BTInstanceControlNode750 `json:"instanceControlNodes,omitempty"`
 }
 
@@ -173,7 +174,7 @@ func (o *BTParametricInstance2641) SetInstanceControlNodes(v []BTInstanceControl
 }
 
 func (o BTParametricInstance2641) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTParametricInstance2641) MarshalJSON() ([]byte, error) {
 
 func (o BTParametricInstance2641) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTInstanceBase2263, errBTInstanceBase2263 := json.Marshal(o.BTInstanceBase2263)
+	if errBTInstanceBase2263 != nil {
+		return map[string]interface{}{}, errBTInstanceBase2263
+	}
+	errBTInstanceBase2263 = json.Unmarshal([]byte(serializedBTInstanceBase2263), &toSerialize)
+	if errBTInstanceBase2263 != nil {
+		return map[string]interface{}{}, errBTInstanceBase2263
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTParametricInstance2641) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parametric_output_instance_2288.go b/onshape/model_bt_parametric_output_instance_2288.go
index 3a5b65758..646897c9a 100644
--- a/onshape/model_bt_parametric_output_instance_2288.go
+++ b/onshape/model_bt_parametric_output_instance_2288.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTParametricOutputInstance2288{}
 
 // BTParametricOutputInstance2288 struct for BTParametricOutputInstance2288
 type BTParametricOutputInstance2288 struct {
+	BTInstanceBase-2263
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTParametricOutputInstance2288) SetBtType(v string) {
 }
 
 func (o BTParametricOutputInstance2288) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTParametricOutputInstance2288) MarshalJSON() ([]byte, error) {
 
 func (o BTParametricOutputInstance2288) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTInstanceBase2263, errBTInstanceBase2263 := json.Marshal(o.BTInstanceBase2263)
+	if errBTInstanceBase2263 != nil {
+		return map[string]interface{}{}, errBTInstanceBase2263
+	}
+	errBTInstanceBase2263 = json.Unmarshal([]byte(serializedBTInstanceBase2263), &toSerialize)
+	if errBTInstanceBase2263 != nil {
+		return map[string]interface{}{}, errBTInstanceBase2263
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTParametricOutputInstance2288) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parametric_part_studio_child_instance_3696.go b/onshape/model_bt_parametric_part_studio_child_instance_3696.go
index 16ff9b92c..16f140d43 100644
--- a/onshape/model_bt_parametric_part_studio_child_instance_3696.go
+++ b/onshape/model_bt_parametric_part_studio_child_instance_3696.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTParametricPartStudioChildInstance3696{}
 
 // BTParametricPartStudioChildInstance3696 struct for BTParametricPartStudioChildInstance3696
 type BTParametricPartStudioChildInstance3696 struct {
+	BTParametricOutputInstance-2288
 	// Type of JSON object.
-	BtType          *string                    `json:"btType,omitempty"`
-	PartIdentity    *BTPSOIdentity2741         `json:"partIdentity,omitempty"`
-	SketchFeatureId *string                    `json:"sketchFeatureId,omitempty"`
-	Type            *GBTPartStudioInstanceType `json:"type,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	PartIdentity *BTPSOIdentity2741 `json:"partIdentity,omitempty"`
+	SketchFeatureId *string `json:"sketchFeatureId,omitempty"`
+	Type *GBTPartStudioInstanceType `json:"type,omitempty"`
 }
 
 // NewBTParametricPartStudioChildInstance3696 instantiates a new BTParametricPartStudioChildInstance3696 object
@@ -173,7 +174,7 @@ func (o *BTParametricPartStudioChildInstance3696) SetType(v GBTPartStudioInstanc
 }
 
 func (o BTParametricPartStudioChildInstance3696) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTParametricPartStudioChildInstance3696) MarshalJSON() ([]byte, error) {
 
 func (o BTParametricPartStudioChildInstance3696) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParametricOutputInstance2288, errBTParametricOutputInstance2288 := json.Marshal(o.BTParametricOutputInstance2288)
+	if errBTParametricOutputInstance2288 != nil {
+		return map[string]interface{}{}, errBTParametricOutputInstance2288
+	}
+	errBTParametricOutputInstance2288 = json.Unmarshal([]byte(serializedBTParametricOutputInstance2288), &toSerialize)
+	if errBTParametricOutputInstance2288 != nil {
+		return map[string]interface{}{}, errBTParametricOutputInstance2288
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTParametricPartStudioChildInstance3696) UnmarshalJSON(src []by
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_parametric_part_studio_instance_4374.go b/onshape/model_bt_parametric_part_studio_instance_4374.go
index 4091cbf4f..e77906df0 100644
--- a/onshape/model_bt_parametric_part_studio_instance_4374.go
+++ b/onshape/model_bt_parametric_part_studio_instance_4374.go
@@ -20,20 +20,21 @@ var _ MappedNullable = &BTParametricPartStudioInstance4374{}
 
 // BTParametricPartStudioInstance4374 struct for BTParametricPartStudioInstance4374
 type BTParametricPartStudioInstance4374 struct {
+	BTParametricInstance-2641
 	// Type of JSON object.
-	BtType                                  *string                              `json:"btType,omitempty"`
-	Configuration                           []BTMParameter1                      `json:"configuration,omitempty"`
-	DocumentId                              *string                              `json:"documentId,omitempty"`
-	ElementId                               *string                              `json:"elementId,omitempty"`
-	ElementReference                        *BTElementReference725               `json:"elementReference,omitempty"`
-	ExternalDocumentWithVersion             *BTDocumentWithVersionId             `json:"externalDocumentWithVersion,omitempty"`
-	ExternalDocumentWithVersionAndElementId *BTDocumentWithVersionAndElementId   `json:"externalDocumentWithVersionAndElementId,omitempty"`
-	LockedState                             *bool                                `json:"lockedState,omitempty"`
-	MicroversionId                          *BTMicroversionId366                 `json:"microversionId,omitempty"`
-	ParametricPartStudioFeature             *BTMParametricPartStudioFeature3883  `json:"parametricPartStudioFeature,omitempty"`
-	ReferenceParameter                      *BTMParameterReferencePartStudio3302 `json:"referenceParameter,omitempty"`
-	VersionId                               *string                              `json:"versionId,omitempty"`
-	VersionIdIfExternal                     *string                              `json:"versionIdIfExternal,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Configuration []BTMParameter1 `json:"configuration,omitempty"`
+	DocumentId *string `json:"documentId,omitempty"`
+	ElementId *string `json:"elementId,omitempty"`
+	ElementReference *BTElementReference725 `json:"elementReference,omitempty"`
+	ExternalDocumentWithVersion *BTDocumentWithVersionId `json:"externalDocumentWithVersion,omitempty"`
+	ExternalDocumentWithVersionAndElementId *BTDocumentWithVersionAndElementId `json:"externalDocumentWithVersionAndElementId,omitempty"`
+	LockedState *bool `json:"lockedState,omitempty"`
+	MicroversionId *BTMicroversionId366 `json:"microversionId,omitempty"`
+	ParametricPartStudioFeature *BTMParametricPartStudioFeature3883 `json:"parametricPartStudioFeature,omitempty"`
+	ReferenceParameter *BTMParameterReferencePartStudio3302 `json:"referenceParameter,omitempty"`
+	VersionId *string `json:"versionId,omitempty"`
+	VersionIdIfExternal *string `json:"versionIdIfExternal,omitempty"`
 }
 
 // NewBTParametricPartStudioInstance4374 instantiates a new BTParametricPartStudioInstance4374 object
@@ -470,7 +471,7 @@ func (o *BTParametricPartStudioInstance4374) SetVersionIdIfExternal(v string) {
 }
 
 func (o BTParametricPartStudioInstance4374) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -479,6 +480,14 @@ func (o BTParametricPartStudioInstance4374) MarshalJSON() ([]byte, error) {
 
 func (o BTParametricPartStudioInstance4374) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParametricInstance2641, errBTParametricInstance2641 := json.Marshal(o.BTParametricInstance2641)
+	if errBTParametricInstance2641 != nil {
+		return map[string]interface{}{}, errBTParametricInstance2641
+	}
+	errBTParametricInstance2641 = json.Unmarshal([]byte(serializedBTParametricInstance2641), &toSerialize)
+	if errBTParametricInstance2641 != nil {
+		return map[string]interface{}{}, errBTParametricInstance2641
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -556,3 +565,5 @@ func (v *NullableBTParametricPartStudioInstance4374) UnmarshalJSON(src []byte) e
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_part_instance_81.go b/onshape/model_bt_part_instance_81.go
index 069eb68fb..3481c760e 100644
--- a/onshape/model_bt_part_instance_81.go
+++ b/onshape/model_bt_part_instance_81.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTPartInstance81{}
 
 // BTPartInstance81 struct for BTPartInstance81
 type BTPartInstance81 struct {
+	BTInstance-642
 	// Type of JSON object.
-	BtType        *string                              `json:"btType,omitempty"`
-	PartIdentity  *BTPSOIdentity2741                   `json:"partIdentity,omitempty"`
-	PartQuery     *string                              `json:"partQuery,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	PartIdentity *BTPSOIdentity2741 `json:"partIdentity,omitempty"`
+	PartQuery *string `json:"partQuery,omitempty"`
 	PartReference *BTMParameterReferencePartStudio3302 `json:"partReference,omitempty"`
-	Type          *GBTPartStudioInstanceType           `json:"type,omitempty"`
+	Type *GBTPartStudioInstanceType `json:"type,omitempty"`
 }
 
 // NewBTPartInstance81 instantiates a new BTPartInstance81 object
@@ -206,7 +207,7 @@ func (o *BTPartInstance81) SetType(v GBTPartStudioInstanceType) {
 }
 
 func (o BTPartInstance81) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTPartInstance81) MarshalJSON() ([]byte, error) {
 
 func (o BTPartInstance81) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTInstance642, errBTInstance642 := json.Marshal(o.BTInstance642)
+	if errBTInstance642 != nil {
+		return map[string]interface{}{}, errBTInstance642
+	}
+	errBTInstance642 = json.Unmarshal([]byte(serializedBTInstance642), &toSerialize)
+	if errBTInstance642 != nil {
+		return map[string]interface{}{}, errBTInstance642
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTPartInstance81) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_part_studio_display_data_reference_4360.go b/onshape/model_bt_part_studio_display_data_reference_4360.go
index 58ae3034e..75903b08a 100644
--- a/onshape/model_bt_part_studio_display_data_reference_4360.go
+++ b/onshape/model_bt_part_studio_display_data_reference_4360.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTPartStudioDisplayDataReference4360{}
 
 // BTPartStudioDisplayDataReference4360 struct for BTPartStudioDisplayDataReference4360
 type BTPartStudioDisplayDataReference4360 struct {
+	BTPartStudioDisplayDataBase-2751
 	// Type of JSON object.
-	BtType               *string             `json:"btType,omitempty"`
-	CacheDataPath        *BTCacheDataPath191 `json:"cacheDataPath,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	CacheDataPath *BTCacheDataPath191 `json:"cacheDataPath,omitempty"`
 	TessellationSettings *map[string][]int32 `json:"tessellationSettings,omitempty"`
 }
 
@@ -140,7 +141,7 @@ func (o *BTPartStudioDisplayDataReference4360) SetTessellationSettings(v map[str
 }
 
 func (o BTPartStudioDisplayDataReference4360) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTPartStudioDisplayDataReference4360) MarshalJSON() ([]byte, error) {
 
 func (o BTPartStudioDisplayDataReference4360) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPartStudioDisplayDataBase2751, errBTPartStudioDisplayDataBase2751 := json.Marshal(o.BTPartStudioDisplayDataBase2751)
+	if errBTPartStudioDisplayDataBase2751 != nil {
+		return map[string]interface{}{}, errBTPartStudioDisplayDataBase2751
+	}
+	errBTPartStudioDisplayDataBase2751 = json.Unmarshal([]byte(serializedBTPartStudioDisplayDataBase2751), &toSerialize)
+	if errBTPartStudioDisplayDataBase2751 != nil {
+		return map[string]interface{}{}, errBTPartStudioDisplayDataBase2751
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTPartStudioDisplayDataReference4360) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_planar_image_mapping_4398.go b/onshape/model_bt_planar_image_mapping_4398.go
index 0e79e80f9..996eddd13 100644
--- a/onshape/model_bt_planar_image_mapping_4398.go
+++ b/onshape/model_bt_planar_image_mapping_4398.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTPlanarImageMapping4398{}
 
 // BTPlanarImageMapping4398 struct for BTPlanarImageMapping4398
 type BTPlanarImageMapping4398 struct {
+	BTImageMapping-3821
 	// Type of JSON object.
-	BtType      *string                `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	PlaneSystem *BTCoordinateSystem387 `json:"planeSystem,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTPlanarImageMapping4398) SetPlaneSystem(v BTCoordinateSystem387) {
 }
 
 func (o BTPlanarImageMapping4398) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPlanarImageMapping4398) MarshalJSON() ([]byte, error) {
 
 func (o BTPlanarImageMapping4398) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTImageMapping3821, errBTImageMapping3821 := json.Marshal(o.BTImageMapping3821)
+	if errBTImageMapping3821 != nil {
+		return map[string]interface{}{}, errBTImageMapping3821
+	}
+	errBTImageMapping3821 = json.Unmarshal([]byte(serializedBTImageMapping3821), &toSerialize)
+	if errBTImageMapping3821 != nil {
+		return map[string]interface{}{}, errBTImageMapping3821
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPlanarImageMapping4398) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_plane_description_692.go b/onshape/model_bt_plane_description_692.go
index 991e85016..a947731a7 100644
--- a/onshape/model_bt_plane_description_692.go
+++ b/onshape/model_bt_plane_description_692.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTPlaneDescription692{}
 
 // BTPlaneDescription692 struct for BTPlaneDescription692
 type BTPlaneDescription692 struct {
+	BTSurfaceDescription-1564
 	// Type of JSON object.
-	BtType             *string        `json:"btType,omitempty"`
-	IsOrientedWithFace *bool          `json:"isOrientedWithFace,omitempty"`
-	Normal             *BTVector3d389 `json:"normal,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsOrientedWithFace *bool `json:"isOrientedWithFace,omitempty"`
+	Normal *BTVector3d389 `json:"normal,omitempty"`
 }
 
 // NewBTPlaneDescription692 instantiates a new BTPlaneDescription692 object
@@ -140,7 +141,7 @@ func (o *BTPlaneDescription692) SetNormal(v BTVector3d389) {
 }
 
 func (o BTPlaneDescription692) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTPlaneDescription692) MarshalJSON() ([]byte, error) {
 
 func (o BTPlaneDescription692) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSurfaceDescription1564, errBTSurfaceDescription1564 := json.Marshal(o.BTSurfaceDescription1564)
+	if errBTSurfaceDescription1564 != nil {
+		return map[string]interface{}{}, errBTSurfaceDescription1564
+	}
+	errBTSurfaceDescription1564 = json.Unmarshal([]byte(serializedBTSurfaceDescription1564), &toSerialize)
+	if errBTSurfaceDescription1564 != nil {
+		return map[string]interface{}{}, errBTSurfaceDescription1564
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTPlaneDescription692) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_plane_orientation_filter_1700.go b/onshape/model_bt_plane_orientation_filter_1700.go
index ab65b01c8..be74a34b7 100644
--- a/onshape/model_bt_plane_orientation_filter_1700.go
+++ b/onshape/model_bt_plane_orientation_filter_1700.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTPlaneOrientationFilter1700{}
 
 // BTPlaneOrientationFilter1700 struct for BTPlaneOrientationFilter1700
 type BTPlaneOrientationFilter1700 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType *string        `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Normal *BTVector3d389 `json:"normal,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTPlaneOrientationFilter1700) SetNormal(v BTVector3d389) {
 }
 
 func (o BTPlaneOrientationFilter1700) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPlaneOrientationFilter1700) MarshalJSON() ([]byte, error) {
 
 func (o BTPlaneOrientationFilter1700) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPlaneOrientationFilter1700) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_point_entity_1439.go b/onshape/model_bt_point_entity_1439.go
index dffbe726f..39b864dc3 100644
--- a/onshape/model_bt_point_entity_1439.go
+++ b/onshape/model_bt_point_entity_1439.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTPointEntity1439{}
 
 // BTPointEntity1439 struct for BTPointEntity1439
 type BTPointEntity1439 struct {
+	BTFeatureEntity-34
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTPointEntity1439) SetBtType(v string) {
 }
 
 func (o BTPointEntity1439) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTPointEntity1439) MarshalJSON() ([]byte, error) {
 
 func (o BTPointEntity1439) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFeatureEntity34, errBTFeatureEntity34 := json.Marshal(o.BTFeatureEntity34)
+	if errBTFeatureEntity34 != nil {
+		return map[string]interface{}{}, errBTFeatureEntity34
+	}
+	errBTFeatureEntity34 = json.Unmarshal([]byte(serializedBTFeatureEntity34), &toSerialize)
+	if errBTFeatureEntity34 != nil {
+		return map[string]interface{}{}, errBTFeatureEntity34
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTPointEntity1439) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_project_info.go b/onshape/model_bt_project_info.go
index d49f44a6a..6c03fc8b7 100644
--- a/onshape/model_bt_project_info.go
+++ b/onshape/model_bt_project_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTProjectInfo type satisfies the MappedNullable interface at compile time
@@ -20,12 +22,15 @@ var _ MappedNullable = &BTProjectInfo{}
 
 // BTProjectInfo struct for BTProjectInfo
 type BTProjectInfo struct {
+	BTGlobalTreeNodeInfo
 	PermissionScheme *BTRbacPermissionSchemeInfo `json:"permissionScheme,omitempty"`
 	PermissionSet    []string                    `json:"permissionSet,omitempty"`
 	RoleMapEntries   []RoleMapEntry              `json:"roleMapEntries,omitempty"`
 	Trash            *bool                       `json:"trash,omitempty"`
 }
 
+type _BTProjectInfo BTProjectInfo
+
 // NewBTProjectInfo instantiates a new BTProjectInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -197,6 +202,43 @@ func (o BTProjectInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTProjectInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTProjectInfo := _BTProjectInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTProjectInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTProjectInfo(varBTProjectInfo)
+
+	return err
+}
+
 type NullableBTProjectInfo struct {
 	value *BTProjectInfo
 	isSet bool
diff --git a/onshape/model_bt_property_table_column_info_2161.go b/onshape/model_bt_property_table_column_info_2161.go
index f7474948c..bde13af2a 100644
--- a/onshape/model_bt_property_table_column_info_2161.go
+++ b/onshape/model_bt_property_table_column_info_2161.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTPropertyTableColumnInfo2161{}
 
 // BTPropertyTableColumnInfo2161 struct for BTPropertyTableColumnInfo2161
 type BTPropertyTableColumnInfo2161 struct {
+	BTTableColumnInfo-1222
 	// Type of JSON object.
-	BtType                     *string `json:"btType,omitempty"`
-	IsComputedAssemblyProperty *bool   `json:"isComputedAssemblyProperty,omitempty"`
-	IsComputedProperty         *bool   `json:"isComputedProperty,omitempty"`
-	PropertyValueType          *int32  `json:"propertyValueType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsComputedAssemblyProperty *bool `json:"isComputedAssemblyProperty,omitempty"`
+	IsComputedProperty *bool `json:"isComputedProperty,omitempty"`
+	PropertyValueType *int32 `json:"propertyValueType,omitempty"`
 }
 
 // NewBTPropertyTableColumnInfo2161 instantiates a new BTPropertyTableColumnInfo2161 object
@@ -173,7 +174,7 @@ func (o *BTPropertyTableColumnInfo2161) SetPropertyValueType(v int32) {
 }
 
 func (o BTPropertyTableColumnInfo2161) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTPropertyTableColumnInfo2161) MarshalJSON() ([]byte, error) {
 
 func (o BTPropertyTableColumnInfo2161) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableColumnInfo1222, errBTTableColumnInfo1222 := json.Marshal(o.BTTableColumnInfo1222)
+	if errBTTableColumnInfo1222 != nil {
+		return map[string]interface{}{}, errBTTableColumnInfo1222
+	}
+	errBTTableColumnInfo1222 = json.Unmarshal([]byte(serializedBTTableColumnInfo1222), &toSerialize)
+	if errBTTableColumnInfo1222 != nil {
+		return map[string]interface{}{}, errBTTableColumnInfo1222
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTPropertyTableColumnInfo2161) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_publication_info.go b/onshape/model_bt_publication_info.go
index 9ee22c217..0bb31b220 100644
--- a/onshape/model_bt_publication_info.go
+++ b/onshape/model_bt_publication_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTPublicationInfo type satisfies the MappedNullable interface at compile time
@@ -20,12 +22,15 @@ var _ MappedNullable = &BTPublicationInfo{}
 
 // BTPublicationInfo struct for BTPublicationInfo
 type BTPublicationInfo struct {
+	BTGlobalTreeNodeInfo
 	DefaultWorkspaceId *string `json:"defaultWorkspaceId,omitempty"`
 	Items              []Item  `json:"items,omitempty"`
 	Notes              *string `json:"notes,omitempty"`
 	Sequence           *string `json:"sequence,omitempty"`
 }
 
+type _BTPublicationInfo BTPublicationInfo
+
 // NewBTPublicationInfo instantiates a new BTPublicationInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -197,6 +202,43 @@ func (o BTPublicationInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTPublicationInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTPublicationInfo := _BTPublicationInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTPublicationInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTPublicationInfo(varBTPublicationInfo)
+
+	return err
+}
+
 type NullableBTPublicationInfo struct {
 	value *BTPublicationInfo
 	isSet bool
diff --git a/onshape/model_bt_radial_dimension_display_data_348.go b/onshape/model_bt_radial_dimension_display_data_348.go
index 841c350fb..99fffd4f7 100644
--- a/onshape/model_bt_radial_dimension_display_data_348.go
+++ b/onshape/model_bt_radial_dimension_display_data_348.go
@@ -20,16 +20,17 @@ var _ MappedNullable = &BTRadialDimensionDisplayData348{}
 
 // BTRadialDimensionDisplayData348 struct for BTRadialDimensionDisplayData348
 type BTRadialDimensionDisplayData348 struct {
+	BTDimensionDisplayData-323
 	// Type of JSON object.
-	BtType            *string           `json:"btType,omitempty"`
-	PositionR         *float64          `json:"positionR,omitempty"`
-	PositionT         *float64          `json:"positionT,omitempty"`
-	RadiusDisplay     *GBTRadiusDisplay `json:"radiusDisplay,omitempty"`
-	RealDiameter      *bool             `json:"realDiameter,omitempty"`
-	WitnessEndPoint0r *float64          `json:"witnessEndPoint0r,omitempty"`
-	WitnessEndPoint0t *float64          `json:"witnessEndPoint0t,omitempty"`
-	WitnessEndPoint1r *float64          `json:"witnessEndPoint1r,omitempty"`
-	WitnessEndPoint1t *float64          `json:"witnessEndPoint1t,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	PositionR *float64 `json:"positionR,omitempty"`
+	PositionT *float64 `json:"positionT,omitempty"`
+	RadiusDisplay *GBTRadiusDisplay `json:"radiusDisplay,omitempty"`
+	RealDiameter *bool `json:"realDiameter,omitempty"`
+	WitnessEndPoint0r *float64 `json:"witnessEndPoint0r,omitempty"`
+	WitnessEndPoint0t *float64 `json:"witnessEndPoint0t,omitempty"`
+	WitnessEndPoint1r *float64 `json:"witnessEndPoint1r,omitempty"`
+	WitnessEndPoint1t *float64 `json:"witnessEndPoint1t,omitempty"`
 }
 
 // NewBTRadialDimensionDisplayData348 instantiates a new BTRadialDimensionDisplayData348 object
@@ -338,7 +339,7 @@ func (o *BTRadialDimensionDisplayData348) SetWitnessEndPoint1t(v float64) {
 }
 
 func (o BTRadialDimensionDisplayData348) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -347,6 +348,14 @@ func (o BTRadialDimensionDisplayData348) MarshalJSON() ([]byte, error) {
 
 func (o BTRadialDimensionDisplayData348) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTDimensionDisplayData323, errBTDimensionDisplayData323 := json.Marshal(o.BTDimensionDisplayData323)
+	if errBTDimensionDisplayData323 != nil {
+		return map[string]interface{}{}, errBTDimensionDisplayData323
+	}
+	errBTDimensionDisplayData323 = json.Unmarshal([]byte(serializedBTDimensionDisplayData323), &toSerialize)
+	if errBTDimensionDisplayData323 != nil {
+		return map[string]interface{}{}, errBTDimensionDisplayData323
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -412,3 +421,5 @@ func (v *NullableBTRadialDimensionDisplayData348) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_read_only_parameter_spec_1889.go b/onshape/model_bt_read_only_parameter_spec_1889.go
index 72e140ce4..0c0e4598a 100644
--- a/onshape/model_bt_read_only_parameter_spec_1889.go
+++ b/onshape/model_bt_read_only_parameter_spec_1889.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTReadOnlyParameterSpec1889{}
 
 // BTReadOnlyParameterSpec1889 struct for BTReadOnlyParameterSpec1889
 type BTReadOnlyParameterSpec1889 struct {
+	BTParameterSpec-6
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTReadOnlyParameterSpec1889) SetBtType(v string) {
 }
 
 func (o BTReadOnlyParameterSpec1889) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTReadOnlyParameterSpec1889) MarshalJSON() ([]byte, error) {
 
 func (o BTReadOnlyParameterSpec1889) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTParameterSpec6, errBTParameterSpec6 := json.Marshal(o.BTParameterSpec6)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
+	errBTParameterSpec6 = json.Unmarshal([]byte(serializedBTParameterSpec6), &toSerialize)
+	if errBTParameterSpec6 != nil {
+		return map[string]interface{}{}, errBTParameterSpec6
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTReadOnlyParameterSpec1889) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_resource_owner_info.go b/onshape/model_bt_resource_owner_info.go
index b0352c869..18996bbd9 100644
--- a/onshape/model_bt_resource_owner_info.go
+++ b/onshape/model_bt_resource_owner_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTResourceOwnerInfo type satisfies the MappedNullable interface at compile time
@@ -20,10 +22,13 @@ var _ MappedNullable = &BTResourceOwnerInfo{}
 
 // BTResourceOwnerInfo struct for BTResourceOwnerInfo
 type BTResourceOwnerInfo struct {
+	BTGlobalTreeNodeInfo
 	IsEnterpriseEdu *bool  `json:"isEnterpriseEdu,omitempty"`
 	State           *int32 `json:"state,omitempty"`
 }
 
+type _BTResourceOwnerInfo BTResourceOwnerInfo
+
 // NewBTResourceOwnerInfo instantiates a new BTResourceOwnerInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -125,6 +130,43 @@ func (o BTResourceOwnerInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTResourceOwnerInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTResourceOwnerInfo := _BTResourceOwnerInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTResourceOwnerInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTResourceOwnerInfo(varBTResourceOwnerInfo)
+
+	return err
+}
+
 type NullableBTResourceOwnerInfo struct {
 	value *BTResourceOwnerInfo
 	isSet bool
diff --git a/onshape/model_bt_revision_custom_data_2090.go b/onshape/model_bt_revision_custom_data_2090.go
index bfa03c536..13a765593 100644
--- a/onshape/model_bt_revision_custom_data_2090.go
+++ b/onshape/model_bt_revision_custom_data_2090.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTRevisionCustomData2090{}
 
 // BTRevisionCustomData2090 struct for BTRevisionCustomData2090
 type BTRevisionCustomData2090 struct {
+	BTReferenceCustomData-1551
 	// Type of JSON object.
-	BtType                 *string `json:"btType,omitempty"`
-	PartNumber             *string `json:"partNumber,omitempty"`
-	Revision               *string `json:"revision,omitempty"`
-	ValidRevisionReference *bool   `json:"validRevisionReference,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	PartNumber *string `json:"partNumber,omitempty"`
+	Revision *string `json:"revision,omitempty"`
+	ValidRevisionReference *bool `json:"validRevisionReference,omitempty"`
 }
 
 // NewBTRevisionCustomData2090 instantiates a new BTRevisionCustomData2090 object
@@ -173,7 +174,7 @@ func (o *BTRevisionCustomData2090) SetValidRevisionReference(v bool) {
 }
 
 func (o BTRevisionCustomData2090) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTRevisionCustomData2090) MarshalJSON() ([]byte, error) {
 
 func (o BTRevisionCustomData2090) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTReferenceCustomData1551, errBTReferenceCustomData1551 := json.Marshal(o.BTReferenceCustomData1551)
+	if errBTReferenceCustomData1551 != nil {
+		return map[string]interface{}{}, errBTReferenceCustomData1551
+	}
+	errBTReferenceCustomData1551 = json.Unmarshal([]byte(serializedBTReferenceCustomData1551), &toSerialize)
+	if errBTReferenceCustomData1551 != nil {
+		return map[string]interface{}{}, errBTReferenceCustomData1551
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTRevisionCustomData2090) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_rho_dimension_display_data_2892.go b/onshape/model_bt_rho_dimension_display_data_2892.go
index 571c084cf..cdd71d8c7 100644
--- a/onshape/model_bt_rho_dimension_display_data_2892.go
+++ b/onshape/model_bt_rho_dimension_display_data_2892.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTRhoDimensionDisplayData2892{}
 
 // BTRhoDimensionDisplayData2892 struct for BTRhoDimensionDisplayData2892
 type BTRhoDimensionDisplayData2892 struct {
+	BTDimensionDisplayData-323
 	// Type of JSON object.
-	BtType    *string  `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	PositionX *float64 `json:"positionX,omitempty"`
 	PositionY *float64 `json:"positionY,omitempty"`
 }
@@ -140,7 +141,7 @@ func (o *BTRhoDimensionDisplayData2892) SetPositionY(v float64) {
 }
 
 func (o BTRhoDimensionDisplayData2892) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTRhoDimensionDisplayData2892) MarshalJSON() ([]byte, error) {
 
 func (o BTRhoDimensionDisplayData2892) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTDimensionDisplayData323, errBTDimensionDisplayData323 := json.Marshal(o.BTDimensionDisplayData323)
+	if errBTDimensionDisplayData323 != nil {
+		return map[string]interface{}{}, errBTDimensionDisplayData323
+	}
+	errBTDimensionDisplayData323 = json.Unmarshal([]byte(serializedBTDimensionDisplayData323), &toSerialize)
+	if errBTDimensionDisplayData323 != nil {
+		return map[string]interface{}{}, errBTDimensionDisplayData323
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTRhoDimensionDisplayData2892) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_section_geometry_filter_4161.go b/onshape/model_bt_section_geometry_filter_4161.go
index 8fb55b294..b5c85e640 100644
--- a/onshape/model_bt_section_geometry_filter_4161.go
+++ b/onshape/model_bt_section_geometry_filter_4161.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTSectionGeometryFilter4161{}
 
 // BTSectionGeometryFilter4161 struct for BTSectionGeometryFilter4161
 type BTSectionGeometryFilter4161 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType            *string `json:"btType,omitempty"`
-	IsSectionGeometry *bool   `json:"isSectionGeometry,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsSectionGeometry *bool `json:"isSectionGeometry,omitempty"`
 }
 
 // NewBTSectionGeometryFilter4161 instantiates a new BTSectionGeometryFilter4161 object
@@ -107,7 +108,7 @@ func (o *BTSectionGeometryFilter4161) SetIsSectionGeometry(v bool) {
 }
 
 func (o BTSectionGeometryFilter4161) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTSectionGeometryFilter4161) MarshalJSON() ([]byte, error) {
 
 func (o BTSectionGeometryFilter4161) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTSectionGeometryFilter4161) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_set_feature_rollback_call_1899.go b/onshape/model_bt_set_feature_rollback_call_1899.go
index 19946d018..a49732d3c 100644
--- a/onshape/model_bt_set_feature_rollback_call_1899.go
+++ b/onshape/model_bt_set_feature_rollback_call_1899.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTSetFeatureRollbackCall1899{}
 
 // BTSetFeatureRollbackCall1899 struct for BTSetFeatureRollbackCall1899
 type BTSetFeatureRollbackCall1899 struct {
+	BTFeatureApiBase-1430
 	// Type of JSON object.
-	BtType        *string `json:"btType,omitempty"`
-	RollbackIndex *int32  `json:"rollbackIndex,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	RollbackIndex *int32 `json:"rollbackIndex,omitempty"`
 }
 
 // NewBTSetFeatureRollbackCall1899 instantiates a new BTSetFeatureRollbackCall1899 object
@@ -107,7 +108,7 @@ func (o *BTSetFeatureRollbackCall1899) SetRollbackIndex(v int32) {
 }
 
 func (o BTSetFeatureRollbackCall1899) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTSetFeatureRollbackCall1899) MarshalJSON() ([]byte, error) {
 
 func (o BTSetFeatureRollbackCall1899) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFeatureApiBase1430, errBTFeatureApiBase1430 := json.Marshal(o.BTFeatureApiBase1430)
+	if errBTFeatureApiBase1430 != nil {
+		return map[string]interface{}{}, errBTFeatureApiBase1430
+	}
+	errBTFeatureApiBase1430 = json.Unmarshal([]byte(serializedBTFeatureApiBase1430), &toSerialize)
+	if errBTFeatureApiBase1430 != nil {
+		return map[string]interface{}{}, errBTFeatureApiBase1430
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTSetFeatureRollbackCall1899) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_simulation_face_2147.go b/onshape/model_bt_simulation_face_2147.go
index 3b84fcd4a..831832582 100644
--- a/onshape/model_bt_simulation_face_2147.go
+++ b/onshape/model_bt_simulation_face_2147.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTSimulationFace2147{}
 
 // BTSimulationFace2147 struct for BTSimulationFace2147
 type BTSimulationFace2147 struct {
+	BTEntityFace-31
 	// Type of JSON object.
-	BtType                     *string              `json:"btType,omitempty"`
-	Bounds                     *BTBoundingBox1052   `json:"bounds,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Bounds *BTBoundingBox1052 `json:"bounds,omitempty"`
 	SampleTrianglePointIndices *BTImmutableIntArray `json:"sampleTrianglePointIndices,omitempty"`
-	TriangleNormalIndices      *BTImmutableIntArray `json:"triangleNormalIndices,omitempty"`
-	TrianglePointIndices       *BTImmutableIntArray `json:"trianglePointIndices,omitempty"`
+	TriangleNormalIndices *BTImmutableIntArray `json:"triangleNormalIndices,omitempty"`
+	TrianglePointIndices *BTImmutableIntArray `json:"trianglePointIndices,omitempty"`
 }
 
 // NewBTSimulationFace2147 instantiates a new BTSimulationFace2147 object
@@ -206,7 +207,7 @@ func (o *BTSimulationFace2147) SetTrianglePointIndices(v BTImmutableIntArray) {
 }
 
 func (o BTSimulationFace2147) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTSimulationFace2147) MarshalJSON() ([]byte, error) {
 
 func (o BTSimulationFace2147) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTEntityFace31, errBTEntityFace31 := json.Marshal(o.BTEntityFace31)
+	if errBTEntityFace31 != nil {
+		return map[string]interface{}{}, errBTEntityFace31
+	}
+	errBTEntityFace31 = json.Unmarshal([]byte(serializedBTEntityFace31), &toSerialize)
+	if errBTEntityFace31 != nil {
+		return map[string]interface{}{}, errBTEntityFace31
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTSimulationFace2147) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_simulation_instance_3093.go b/onshape/model_bt_simulation_instance_3093.go
index 39f90df1f..88c8a583c 100644
--- a/onshape/model_bt_simulation_instance_3093.go
+++ b/onshape/model_bt_simulation_instance_3093.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTSimulationInstance3093{}
 
 // BTSimulationInstance3093 struct for BTSimulationInstance3093
 type BTSimulationInstance3093 struct {
+	BTMNode-19
 	// Type of JSON object.
-	BtType       *string `json:"btType,omitempty"`
-	IsModal      *bool   `json:"isModal,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsModal *bool `json:"isModal,omitempty"`
 	SimulationId *string `json:"simulationId,omitempty"`
 }
 
@@ -140,7 +141,7 @@ func (o *BTSimulationInstance3093) SetSimulationId(v string) {
 }
 
 func (o BTSimulationInstance3093) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTSimulationInstance3093) MarshalJSON() ([]byte, error) {
 
 func (o BTSimulationInstance3093) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMNode19, errBTMNode19 := json.Marshal(o.BTMNode19)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
+	errBTMNode19 = json.Unmarshal([]byte(serializedBTMNode19), &toSerialize)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTSimulationInstance3093) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_simulation_table_column_info_1785.go b/onshape/model_bt_simulation_table_column_info_1785.go
index 6dca1b0ce..c838ec16b 100644
--- a/onshape/model_bt_simulation_table_column_info_1785.go
+++ b/onshape/model_bt_simulation_table_column_info_1785.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTSimulationTableColumnInfo1785{}
 
 // BTSimulationTableColumnInfo1785 struct for BTSimulationTableColumnInfo1785
 type BTSimulationTableColumnInfo1785 struct {
+	BTTableColumnInfo-1222
 	// Type of JSON object.
-	BtType             *string                                `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	CrossHighlightData *BTTableAssemblyCrossHighlightData2675 `json:"crossHighlightData,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTSimulationTableColumnInfo1785) SetCrossHighlightData(v BTTableAssembl
 }
 
 func (o BTSimulationTableColumnInfo1785) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTSimulationTableColumnInfo1785) MarshalJSON() ([]byte, error) {
 
 func (o BTSimulationTableColumnInfo1785) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableColumnInfo1222, errBTTableColumnInfo1222 := json.Marshal(o.BTTableColumnInfo1222)
+	if errBTTableColumnInfo1222 != nil {
+		return map[string]interface{}{}, errBTTableColumnInfo1222
+	}
+	errBTTableColumnInfo1222 = json.Unmarshal([]byte(serializedBTTableColumnInfo1222), &toSerialize)
+	if errBTTableColumnInfo1222 != nil {
+		return map[string]interface{}{}, errBTTableColumnInfo1222
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTSimulationTableColumnInfo1785) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_single_assembly_reference_display_data_1557.go b/onshape/model_bt_single_assembly_reference_display_data_1557.go
index e2568f53a..6f51a0916 100644
--- a/onshape/model_bt_single_assembly_reference_display_data_1557.go
+++ b/onshape/model_bt_single_assembly_reference_display_data_1557.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTSingleAssemblyReferenceDisplayData1557{}
 
 // BTSingleAssemblyReferenceDisplayData1557 struct for BTSingleAssemblyReferenceDisplayData1557
 type BTSingleAssemblyReferenceDisplayData1557 struct {
+	BTSingleReferenceDisplayData-1943
 	// Type of JSON object.
-	BtType               *string                      `json:"btType,omitempty"`
-	AssemblyDisplayData  *BTRootAssemblyDisplayData96 `json:"assemblyDisplayData,omitempty"`
-	HasConfiguration     *bool                        `json:"hasConfiguration,omitempty"`
-	OccurrencesToExclude []BTOccurrence74             `json:"occurrencesToExclude,omitempty"`
-	Transform            *BTBSMatrix386               `json:"transform,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	AssemblyDisplayData *BTRootAssemblyDisplayData96 `json:"assemblyDisplayData,omitempty"`
+	HasConfiguration *bool `json:"hasConfiguration,omitempty"`
+	OccurrencesToExclude []BTOccurrence74 `json:"occurrencesToExclude,omitempty"`
+	Transform *BTBSMatrix386 `json:"transform,omitempty"`
 }
 
 // NewBTSingleAssemblyReferenceDisplayData1557 instantiates a new BTSingleAssemblyReferenceDisplayData1557 object
@@ -206,7 +207,7 @@ func (o *BTSingleAssemblyReferenceDisplayData1557) SetTransform(v BTBSMatrix386)
 }
 
 func (o BTSingleAssemblyReferenceDisplayData1557) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTSingleAssemblyReferenceDisplayData1557) MarshalJSON() ([]byte, error)
 
 func (o BTSingleAssemblyReferenceDisplayData1557) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSingleReferenceDisplayData1943, errBTSingleReferenceDisplayData1943 := json.Marshal(o.BTSingleReferenceDisplayData1943)
+	if errBTSingleReferenceDisplayData1943 != nil {
+		return map[string]interface{}{}, errBTSingleReferenceDisplayData1943
+	}
+	errBTSingleReferenceDisplayData1943 = json.Unmarshal([]byte(serializedBTSingleReferenceDisplayData1943), &toSerialize)
+	if errBTSingleReferenceDisplayData1943 != nil {
+		return map[string]interface{}{}, errBTSingleReferenceDisplayData1943
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTSingleAssemblyReferenceDisplayData1557) UnmarshalJSON(src []b
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sketch_arc_display_data_349.go b/onshape/model_bt_sketch_arc_display_data_349.go
index 54e6d3465..050235e8a 100644
--- a/onshape/model_bt_sketch_arc_display_data_349.go
+++ b/onshape/model_bt_sketch_arc_display_data_349.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTSketchArcDisplayData349{}
 
 // BTSketchArcDisplayData349 struct for BTSketchArcDisplayData349
 type BTSketchArcDisplayData349 struct {
+	BTSketchEntityDisplayData-354
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTSketchArcDisplayData349) SetBtType(v string) {
 }
 
 func (o BTSketchArcDisplayData349) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTSketchArcDisplayData349) MarshalJSON() ([]byte, error) {
 
 func (o BTSketchArcDisplayData349) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSketchEntityDisplayData354, errBTSketchEntityDisplayData354 := json.Marshal(o.BTSketchEntityDisplayData354)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
+	errBTSketchEntityDisplayData354 = json.Unmarshal([]byte(serializedBTSketchEntityDisplayData354), &toSerialize)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTSketchArcDisplayData349) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sketch_circle_display_data_350.go b/onshape/model_bt_sketch_circle_display_data_350.go
index 8e3b485c9..2709b5adc 100644
--- a/onshape/model_bt_sketch_circle_display_data_350.go
+++ b/onshape/model_bt_sketch_circle_display_data_350.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTSketchCircleDisplayData350{}
 
 // BTSketchCircleDisplayData350 struct for BTSketchCircleDisplayData350
 type BTSketchCircleDisplayData350 struct {
+	BTSketchEntityDisplayData-354
 	// Type of JSON object.
-	BtType *string  `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Radius *float64 `json:"radius,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTSketchCircleDisplayData350) SetRadius(v float64) {
 }
 
 func (o BTSketchCircleDisplayData350) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTSketchCircleDisplayData350) MarshalJSON() ([]byte, error) {
 
 func (o BTSketchCircleDisplayData350) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSketchEntityDisplayData354, errBTSketchEntityDisplayData354 := json.Marshal(o.BTSketchEntityDisplayData354)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
+	errBTSketchEntityDisplayData354 = json.Unmarshal([]byte(serializedBTSketchEntityDisplayData354), &toSerialize)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTSketchCircleDisplayData350) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sketch_composite_entity_display_data_1093.go b/onshape/model_bt_sketch_composite_entity_display_data_1093.go
index 6e3e15056..3ba158c58 100644
--- a/onshape/model_bt_sketch_composite_entity_display_data_1093.go
+++ b/onshape/model_bt_sketch_composite_entity_display_data_1093.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTSketchCompositeEntityDisplayData1093{}
 
 // BTSketchCompositeEntityDisplayData1093 struct for BTSketchCompositeEntityDisplayData1093
 type BTSketchCompositeEntityDisplayData1093 struct {
+	BTSketchEntityDisplayData-354
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTSketchCompositeEntityDisplayData1093) SetBtType(v string) {
 }
 
 func (o BTSketchCompositeEntityDisplayData1093) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTSketchCompositeEntityDisplayData1093) MarshalJSON() ([]byte, error) {
 
 func (o BTSketchCompositeEntityDisplayData1093) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSketchEntityDisplayData354, errBTSketchEntityDisplayData354 := json.Marshal(o.BTSketchEntityDisplayData354)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
+	errBTSketchEntityDisplayData354 = json.Unmarshal([]byte(serializedBTSketchEntityDisplayData354), &toSerialize)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTSketchCompositeEntityDisplayData1093) UnmarshalJSON(src []byt
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sketch_conic_display_data_1085.go b/onshape/model_bt_sketch_conic_display_data_1085.go
index adaa822d8..e7fb01384 100644
--- a/onshape/model_bt_sketch_conic_display_data_1085.go
+++ b/onshape/model_bt_sketch_conic_display_data_1085.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTSketchConicDisplayData1085{}
 
 // BTSketchConicDisplayData1085 struct for BTSketchConicDisplayData1085
 type BTSketchConicDisplayData1085 struct {
+	BTSketchEntityDisplayData-354
 	// Type of JSON object.
-	BtType *string  `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Offset *float64 `json:"offset,omitempty"`
-	Rho    *float64 `json:"rho,omitempty"`
+	Rho *float64 `json:"rho,omitempty"`
 }
 
 // NewBTSketchConicDisplayData1085 instantiates a new BTSketchConicDisplayData1085 object
@@ -140,7 +141,7 @@ func (o *BTSketchConicDisplayData1085) SetRho(v float64) {
 }
 
 func (o BTSketchConicDisplayData1085) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTSketchConicDisplayData1085) MarshalJSON() ([]byte, error) {
 
 func (o BTSketchConicDisplayData1085) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSketchEntityDisplayData354, errBTSketchEntityDisplayData354 := json.Marshal(o.BTSketchEntityDisplayData354)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
+	errBTSketchEntityDisplayData354 = json.Unmarshal([]byte(serializedBTSketchEntityDisplayData354), &toSerialize)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTSketchConicDisplayData1085) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sketch_ellipse_display_data_712.go b/onshape/model_bt_sketch_ellipse_display_data_712.go
index 1d9c890de..5645eef8e 100644
--- a/onshape/model_bt_sketch_ellipse_display_data_712.go
+++ b/onshape/model_bt_sketch_ellipse_display_data_712.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTSketchEllipseDisplayData712{}
 
 // BTSketchEllipseDisplayData712 struct for BTSketchEllipseDisplayData712
 type BTSketchEllipseDisplayData712 struct {
+	BTSketchEntityDisplayData-354
 	// Type of JSON object.
-	BtType      *string  `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	MinorRadius *float64 `json:"minorRadius,omitempty"`
-	Offset      *float64 `json:"offset,omitempty"`
-	Radius      *float64 `json:"radius,omitempty"`
+	Offset *float64 `json:"offset,omitempty"`
+	Radius *float64 `json:"radius,omitempty"`
 }
 
 // NewBTSketchEllipseDisplayData712 instantiates a new BTSketchEllipseDisplayData712 object
@@ -173,7 +174,7 @@ func (o *BTSketchEllipseDisplayData712) SetRadius(v float64) {
 }
 
 func (o BTSketchEllipseDisplayData712) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTSketchEllipseDisplayData712) MarshalJSON() ([]byte, error) {
 
 func (o BTSketchEllipseDisplayData712) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSketchEntityDisplayData354, errBTSketchEntityDisplayData354 := json.Marshal(o.BTSketchEntityDisplayData354)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
+	errBTSketchEntityDisplayData354 = json.Unmarshal([]byte(serializedBTSketchEntityDisplayData354), &toSerialize)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTSketchEllipseDisplayData712) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sketch_elliptical_arc_display_data_892.go b/onshape/model_bt_sketch_elliptical_arc_display_data_892.go
index 57ad60587..57c8fb97f 100644
--- a/onshape/model_bt_sketch_elliptical_arc_display_data_892.go
+++ b/onshape/model_bt_sketch_elliptical_arc_display_data_892.go
@@ -20,13 +20,14 @@ var _ MappedNullable = &BTSketchEllipticalArcDisplayData892{}
 
 // BTSketchEllipticalArcDisplayData892 struct for BTSketchEllipticalArcDisplayData892
 type BTSketchEllipticalArcDisplayData892 struct {
+	BTSketchEntityDisplayData-354
 	// Type of JSON object.
-	BtType      *string  `json:"btType,omitempty"`
-	EndParam    *float64 `json:"endParam,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	EndParam *float64 `json:"endParam,omitempty"`
 	MinorRadius *float64 `json:"minorRadius,omitempty"`
-	Offset      *float64 `json:"offset,omitempty"`
-	Radius      *float64 `json:"radius,omitempty"`
-	StartParam  *float64 `json:"startParam,omitempty"`
+	Offset *float64 `json:"offset,omitempty"`
+	Radius *float64 `json:"radius,omitempty"`
+	StartParam *float64 `json:"startParam,omitempty"`
 }
 
 // NewBTSketchEllipticalArcDisplayData892 instantiates a new BTSketchEllipticalArcDisplayData892 object
@@ -239,7 +240,7 @@ func (o *BTSketchEllipticalArcDisplayData892) SetStartParam(v float64) {
 }
 
 func (o BTSketchEllipticalArcDisplayData892) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -248,6 +249,14 @@ func (o BTSketchEllipticalArcDisplayData892) MarshalJSON() ([]byte, error) {
 
 func (o BTSketchEllipticalArcDisplayData892) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSketchEntityDisplayData354, errBTSketchEntityDisplayData354 := json.Marshal(o.BTSketchEntityDisplayData354)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
+	errBTSketchEntityDisplayData354 = json.Unmarshal([]byte(serializedBTSketchEntityDisplayData354), &toSerialize)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -304,3 +313,5 @@ func (v *NullableBTSketchEllipticalArcDisplayData892) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sketch_entity_25.go b/onshape/model_bt_sketch_entity_25.go
index 5f883cb47..733fb40a5 100644
--- a/onshape/model_bt_sketch_entity_25.go
+++ b/onshape/model_bt_sketch_entity_25.go
@@ -20,16 +20,17 @@ var _ MappedNullable = &BTSketchEntity25{}
 
 // BTSketchEntity25 struct for BTSketchEntity25
 type BTSketchEntity25 struct {
+	BTFeatureEntity-34
 	// Type of JSON object.
-	BtType                     *string             `json:"btType,omitempty"`
-	IsConstruction             *bool               `json:"isConstruction,omitempty"`
-	IsFromSplineControlPolygon *bool               `json:"isFromSplineControlPolygon,omitempty"`
-	IsFromSplineHandle         *bool               `json:"isFromSplineHandle,omitempty"`
-	IsTextStroke               *bool               `json:"isTextStroke,omitempty"`
-	IsUserPoint                *bool               `json:"isUserPoint,omitempty"`
-	SketchCurveType            *GBTSketchCurveType `json:"sketchCurveType,omitempty"`
-	SketchEntityId             *string             `json:"sketchEntityId,omitempty"`
-	SolveStatus                *int32              `json:"solveStatus,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsConstruction *bool `json:"isConstruction,omitempty"`
+	IsFromSplineControlPolygon *bool `json:"isFromSplineControlPolygon,omitempty"`
+	IsFromSplineHandle *bool `json:"isFromSplineHandle,omitempty"`
+	IsTextStroke *bool `json:"isTextStroke,omitempty"`
+	IsUserPoint *bool `json:"isUserPoint,omitempty"`
+	SketchCurveType *GBTSketchCurveType `json:"sketchCurveType,omitempty"`
+	SketchEntityId *string `json:"sketchEntityId,omitempty"`
+	SolveStatus *int32 `json:"solveStatus,omitempty"`
 }
 
 // NewBTSketchEntity25 instantiates a new BTSketchEntity25 object
@@ -338,7 +339,7 @@ func (o *BTSketchEntity25) SetSolveStatus(v int32) {
 }
 
 func (o BTSketchEntity25) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -347,6 +348,14 @@ func (o BTSketchEntity25) MarshalJSON() ([]byte, error) {
 
 func (o BTSketchEntity25) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFeatureEntity34, errBTFeatureEntity34 := json.Marshal(o.BTFeatureEntity34)
+	if errBTFeatureEntity34 != nil {
+		return map[string]interface{}{}, errBTFeatureEntity34
+	}
+	errBTFeatureEntity34 = json.Unmarshal([]byte(serializedBTFeatureEntity34), &toSerialize)
+	if errBTFeatureEntity34 != nil {
+		return map[string]interface{}{}, errBTFeatureEntity34
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -412,3 +421,5 @@ func (v *NullableBTSketchEntity25) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sketch_line_display_data_357.go b/onshape/model_bt_sketch_line_display_data_357.go
index ff8653667..09f41d0c3 100644
--- a/onshape/model_bt_sketch_line_display_data_357.go
+++ b/onshape/model_bt_sketch_line_display_data_357.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTSketchLineDisplayData357{}
 
 // BTSketchLineDisplayData357 struct for BTSketchLineDisplayData357
 type BTSketchLineDisplayData357 struct {
+	BTSketchEntityDisplayData-354
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTSketchLineDisplayData357) SetBtType(v string) {
 }
 
 func (o BTSketchLineDisplayData357) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTSketchLineDisplayData357) MarshalJSON() ([]byte, error) {
 
 func (o BTSketchLineDisplayData357) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSketchEntityDisplayData354, errBTSketchEntityDisplayData354 := json.Marshal(o.BTSketchEntityDisplayData354)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
+	errBTSketchEntityDisplayData354 = json.Unmarshal([]byte(serializedBTSketchEntityDisplayData354), &toSerialize)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTSketchLineDisplayData357) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sketch_object_filter_184.go b/onshape/model_bt_sketch_object_filter_184.go
index d437525ff..57bd29660 100644
--- a/onshape/model_bt_sketch_object_filter_184.go
+++ b/onshape/model_bt_sketch_object_filter_184.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTSketchObjectFilter184{}
 
 // BTSketchObjectFilter184 struct for BTSketchObjectFilter184
 type BTSketchObjectFilter184 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType         *string              `json:"btType,omitempty"`
-	IsSketchObject *bool                `json:"isSketchObject,omitempty"`
-	ObjectType     *GBTSketchObjectType `json:"objectType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsSketchObject *bool `json:"isSketchObject,omitempty"`
+	ObjectType *GBTSketchObjectType `json:"objectType,omitempty"`
 }
 
 // NewBTSketchObjectFilter184 instantiates a new BTSketchObjectFilter184 object
@@ -140,7 +141,7 @@ func (o *BTSketchObjectFilter184) SetObjectType(v GBTSketchObjectType) {
 }
 
 func (o BTSketchObjectFilter184) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTSketchObjectFilter184) MarshalJSON() ([]byte, error) {
 
 func (o BTSketchObjectFilter184) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTSketchObjectFilter184) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sketch_point_display_data_358.go b/onshape/model_bt_sketch_point_display_data_358.go
index 0caf23bb6..501a04edb 100644
--- a/onshape/model_bt_sketch_point_display_data_358.go
+++ b/onshape/model_bt_sketch_point_display_data_358.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTSketchPointDisplayData358{}
 
 // BTSketchPointDisplayData358 struct for BTSketchPointDisplayData358
 type BTSketchPointDisplayData358 struct {
+	BTSketchEntityDisplayData-354
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTSketchPointDisplayData358) SetBtType(v string) {
 }
 
 func (o BTSketchPointDisplayData358) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTSketchPointDisplayData358) MarshalJSON() ([]byte, error) {
 
 func (o BTSketchPointDisplayData358) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSketchEntityDisplayData354, errBTSketchEntityDisplayData354 := json.Marshal(o.BTSketchEntityDisplayData354)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
+	errBTSketchEntityDisplayData354 = json.Unmarshal([]byte(serializedBTSketchEntityDisplayData354), &toSerialize)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTSketchPointDisplayData358) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sketch_solve_status_filter_3657.go b/onshape/model_bt_sketch_solve_status_filter_3657.go
index 9ffbce6ad..5d539e296 100644
--- a/onshape/model_bt_sketch_solve_status_filter_3657.go
+++ b/onshape/model_bt_sketch_solve_status_filter_3657.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTSketchSolveStatusFilter3657{}
 
 // BTSketchSolveStatusFilter3657 struct for BTSketchSolveStatusFilter3657
 type BTSketchSolveStatusFilter3657 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType      *string         `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	SolveStatus *GBTMGeomStatus `json:"solveStatus,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTSketchSolveStatusFilter3657) SetSolveStatus(v GBTMGeomStatus) {
 }
 
 func (o BTSketchSolveStatusFilter3657) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTSketchSolveStatusFilter3657) MarshalJSON() ([]byte, error) {
 
 func (o BTSketchSolveStatusFilter3657) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTSketchSolveStatusFilter3657) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sketch_spline_display_data_359.go b/onshape/model_bt_sketch_spline_display_data_359.go
index 2cc77c6bf..b988a5f92 100644
--- a/onshape/model_bt_sketch_spline_display_data_359.go
+++ b/onshape/model_bt_sketch_spline_display_data_359.go
@@ -20,16 +20,17 @@ var _ MappedNullable = &BTSketchSplineDisplayData359{}
 
 // BTSketchSplineDisplayData359 struct for BTSketchSplineDisplayData359
 type BTSketchSplineDisplayData359 struct {
+	BTSketchEntityDisplayData-354
 	// Type of JSON object.
-	BtType             *string  `json:"btType,omitempty"`
-	Closed             *bool    `json:"closed,omitempty"`
-	ControlPointCount  *int32   `json:"controlPointCount,omitempty"`
-	Degree             *int32   `json:"degree,omitempty"`
-	HasHandlesInSketch *bool    `json:"hasHandlesInSketch,omitempty"`
-	MaximumParameter   *float64 `json:"maximumParameter,omitempty"`
-	MinimumParameter   *float64 `json:"minimumParameter,omitempty"`
-	Rational           *bool    `json:"rational,omitempty"`
-	Segment            *bool    `json:"segment,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Closed *bool `json:"closed,omitempty"`
+	ControlPointCount *int32 `json:"controlPointCount,omitempty"`
+	Degree *int32 `json:"degree,omitempty"`
+	HasHandlesInSketch *bool `json:"hasHandlesInSketch,omitempty"`
+	MaximumParameter *float64 `json:"maximumParameter,omitempty"`
+	MinimumParameter *float64 `json:"minimumParameter,omitempty"`
+	Rational *bool `json:"rational,omitempty"`
+	Segment *bool `json:"segment,omitempty"`
 }
 
 // NewBTSketchSplineDisplayData359 instantiates a new BTSketchSplineDisplayData359 object
@@ -338,7 +339,7 @@ func (o *BTSketchSplineDisplayData359) SetSegment(v bool) {
 }
 
 func (o BTSketchSplineDisplayData359) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -347,6 +348,14 @@ func (o BTSketchSplineDisplayData359) MarshalJSON() ([]byte, error) {
 
 func (o BTSketchSplineDisplayData359) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSketchEntityDisplayData354, errBTSketchEntityDisplayData354 := json.Marshal(o.BTSketchEntityDisplayData354)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
+	errBTSketchEntityDisplayData354 = json.Unmarshal([]byte(serializedBTSketchEntityDisplayData354), &toSerialize)
+	if errBTSketchEntityDisplayData354 != nil {
+		return map[string]interface{}{}, errBTSketchEntityDisplayData354
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -412,3 +421,5 @@ func (v *NullableBTSketchSplineDisplayData359) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sketch_text_display_data_1707.go b/onshape/model_bt_sketch_text_display_data_1707.go
index a904c9100..1d945be9b 100644
--- a/onshape/model_bt_sketch_text_display_data_1707.go
+++ b/onshape/model_bt_sketch_text_display_data_1707.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTSketchTextDisplayData1707{}
 
 // BTSketchTextDisplayData1707 struct for BTSketchTextDisplayData1707
 type BTSketchTextDisplayData1707 struct {
+	BTSketchCompositeEntityDisplayData-1093
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTSketchTextDisplayData1707) SetBtType(v string) {
 }
 
 func (o BTSketchTextDisplayData1707) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTSketchTextDisplayData1707) MarshalJSON() ([]byte, error) {
 
 func (o BTSketchTextDisplayData1707) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSketchCompositeEntityDisplayData1093, errBTSketchCompositeEntityDisplayData1093 := json.Marshal(o.BTSketchCompositeEntityDisplayData1093)
+	if errBTSketchCompositeEntityDisplayData1093 != nil {
+		return map[string]interface{}{}, errBTSketchCompositeEntityDisplayData1093
+	}
+	errBTSketchCompositeEntityDisplayData1093 = json.Unmarshal([]byte(serializedBTSketchCompositeEntityDisplayData1093), &toSerialize)
+	if errBTSketchCompositeEntityDisplayData1093 != nil {
+		return map[string]interface{}{}, errBTSketchCompositeEntityDisplayData1093
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTSketchTextDisplayData1707) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sphere_description_1263.go b/onshape/model_bt_sphere_description_1263.go
index 3d666e87f..329fa6fdf 100644
--- a/onshape/model_bt_sphere_description_1263.go
+++ b/onshape/model_bt_sphere_description_1263.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTSphereDescription1263{}
 
 // BTSphereDescription1263 struct for BTSphereDescription1263
 type BTSphereDescription1263 struct {
+	BTSurfaceDescription-1564
 	// Type of JSON object.
-	BtType *string  `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Radius *float64 `json:"radius,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTSphereDescription1263) SetRadius(v float64) {
 }
 
 func (o BTSphereDescription1263) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTSphereDescription1263) MarshalJSON() ([]byte, error) {
 
 func (o BTSphereDescription1263) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSurfaceDescription1564, errBTSurfaceDescription1564 := json.Marshal(o.BTSurfaceDescription1564)
+	if errBTSurfaceDescription1564 != nil {
+		return map[string]interface{}{}, errBTSurfaceDescription1564
+	}
+	errBTSurfaceDescription1564 = json.Unmarshal([]byte(serializedBTSurfaceDescription1564), &toSerialize)
+	if errBTSurfaceDescription1564 != nil {
+		return map[string]interface{}{}, errBTSurfaceDescription1564
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTSphereDescription1263) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_spline_control_polygon_filter_1130.go b/onshape/model_bt_spline_control_polygon_filter_1130.go
index 0f05708a7..42c1568da 100644
--- a/onshape/model_bt_spline_control_polygon_filter_1130.go
+++ b/onshape/model_bt_spline_control_polygon_filter_1130.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTSplineControlPolygonFilter1130{}
 
 // BTSplineControlPolygonFilter1130 struct for BTSplineControlPolygonFilter1130
 type BTSplineControlPolygonFilter1130 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType                     *string `json:"btType,omitempty"`
-	AllowsSplineControlPolygon *bool   `json:"allowsSplineControlPolygon,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	AllowsSplineControlPolygon *bool `json:"allowsSplineControlPolygon,omitempty"`
 }
 
 // NewBTSplineControlPolygonFilter1130 instantiates a new BTSplineControlPolygonFilter1130 object
@@ -107,7 +108,7 @@ func (o *BTSplineControlPolygonFilter1130) SetAllowsSplineControlPolygon(v bool)
 }
 
 func (o BTSplineControlPolygonFilter1130) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTSplineControlPolygonFilter1130) MarshalJSON() ([]byte, error) {
 
 func (o BTSplineControlPolygonFilter1130) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTSplineControlPolygonFilter1130) UnmarshalJSON(src []byte) err
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_spline_description_2118.go b/onshape/model_bt_spline_description_2118.go
index b7d319e0b..e0e520ea6 100644
--- a/onshape/model_bt_spline_description_2118.go
+++ b/onshape/model_bt_spline_description_2118.go
@@ -20,13 +20,14 @@ var _ MappedNullable = &BTSplineDescription2118{}
 
 // BTSplineDescription2118 struct for BTSplineDescription2118
 type BTSplineDescription2118 struct {
+	BTCurveDescription-1583
 	// Type of JSON object.
-	BtType        *string   `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	ControlPoints []float64 `json:"controlPoints,omitempty"`
-	Degree        *int32    `json:"degree,omitempty"`
-	IsPeriodic    *bool     `json:"isPeriodic,omitempty"`
-	IsRational    *bool     `json:"isRational,omitempty"`
-	Knots         []float64 `json:"knots,omitempty"`
+	Degree *int32 `json:"degree,omitempty"`
+	IsPeriodic *bool `json:"isPeriodic,omitempty"`
+	IsRational *bool `json:"isRational,omitempty"`
+	Knots []float64 `json:"knots,omitempty"`
 }
 
 // NewBTSplineDescription2118 instantiates a new BTSplineDescription2118 object
@@ -239,7 +240,7 @@ func (o *BTSplineDescription2118) SetKnots(v []float64) {
 }
 
 func (o BTSplineDescription2118) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -248,6 +249,14 @@ func (o BTSplineDescription2118) MarshalJSON() ([]byte, error) {
 
 func (o BTSplineDescription2118) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTCurveDescription1583, errBTCurveDescription1583 := json.Marshal(o.BTCurveDescription1583)
+	if errBTCurveDescription1583 != nil {
+		return map[string]interface{}{}, errBTCurveDescription1583
+	}
+	errBTCurveDescription1583 = json.Unmarshal([]byte(serializedBTCurveDescription1583), &toSerialize)
+	if errBTCurveDescription1583 != nil {
+		return map[string]interface{}{}, errBTCurveDescription1583
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -304,3 +313,5 @@ func (v *NullableBTSplineDescription2118) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_spline_handle_filter_2971.go b/onshape/model_bt_spline_handle_filter_2971.go
index 56b2e03d7..37dfe5367 100644
--- a/onshape/model_bt_spline_handle_filter_2971.go
+++ b/onshape/model_bt_spline_handle_filter_2971.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTSplineHandleFilter2971{}
 
 // BTSplineHandleFilter2971 struct for BTSplineHandleFilter2971
 type BTSplineHandleFilter2971 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType             *string `json:"btType,omitempty"`
-	AllowsSplineHandle *bool   `json:"allowsSplineHandle,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	AllowsSplineHandle *bool `json:"allowsSplineHandle,omitempty"`
 }
 
 // NewBTSplineHandleFilter2971 instantiates a new BTSplineHandleFilter2971 object
@@ -107,7 +108,7 @@ func (o *BTSplineHandleFilter2971) SetAllowsSplineHandle(v bool) {
 }
 
 func (o BTSplineHandleFilter2971) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTSplineHandleFilter2971) MarshalJSON() ([]byte, error) {
 
 func (o BTSplineHandleFilter2971) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTSplineHandleFilter2971) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_spun_description_657.go b/onshape/model_bt_spun_description_657.go
index 0955f4da6..db233825f 100644
--- a/onshape/model_bt_spun_description_657.go
+++ b/onshape/model_bt_spun_description_657.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTSpunDescription657{}
 
 // BTSpunDescription657 struct for BTSpunDescription657
 type BTSpunDescription657 struct {
+	BTSurfaceDescription-1564
 	// Type of JSON object.
-	BtType *string        `json:"btType,omitempty"`
-	Axis   *BTVector3d389 `json:"axis,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Axis *BTVector3d389 `json:"axis,omitempty"`
 }
 
 // NewBTSpunDescription657 instantiates a new BTSpunDescription657 object
@@ -107,7 +108,7 @@ func (o *BTSpunDescription657) SetAxis(v BTVector3d389) {
 }
 
 func (o BTSpunDescription657) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTSpunDescription657) MarshalJSON() ([]byte, error) {
 
 func (o BTSpunDescription657) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSurfaceDescription1564, errBTSurfaceDescription1564 := json.Marshal(o.BTSurfaceDescription1564)
+	if errBTSurfaceDescription1564 != nil {
+		return map[string]interface{}{}, errBTSurfaceDescription1564
+	}
+	errBTSurfaceDescription1564 = json.Unmarshal([]byte(serializedBTSurfaceDescription1564), &toSerialize)
+	if errBTSurfaceDescription1564 != nil {
+		return map[string]interface{}{}, errBTSurfaceDescription1564
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTSpunDescription657) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_string_format_block_pattern_1755.go b/onshape/model_bt_string_format_block_pattern_1755.go
index 1c2b47d19..78d199f86 100644
--- a/onshape/model_bt_string_format_block_pattern_1755.go
+++ b/onshape/model_bt_string_format_block_pattern_1755.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTStringFormatBlockPattern1755{}
 
 // BTStringFormatBlockPattern1755 struct for BTStringFormatBlockPattern1755
 type BTStringFormatBlockPattern1755 struct {
+	BTStringFormatCondition-683
 	// Type of JSON object.
-	BtType        *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	RegExpToBlock *string `json:"regExpToBlock,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTStringFormatBlockPattern1755) SetRegExpToBlock(v string) {
 }
 
 func (o BTStringFormatBlockPattern1755) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTStringFormatBlockPattern1755) MarshalJSON() ([]byte, error) {
 
 func (o BTStringFormatBlockPattern1755) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTStringFormatCondition683, errBTStringFormatCondition683 := json.Marshal(o.BTStringFormatCondition683)
+	if errBTStringFormatCondition683 != nil {
+		return map[string]interface{}{}, errBTStringFormatCondition683
+	}
+	errBTStringFormatCondition683 = json.Unmarshal([]byte(serializedBTStringFormatCondition683), &toSerialize)
+	if errBTStringFormatCondition683 != nil {
+		return map[string]interface{}{}, errBTStringFormatCondition683
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTStringFormatBlockPattern1755) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_string_format_match_pattern_2446.go b/onshape/model_bt_string_format_match_pattern_2446.go
index dc824df8c..454640d7a 100644
--- a/onshape/model_bt_string_format_match_pattern_2446.go
+++ b/onshape/model_bt_string_format_match_pattern_2446.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTStringFormatMatchPattern2446{}
 
 // BTStringFormatMatchPattern2446 struct for BTStringFormatMatchPattern2446
 type BTStringFormatMatchPattern2446 struct {
+	BTStringFormatCondition-683
 	// Type of JSON object.
-	BtType        *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	RegExpToMatch *string `json:"regExpToMatch,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTStringFormatMatchPattern2446) SetRegExpToMatch(v string) {
 }
 
 func (o BTStringFormatMatchPattern2446) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTStringFormatMatchPattern2446) MarshalJSON() ([]byte, error) {
 
 func (o BTStringFormatMatchPattern2446) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTStringFormatCondition683, errBTStringFormatCondition683 := json.Marshal(o.BTStringFormatCondition683)
+	if errBTStringFormatCondition683 != nil {
+		return map[string]interface{}{}, errBTStringFormatCondition683
+	}
+	errBTStringFormatCondition683 = json.Unmarshal([]byte(serializedBTStringFormatCondition683), &toSerialize)
+	if errBTStringFormatCondition683 != nil {
+		return map[string]interface{}{}, errBTStringFormatCondition683
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTStringFormatMatchPattern2446) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_string_maximum_length_pattern_2593.go b/onshape/model_bt_string_maximum_length_pattern_2593.go
index 668eb4207..7f1e89b3d 100644
--- a/onshape/model_bt_string_maximum_length_pattern_2593.go
+++ b/onshape/model_bt_string_maximum_length_pattern_2593.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTStringMaximumLengthPattern2593{}
 
 // BTStringMaximumLengthPattern2593 struct for BTStringMaximumLengthPattern2593
 type BTStringMaximumLengthPattern2593 struct {
+	BTStringFormatCondition-683
 	// Type of JSON object.
-	BtType        *string `json:"btType,omitempty"`
-	MaximumLength *int32  `json:"maximumLength,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	MaximumLength *int32 `json:"maximumLength,omitempty"`
 }
 
 // NewBTStringMaximumLengthPattern2593 instantiates a new BTStringMaximumLengthPattern2593 object
@@ -107,7 +108,7 @@ func (o *BTStringMaximumLengthPattern2593) SetMaximumLength(v int32) {
 }
 
 func (o BTStringMaximumLengthPattern2593) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTStringMaximumLengthPattern2593) MarshalJSON() ([]byte, error) {
 
 func (o BTStringMaximumLengthPattern2593) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTStringFormatCondition683, errBTStringFormatCondition683 := json.Marshal(o.BTStringFormatCondition683)
+	if errBTStringFormatCondition683 != nil {
+		return map[string]interface{}{}, errBTStringFormatCondition683
+	}
+	errBTStringFormatCondition683 = json.Unmarshal([]byte(serializedBTStringFormatCondition683), &toSerialize)
+	if errBTStringFormatCondition683 != nil {
+		return map[string]interface{}{}, errBTStringFormatCondition683
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTStringMaximumLengthPattern2593) UnmarshalJSON(src []byte) err
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_string_minimum_length_pattern_895.go b/onshape/model_bt_string_minimum_length_pattern_895.go
index 755fac5e6..009524ca2 100644
--- a/onshape/model_bt_string_minimum_length_pattern_895.go
+++ b/onshape/model_bt_string_minimum_length_pattern_895.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTStringMinimumLengthPattern895{}
 
 // BTStringMinimumLengthPattern895 struct for BTStringMinimumLengthPattern895
 type BTStringMinimumLengthPattern895 struct {
+	BTStringFormatCondition-683
 	// Type of JSON object.
-	BtType        *string `json:"btType,omitempty"`
-	MinimumLength *int32  `json:"minimumLength,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	MinimumLength *int32 `json:"minimumLength,omitempty"`
 }
 
 // NewBTStringMinimumLengthPattern895 instantiates a new BTStringMinimumLengthPattern895 object
@@ -107,7 +108,7 @@ func (o *BTStringMinimumLengthPattern895) SetMinimumLength(v int32) {
 }
 
 func (o BTStringMinimumLengthPattern895) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTStringMinimumLengthPattern895) MarshalJSON() ([]byte, error) {
 
 func (o BTStringMinimumLengthPattern895) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTStringFormatCondition683, errBTStringFormatCondition683 := json.Marshal(o.BTStringFormatCondition683)
+	if errBTStringFormatCondition683 != nil {
+		return map[string]interface{}{}, errBTStringFormatCondition683
+	}
+	errBTStringFormatCondition683 = json.Unmarshal([]byte(serializedBTStringFormatCondition683), &toSerialize)
+	if errBTStringFormatCondition683 != nil {
+		return map[string]interface{}{}, errBTStringFormatCondition683
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTStringMinimumLengthPattern895) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_sweep_description_1473.go b/onshape/model_bt_sweep_description_1473.go
index b5e29a268..11fdefa89 100644
--- a/onshape/model_bt_sweep_description_1473.go
+++ b/onshape/model_bt_sweep_description_1473.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTSweepDescription1473{}
 
 // BTSweepDescription1473 struct for BTSweepDescription1473
 type BTSweepDescription1473 struct {
+	BTSurfaceDescription-1564
 	// Type of JSON object.
-	BtType  *string                  `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Profile *BTSplineDescription2118 `json:"profile,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTSweepDescription1473) SetProfile(v BTSplineDescription2118) {
 }
 
 func (o BTSweepDescription1473) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTSweepDescription1473) MarshalJSON() ([]byte, error) {
 
 func (o BTSweepDescription1473) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSurfaceDescription1564, errBTSurfaceDescription1564 := json.Marshal(o.BTSurfaceDescription1564)
+	if errBTSurfaceDescription1564 != nil {
+		return map[string]interface{}{}, errBTSurfaceDescription1564
+	}
+	errBTSurfaceDescription1564 = json.Unmarshal([]byte(serializedBTSurfaceDescription1564), &toSerialize)
+	if errBTSurfaceDescription1564 != nil {
+		return map[string]interface{}{}, errBTSurfaceDescription1564
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTSweepDescription1473) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_system_part_color_cycle_1580.go b/onshape/model_bt_system_part_color_cycle_1580.go
index d0c264482..d780e488e 100644
--- a/onshape/model_bt_system_part_color_cycle_1580.go
+++ b/onshape/model_bt_system_part_color_cycle_1580.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTSystemPartColorCycle1580{}
 
 // BTSystemPartColorCycle1580 struct for BTSystemPartColorCycle1580
 type BTSystemPartColorCycle1580 struct {
+	BTBasePartColorCycle-2614
 	// Type of JSON object.
-	BtType  *string                   `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Version *GBTPartColorCycleVersion `json:"version,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTSystemPartColorCycle1580) SetVersion(v GBTPartColorCycleVersion) {
 }
 
 func (o BTSystemPartColorCycle1580) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTSystemPartColorCycle1580) MarshalJSON() ([]byte, error) {
 
 func (o BTSystemPartColorCycle1580) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTBasePartColorCycle2614, errBTBasePartColorCycle2614 := json.Marshal(o.BTBasePartColorCycle2614)
+	if errBTBasePartColorCycle2614 != nil {
+		return map[string]interface{}{}, errBTBasePartColorCycle2614
+	}
+	errBTBasePartColorCycle2614 = json.Unmarshal([]byte(serializedBTBasePartColorCycle2614), &toSerialize)
+	if errBTBasePartColorCycle2614 != nil {
+		return map[string]interface{}{}, errBTBasePartColorCycle2614
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTSystemPartColorCycle1580) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_table_assembly_cross_highlight_data_2675.go b/onshape/model_bt_table_assembly_cross_highlight_data_2675.go
index 9b5f21828..c6fdd9e90 100644
--- a/onshape/model_bt_table_assembly_cross_highlight_data_2675.go
+++ b/onshape/model_bt_table_assembly_cross_highlight_data_2675.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTTableAssemblyCrossHighlightData2675{}
 
 // BTTableAssemblyCrossHighlightData2675 struct for BTTableAssemblyCrossHighlightData2675
 type BTTableAssemblyCrossHighlightData2675 struct {
+	BTTableBaseCrossHighlightData-2609
 	// Type of JSON object.
-	BtType                      *string                                     `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	AssemblyCrossHighlightItems []BTTableAssemblyCrossHighlightDataItem2659 `json:"assemblyCrossHighlightItems,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTTableAssemblyCrossHighlightData2675) SetAssemblyCrossHighlightItems(v
 }
 
 func (o BTTableAssemblyCrossHighlightData2675) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTTableAssemblyCrossHighlightData2675) MarshalJSON() ([]byte, error) {
 
 func (o BTTableAssemblyCrossHighlightData2675) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableBaseCrossHighlightData2609, errBTTableBaseCrossHighlightData2609 := json.Marshal(o.BTTableBaseCrossHighlightData2609)
+	if errBTTableBaseCrossHighlightData2609 != nil {
+		return map[string]interface{}{}, errBTTableBaseCrossHighlightData2609
+	}
+	errBTTableBaseCrossHighlightData2609 = json.Unmarshal([]byte(serializedBTTableBaseCrossHighlightData2609), &toSerialize)
+	if errBTTableBaseCrossHighlightData2609 != nil {
+		return map[string]interface{}{}, errBTTableBaseCrossHighlightData2609
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTTableAssemblyCrossHighlightData2675) UnmarshalJSON(src []byte
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_table_cell_parameter_2399.go b/onshape/model_bt_table_cell_parameter_2399.go
index e4a8126ec..12630b694 100644
--- a/onshape/model_bt_table_cell_parameter_2399.go
+++ b/onshape/model_bt_table_cell_parameter_2399.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTTableCellParameter2399{}
 
 // BTTableCellParameter2399 struct for BTTableCellParameter2399
 type BTTableCellParameter2399 struct {
+	BTTableCell-1114
 	// Type of JSON object.
-	BtType       *string           `json:"btType,omitempty"`
-	Error        *string           `json:"error,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Error *string `json:"error,omitempty"`
 	OverrideSpec *BTParameterSpec6 `json:"overrideSpec,omitempty"`
-	Parameter    *BTMParameter1    `json:"parameter,omitempty"`
+	Parameter *BTMParameter1 `json:"parameter,omitempty"`
 }
 
 // NewBTTableCellParameter2399 instantiates a new BTTableCellParameter2399 object
@@ -173,7 +174,7 @@ func (o *BTTableCellParameter2399) SetParameter(v BTMParameter1) {
 }
 
 func (o BTTableCellParameter2399) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTTableCellParameter2399) MarshalJSON() ([]byte, error) {
 
 func (o BTTableCellParameter2399) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableCell1114, errBTTableCell1114 := json.Marshal(o.BTTableCell1114)
+	if errBTTableCell1114 != nil {
+		return map[string]interface{}{}, errBTTableCell1114
+	}
+	errBTTableCell1114 = json.Unmarshal([]byte(serializedBTTableCell1114), &toSerialize)
+	if errBTTableCell1114 != nil {
+		return map[string]interface{}{}, errBTTableCell1114
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTTableCellParameter2399) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_table_cell_parameter_with_value_2122.go b/onshape/model_bt_table_cell_parameter_with_value_2122.go
index c16125305..275810dee 100644
--- a/onshape/model_bt_table_cell_parameter_with_value_2122.go
+++ b/onshape/model_bt_table_cell_parameter_with_value_2122.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTTableCellParameterWithValue2122{}
 
 // BTTableCellParameterWithValue2122 struct for BTTableCellParameterWithValue2122
 type BTTableCellParameterWithValue2122 struct {
+	BTTableCellParameter-2399
 	// Type of JSON object.
-	BtType *string        `json:"btType,omitempty"`
-	Value  *BTFSValue1888 `json:"value,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Value *BTFSValue1888 `json:"value,omitempty"`
 }
 
 // NewBTTableCellParameterWithValue2122 instantiates a new BTTableCellParameterWithValue2122 object
@@ -107,7 +108,7 @@ func (o *BTTableCellParameterWithValue2122) SetValue(v BTFSValue1888) {
 }
 
 func (o BTTableCellParameterWithValue2122) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTTableCellParameterWithValue2122) MarshalJSON() ([]byte, error) {
 
 func (o BTTableCellParameterWithValue2122) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableCellParameter2399, errBTTableCellParameter2399 := json.Marshal(o.BTTableCellParameter2399)
+	if errBTTableCellParameter2399 != nil {
+		return map[string]interface{}{}, errBTTableCellParameter2399
+	}
+	errBTTableCellParameter2399 = json.Unmarshal([]byte(serializedBTTableCellParameter2399), &toSerialize)
+	if errBTTableCellParameter2399 != nil {
+		return map[string]interface{}{}, errBTTableCellParameter2399
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTTableCellParameterWithValue2122) UnmarshalJSON(src []byte) er
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_table_cell_property_parameter_2983.go b/onshape/model_bt_table_cell_property_parameter_2983.go
index 61209588d..fa192af31 100644
--- a/onshape/model_bt_table_cell_property_parameter_2983.go
+++ b/onshape/model_bt_table_cell_property_parameter_2983.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTTableCellPropertyParameter2983{}
 
 // BTTableCellPropertyParameter2983 struct for BTTableCellPropertyParameter2983
 type BTTableCellPropertyParameter2983 struct {
+	BTTableCellParameter-2399
 	// Type of JSON object.
-	BtType             *string                        `json:"btType,omitempty"`
-	IsUnchanged        *bool                          `json:"isUnchanged,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsUnchanged *bool `json:"isUnchanged,omitempty"`
 	OverrideStatusType *GBTMetadataOverrideStatusType `json:"overrideStatusType,omitempty"`
-	PropertySourceType *GBTMetadataSourceType         `json:"propertySourceType,omitempty"`
+	PropertySourceType *GBTMetadataSourceType `json:"propertySourceType,omitempty"`
 }
 
 // NewBTTableCellPropertyParameter2983 instantiates a new BTTableCellPropertyParameter2983 object
@@ -173,7 +174,7 @@ func (o *BTTableCellPropertyParameter2983) SetPropertySourceType(v GBTMetadataSo
 }
 
 func (o BTTableCellPropertyParameter2983) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTTableCellPropertyParameter2983) MarshalJSON() ([]byte, error) {
 
 func (o BTTableCellPropertyParameter2983) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableCellParameter2399, errBTTableCellParameter2399 := json.Marshal(o.BTTableCellParameter2399)
+	if errBTTableCellParameter2399 != nil {
+		return map[string]interface{}{}, errBTTableCellParameter2399
+	}
+	errBTTableCellParameter2399 = json.Unmarshal([]byte(serializedBTTableCellParameter2399), &toSerialize)
+	if errBTTableCellParameter2399 != nil {
+		return map[string]interface{}{}, errBTTableCellParameter2399
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTTableCellPropertyParameter2983) UnmarshalJSON(src []byte) err
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_table_cross_highlight_data_1753.go b/onshape/model_bt_table_cross_highlight_data_1753.go
index fa7b5f812..6053b4810 100644
--- a/onshape/model_bt_table_cross_highlight_data_1753.go
+++ b/onshape/model_bt_table_cross_highlight_data_1753.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTTableCrossHighlightData1753{}
 
 // BTTableCrossHighlightData1753 struct for BTTableCrossHighlightData1753
 type BTTableCrossHighlightData1753 struct {
+	BTTableBaseCrossHighlightData-2609
 	// Type of JSON object.
-	BtType              *string  `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	DeterministicIdList []string `json:"deterministicIdList,omitempty"`
-	FeatureIdList       []string `json:"featureIdList,omitempty"`
+	FeatureIdList []string `json:"featureIdList,omitempty"`
 }
 
 // NewBTTableCrossHighlightData1753 instantiates a new BTTableCrossHighlightData1753 object
@@ -140,7 +141,7 @@ func (o *BTTableCrossHighlightData1753) SetFeatureIdList(v []string) {
 }
 
 func (o BTTableCrossHighlightData1753) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTTableCrossHighlightData1753) MarshalJSON() ([]byte, error) {
 
 func (o BTTableCrossHighlightData1753) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableBaseCrossHighlightData2609, errBTTableBaseCrossHighlightData2609 := json.Marshal(o.BTTableBaseCrossHighlightData2609)
+	if errBTTableBaseCrossHighlightData2609 != nil {
+		return map[string]interface{}{}, errBTTableBaseCrossHighlightData2609
+	}
+	errBTTableBaseCrossHighlightData2609 = json.Unmarshal([]byte(serializedBTTableBaseCrossHighlightData2609), &toSerialize)
+	if errBTTableBaseCrossHighlightData2609 != nil {
+		return map[string]interface{}{}, errBTTableBaseCrossHighlightData2609
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTTableCrossHighlightData1753) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_table_spec_915.go b/onshape/model_bt_table_spec_915.go
index c786a0baa..078ecae38 100644
--- a/onshape/model_bt_table_spec_915.go
+++ b/onshape/model_bt_table_spec_915.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTTableSpec915{}
 
 // BTTableSpec915 struct for BTTableSpec915
 type BTTableSpec915 struct {
+	BTFeatureSpec-129
 	// Type of JSON object.
-	BtType                  *string `json:"btType,omitempty"`
-	IsComputedPropertyTable *bool   `json:"isComputedPropertyTable,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsComputedPropertyTable *bool `json:"isComputedPropertyTable,omitempty"`
 }
 
 // NewBTTableSpec915 instantiates a new BTTableSpec915 object
@@ -107,7 +108,7 @@ func (o *BTTableSpec915) SetIsComputedPropertyTable(v bool) {
 }
 
 func (o BTTableSpec915) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTTableSpec915) MarshalJSON() ([]byte, error) {
 
 func (o BTTableSpec915) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFeatureSpec129, errBTFeatureSpec129 := json.Marshal(o.BTFeatureSpec129)
+	if errBTFeatureSpec129 != nil {
+		return map[string]interface{}{}, errBTFeatureSpec129
+	}
+	errBTFeatureSpec129 = json.Unmarshal([]byte(serializedBTFeatureSpec129), &toSerialize)
+	if errBTFeatureSpec129 != nil {
+		return map[string]interface{}{}, errBTFeatureSpec129
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTTableSpec915) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_table_test_cell_double_2509.go b/onshape/model_bt_table_test_cell_double_2509.go
index 7e60f7bd3..ee5d302ec 100644
--- a/onshape/model_bt_table_test_cell_double_2509.go
+++ b/onshape/model_bt_table_test_cell_double_2509.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTTableTestCellDouble2509{}
 
 // BTTableTestCellDouble2509 struct for BTTableTestCellDouble2509
 type BTTableTestCellDouble2509 struct {
+	BTTableCell-1114
 	// Type of JSON object.
-	BtType    *string  `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	CellValue *float64 `json:"cellValue,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTTableTestCellDouble2509) SetCellValue(v float64) {
 }
 
 func (o BTTableTestCellDouble2509) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTTableTestCellDouble2509) MarshalJSON() ([]byte, error) {
 
 func (o BTTableTestCellDouble2509) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableCell1114, errBTTableCell1114 := json.Marshal(o.BTTableCell1114)
+	if errBTTableCell1114 != nil {
+		return map[string]interface{}{}, errBTTableCell1114
+	}
+	errBTTableCell1114 = json.Unmarshal([]byte(serializedBTTableCell1114), &toSerialize)
+	if errBTTableCell1114 != nil {
+		return map[string]interface{}{}, errBTTableCell1114
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTTableTestCellDouble2509) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_table_test_cell_string_2112.go b/onshape/model_bt_table_test_cell_string_2112.go
index aadca1d1e..a0ebf0dd2 100644
--- a/onshape/model_bt_table_test_cell_string_2112.go
+++ b/onshape/model_bt_table_test_cell_string_2112.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTTableTestCellString2112{}
 
 // BTTableTestCellString2112 struct for BTTableTestCellString2112
 type BTTableTestCellString2112 struct {
+	BTTableCell-1114
 	// Type of JSON object.
-	BtType    *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	CellValue *string `json:"cellValue,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTTableTestCellString2112) SetCellValue(v string) {
 }
 
 func (o BTTableTestCellString2112) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTTableTestCellString2112) MarshalJSON() ([]byte, error) {
 
 func (o BTTableTestCellString2112) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableCell1114, errBTTableCell1114 := json.Marshal(o.BTTableCell1114)
+	if errBTTableCell1114 != nil {
+		return map[string]interface{}{}, errBTTableCell1114
+	}
+	errBTTableCell1114 = json.Unmarshal([]byte(serializedBTTableCell1114), &toSerialize)
+	if errBTTableCell1114 != nil {
+		return map[string]interface{}{}, errBTTableCell1114
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTTableTestCellString2112) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_team_info.go b/onshape/model_bt_team_info.go
index 64721218b..2d89307f0 100644
--- a/onshape/model_bt_team_info.go
+++ b/onshape/model_bt_team_info.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTTeamInfo{}
 
 // BTTeamInfo struct for BTTeamInfo
 type BTTeamInfo struct {
+	BTTeamSummaryInfo
 	Admin  *bool  `json:"admin,omitempty"`
 	Member *bool  `json:"member,omitempty"`
 	Size   *int32 `json:"size,omitempty"`
diff --git a/onshape/model_bt_tessellated_geometry_2576.go b/onshape/model_bt_tessellated_geometry_2576.go
index 0d7d7b898..b181b8bc9 100644
--- a/onshape/model_bt_tessellated_geometry_2576.go
+++ b/onshape/model_bt_tessellated_geometry_2576.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTTessellatedGeometry2576{}
 
 // BTTessellatedGeometry2576 struct for BTTessellatedGeometry2576
 type BTTessellatedGeometry2576 struct {
+	BTEntityGeometry-35
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTTessellatedGeometry2576) SetBtType(v string) {
 }
 
 func (o BTTessellatedGeometry2576) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTTessellatedGeometry2576) MarshalJSON() ([]byte, error) {
 
 func (o BTTessellatedGeometry2576) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTEntityGeometry35, errBTEntityGeometry35 := json.Marshal(o.BTEntityGeometry35)
+	if errBTEntityGeometry35 != nil {
+		return map[string]interface{}{}, errBTEntityGeometry35
+	}
+	errBTEntityGeometry35 = json.Unmarshal([]byte(serializedBTEntityGeometry35), &toSerialize)
+	if errBTEntityGeometry35 != nil {
+		return map[string]interface{}{}, errBTEntityGeometry35
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTTessellatedGeometry2576) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_text_object_filter_1515.go b/onshape/model_bt_text_object_filter_1515.go
index ee141acb7..c150021fe 100644
--- a/onshape/model_bt_text_object_filter_1515.go
+++ b/onshape/model_bt_text_object_filter_1515.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTTextObjectFilter1515{}
 
 // BTTextObjectFilter1515 struct for BTTextObjectFilter1515
 type BTTextObjectFilter1515 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
-	IsText *bool   `json:"isText,omitempty"`
+	IsText *bool `json:"isText,omitempty"`
 }
 
 // NewBTTextObjectFilter1515 instantiates a new BTTextObjectFilter1515 object
@@ -107,7 +108,7 @@ func (o *BTTextObjectFilter1515) SetIsText(v bool) {
 }
 
 func (o BTTextObjectFilter1515) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTTextObjectFilter1515) MarshalJSON() ([]byte, error) {
 
 func (o BTTextObjectFilter1515) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTTextObjectFilter1515) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_text_stroke_filter_461.go b/onshape/model_bt_text_stroke_filter_461.go
index 4dd0de572..ad03473ba 100644
--- a/onshape/model_bt_text_stroke_filter_461.go
+++ b/onshape/model_bt_text_stroke_filter_461.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTTextStrokeFilter461{}
 
 // BTTextStrokeFilter461 struct for BTTextStrokeFilter461
 type BTTextStrokeFilter461 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType   *string `json:"btType,omitempty"`
-	IsStroke *bool   `json:"isStroke,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsStroke *bool `json:"isStroke,omitempty"`
 }
 
 // NewBTTextStrokeFilter461 instantiates a new BTTextStrokeFilter461 object
@@ -107,7 +108,7 @@ func (o *BTTextStrokeFilter461) SetIsStroke(v bool) {
 }
 
 func (o BTTextStrokeFilter461) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTTextStrokeFilter461) MarshalJSON() ([]byte, error) {
 
 func (o BTTextStrokeFilter461) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTTextStrokeFilter461) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_torus_description_1834.go b/onshape/model_bt_torus_description_1834.go
index d243f3a51..5cdd8279c 100644
--- a/onshape/model_bt_torus_description_1834.go
+++ b/onshape/model_bt_torus_description_1834.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTTorusDescription1834{}
 
 // BTTorusDescription1834 struct for BTTorusDescription1834
 type BTTorusDescription1834 struct {
+	BTSurfaceDescription-1564
 	// Type of JSON object.
-	BtType      *string        `json:"btType,omitempty"`
-	Axis        *BTVector3d389 `json:"axis,omitempty"`
-	MajorRadius *float64       `json:"majorRadius,omitempty"`
-	MinorRadius *float64       `json:"minorRadius,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Axis *BTVector3d389 `json:"axis,omitempty"`
+	MajorRadius *float64 `json:"majorRadius,omitempty"`
+	MinorRadius *float64 `json:"minorRadius,omitempty"`
 }
 
 // NewBTTorusDescription1834 instantiates a new BTTorusDescription1834 object
@@ -173,7 +174,7 @@ func (o *BTTorusDescription1834) SetMinorRadius(v float64) {
 }
 
 func (o BTTorusDescription1834) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTTorusDescription1834) MarshalJSON() ([]byte, error) {
 
 func (o BTTorusDescription1834) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTSurfaceDescription1564, errBTSurfaceDescription1564 := json.Marshal(o.BTSurfaceDescription1564)
+	if errBTSurfaceDescription1564 != nil {
+		return map[string]interface{}{}, errBTSurfaceDescription1564
+	}
+	errBTSurfaceDescription1564 = json.Unmarshal([]byte(serializedBTSurfaceDescription1564), &toSerialize)
+	if errBTSurfaceDescription1564 != nil {
+		return map[string]interface{}{}, errBTSurfaceDescription1564
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTTorusDescription1834) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_bt_translate_format_params.go b/onshape/model_bt_translate_format_params.go
index 3530aef27..b43464fb3 100644
--- a/onshape/model_bt_translate_format_params.go
+++ b/onshape/model_bt_translate_format_params.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTTranslateFormatParams type satisfies the MappedNullable interface at compile time
@@ -109,6 +111,8 @@ type BTTranslateFormatParams struct {
 	VersionString                        *string                       `json:"versionString,omitempty"`
 }
 
+type _BTTranslateFormatParams BTTranslateFormatParams
+
 // NewBTTranslateFormatParams instantiates a new BTTranslateFormatParams object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -2895,6 +2899,43 @@ func (o BTTranslateFormatParams) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTTranslateFormatParams) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"formatName",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTTranslateFormatParams := _BTTranslateFormatParams{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTTranslateFormatParams)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTTranslateFormatParams(varBTTranslateFormatParams)
+
+	return err
+}
+
 type NullableBTTranslateFormatParams struct {
 	value *BTTranslateFormatParams
 	isSet bool
diff --git a/onshape/model_bt_user_admin_info.go b/onshape/model_bt_user_admin_info.go
index a0bdba0b3..1f07c5340 100644
--- a/onshape/model_bt_user_admin_info.go
+++ b/onshape/model_bt_user_admin_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTUserAdminInfo type satisfies the MappedNullable interface at compile time
@@ -20,6 +22,7 @@ var _ MappedNullable = &BTUserAdminInfo{}
 
 // BTUserAdminInfo struct for BTUserAdminInfo
 type BTUserAdminInfo struct {
+	BTUserInfo
 	Discount          *BTDiscount            `json:"discount,omitempty"`
 	InvitationId      *string                `json:"invitationId,omitempty"`
 	InvitedByEmail    *string                `json:"invitedByEmail,omitempty"`
@@ -29,12 +32,15 @@ type BTUserAdminInfo struct {
 	UserMetrics       *BTUserMetricsInfo     `json:"userMetrics,omitempty"`
 }
 
+type _BTUserAdminInfo BTUserAdminInfo
+
 // NewBTUserAdminInfo instantiates a new BTUserAdminInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
 // will change when the set of required properties is changed
-func NewBTUserAdminInfo() *BTUserAdminInfo {
+func NewBTUserAdminInfo(jsonType string) *BTUserAdminInfo {
 	this := BTUserAdminInfo{}
+	this.JsonType = jsonType
 	return &this
 }
 
@@ -304,6 +310,43 @@ func (o BTUserAdminInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTUserAdminInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTUserAdminInfo := _BTUserAdminInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTUserAdminInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTUserAdminInfo(varBTUserAdminInfo)
+
+	return err
+}
+
 type NullableBTUserAdminInfo struct {
 	value *BTUserAdminInfo
 	isSet bool
diff --git a/onshape/model_bt_user_admin_summary_info.go b/onshape/model_bt_user_admin_summary_info.go
index f8e0de742..09fe572e9 100644
--- a/onshape/model_bt_user_admin_summary_info.go
+++ b/onshape/model_bt_user_admin_summary_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTUserAdminSummaryInfo type satisfies the MappedNullable interface at compile time
@@ -20,6 +22,7 @@ var _ MappedNullable = &BTUserAdminSummaryInfo{}
 
 // BTUserAdminSummaryInfo struct for BTUserAdminSummaryInfo
 type BTUserAdminSummaryInfo struct {
+	BTUserSummaryInfo
 	ActivePlanId          *string       `json:"activePlanId,omitempty"`
 	BillingUpdateRequired *bool         `json:"billingUpdateRequired,omitempty"`
 	CompanyRoles          []CompanyRole `json:"companyRoles,omitempty"`
@@ -29,12 +32,15 @@ type BTUserAdminSummaryInfo struct {
 	TotpEnabled           *bool         `json:"totpEnabled,omitempty"`
 }
 
+type _BTUserAdminSummaryInfo BTUserAdminSummaryInfo
+
 // NewBTUserAdminSummaryInfo instantiates a new BTUserAdminSummaryInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
 // will change when the set of required properties is changed
-func NewBTUserAdminSummaryInfo() *BTUserAdminSummaryInfo {
+func NewBTUserAdminSummaryInfo(jsonType string) *BTUserAdminSummaryInfo {
 	this := BTUserAdminSummaryInfo{}
+	this.JsonType = jsonType
 	return &this
 }
 
@@ -304,6 +310,43 @@ func (o BTUserAdminSummaryInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTUserAdminSummaryInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTUserAdminSummaryInfo := _BTUserAdminSummaryInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTUserAdminSummaryInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTUserAdminSummaryInfo(varBTUserAdminSummaryInfo)
+
+	return err
+}
+
 type NullableBTUserAdminSummaryInfo struct {
 	value *BTUserAdminSummaryInfo
 	isSet bool
diff --git a/onshape/model_bt_user_basic_summary_info.go b/onshape/model_bt_user_basic_summary_info.go
index 10978861c..b9183cdfc 100644
--- a/onshape/model_bt_user_basic_summary_info.go
+++ b/onshape/model_bt_user_basic_summary_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTUserBasicSummaryInfo type satisfies the MappedNullable interface at compile time
@@ -33,6 +35,8 @@ type BTUserBasicSummaryInfo struct {
 	State   *int32  `json:"state,omitempty"`
 }
 
+type _BTUserBasicSummaryInfo BTUserBasicSummaryInfo
+
 // NewBTUserBasicSummaryInfo instantiates a new BTUserBasicSummaryInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -298,6 +302,43 @@ func (o BTUserBasicSummaryInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTUserBasicSummaryInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTUserBasicSummaryInfo := _BTUserBasicSummaryInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTUserBasicSummaryInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTUserBasicSummaryInfo(varBTUserBasicSummaryInfo)
+
+	return err
+}
+
 type NullableBTUserBasicSummaryInfo struct {
 	value *BTUserBasicSummaryInfo
 	isSet bool
diff --git a/onshape/model_bt_user_detail_summary_info.go b/onshape/model_bt_user_detail_summary_info.go
index 776a13c3c..7f81effb8 100644
--- a/onshape/model_bt_user_detail_summary_info.go
+++ b/onshape/model_bt_user_detail_summary_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTUserDetailSummaryInfo type satisfies the MappedNullable interface at compile time
@@ -20,18 +22,22 @@ var _ MappedNullable = &BTUserDetailSummaryInfo{}
 
 // BTUserDetailSummaryInfo struct for BTUserDetailSummaryInfo
 type BTUserDetailSummaryInfo struct {
+	BTUserBasicSummaryInfo
 	DocumentationName *string `json:"documentationName,omitempty"`
 	Email             *string `json:"email,omitempty"`
 	FirstName         *string `json:"firstName,omitempty"`
 	LastName          *string `json:"lastName,omitempty"`
 }
 
+type _BTUserDetailSummaryInfo BTUserDetailSummaryInfo
+
 // NewBTUserDetailSummaryInfo instantiates a new BTUserDetailSummaryInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
 // will change when the set of required properties is changed
-func NewBTUserDetailSummaryInfo() *BTUserDetailSummaryInfo {
+func NewBTUserDetailSummaryInfo(jsonType string) *BTUserDetailSummaryInfo {
 	this := BTUserDetailSummaryInfo{}
+	this.JsonType = jsonType
 	return &this
 }
 
@@ -196,6 +202,43 @@ func (o BTUserDetailSummaryInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTUserDetailSummaryInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTUserDetailSummaryInfo := _BTUserDetailSummaryInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTUserDetailSummaryInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTUserDetailSummaryInfo(varBTUserDetailSummaryInfo)
+
+	return err
+}
+
 type NullableBTUserDetailSummaryInfo struct {
 	value *BTUserDetailSummaryInfo
 	isSet bool
diff --git a/onshape/model_bt_user_info.go b/onshape/model_bt_user_info.go
index a994dc31c..25e455112 100644
--- a/onshape/model_bt_user_info.go
+++ b/onshape/model_bt_user_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTUserInfo type satisfies the MappedNullable interface at compile time
@@ -20,6 +22,7 @@ var _ MappedNullable = &BTUserInfo{}
 
 // BTUserInfo struct for BTUserInfo
 type BTUserInfo struct {
+	BTUserSummaryInfo
 	ActivePlan                *BTBillingPlanInfo       `json:"activePlan,omitempty"`
 	ActivePlanId              *string                  `json:"activePlanId,omitempty"`
 	ActivePurchases           []BTPurchaseInfo         `json:"activePurchases,omitempty"`
@@ -58,12 +61,15 @@ type BTUserInfo struct {
 	TrialInfos                []BTTrialInfo            `json:"trialInfos,omitempty"`
 }
 
+type _BTUserInfo BTUserInfo
+
 // NewBTUserInfo instantiates a new BTUserInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
 // will change when the set of required properties is changed
-func NewBTUserInfo() *BTUserInfo {
+func NewBTUserInfo(jsonType string) *BTUserInfo {
 	this := BTUserInfo{}
+	this.JsonType = jsonType
 	return &this
 }
 
@@ -1348,6 +1354,43 @@ func (o BTUserInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTUserInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTUserInfo := _BTUserInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTUserInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTUserInfo(varBTUserInfo)
+
+	return err
+}
+
 type NullableBTUserInfo struct {
 	value *BTUserInfo
 	isSet bool
diff --git a/onshape/model_bt_user_o_auth2_summary_info.go b/onshape/model_bt_user_o_auth2_summary_info.go
index 7a6755114..a7901c70f 100644
--- a/onshape/model_bt_user_o_auth2_summary_info.go
+++ b/onshape/model_bt_user_o_auth2_summary_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTUserOAuth2SummaryInfo type satisfies the MappedNullable interface at compile time
@@ -20,6 +22,7 @@ var _ MappedNullable = &BTUserOAuth2SummaryInfo{}
 
 // BTUserOAuth2SummaryInfo struct for BTUserOAuth2SummaryInfo
 type BTUserOAuth2SummaryInfo struct {
+	BTUserSummaryInfo
 	ClientId     *string  `json:"clientId,omitempty"`
 	CompanyPlan  *bool    `json:"companyPlan,omitempty"`
 	Oauth2Scopes *int64   `json:"oauth2Scopes,omitempty"`
@@ -28,12 +31,15 @@ type BTUserOAuth2SummaryInfo struct {
 	Roles        []BTRole `json:"roles,omitempty"`
 }
 
+type _BTUserOAuth2SummaryInfo BTUserOAuth2SummaryInfo
+
 // NewBTUserOAuth2SummaryInfo instantiates a new BTUserOAuth2SummaryInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
 // will change when the set of required properties is changed
-func NewBTUserOAuth2SummaryInfo() *BTUserOAuth2SummaryInfo {
+func NewBTUserOAuth2SummaryInfo(jsonType string) *BTUserOAuth2SummaryInfo {
 	this := BTUserOAuth2SummaryInfo{}
+	this.JsonType = jsonType
 	return &this
 }
 
@@ -268,6 +274,43 @@ func (o BTUserOAuth2SummaryInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTUserOAuth2SummaryInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTUserOAuth2SummaryInfo := _BTUserOAuth2SummaryInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTUserOAuth2SummaryInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTUserOAuth2SummaryInfo(varBTUserOAuth2SummaryInfo)
+
+	return err
+}
+
 type NullableBTUserOAuth2SummaryInfo struct {
 	value *BTUserOAuth2SummaryInfo
 	isSet bool
diff --git a/onshape/model_bt_user_summary_info.go b/onshape/model_bt_user_summary_info.go
index b38527a06..b8e39d010 100644
--- a/onshape/model_bt_user_summary_info.go
+++ b/onshape/model_bt_user_summary_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTUserSummaryInfo type satisfies the MappedNullable interface at compile time
@@ -20,6 +22,7 @@ var _ MappedNullable = &BTUserSummaryInfo{}
 
 // BTUserSummaryInfo struct for BTUserSummaryInfo
 type BTUserSummaryInfo struct {
+	BTUserDetailSummaryInfo
 	Company                   *BTCompanySummaryInfo `json:"company,omitempty"`
 	DocumentationNameOverride *string               `json:"documentationNameOverride,omitempty"`
 	GlobalPermissions         *GlobalPermissionInfo `json:"globalPermissions,omitempty"`
@@ -31,12 +34,15 @@ type BTUserSummaryInfo struct {
 	Source                    *int32                `json:"source,omitempty"`
 }
 
+type _BTUserSummaryInfo BTUserSummaryInfo
+
 // NewBTUserSummaryInfo instantiates a new BTUserSummaryInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
 // will change when the set of required properties is changed
-func NewBTUserSummaryInfo() *BTUserSummaryInfo {
+func NewBTUserSummaryInfo(jsonType string) *BTUserSummaryInfo {
 	this := BTUserSummaryInfo{}
+	this.JsonType = jsonType
 	return &this
 }
 
@@ -376,6 +382,43 @@ func (o BTUserSummaryInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTUserSummaryInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTUserSummaryInfo := _BTUserSummaryInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTUserSummaryInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTUserSummaryInfo(varBTUserSummaryInfo)
+
+	return err
+}
+
 type NullableBTUserSummaryInfo struct {
 	value *BTUserSummaryInfo
 	isSet bool
diff --git a/onshape/model_bt_variable_info.go b/onshape/model_bt_variable_info.go
index 8bd6d9ea0..b7ca5d645 100644
--- a/onshape/model_bt_variable_info.go
+++ b/onshape/model_bt_variable_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTVariableInfo type satisfies the MappedNullable interface at compile time
@@ -31,6 +33,8 @@ type BTVariableInfo struct {
 	Value string `json:"value"`
 }
 
+type _BTVariableInfo BTVariableInfo
+
 // NewBTVariableInfo instantiates a new BTVariableInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -200,6 +204,46 @@ func (o BTVariableInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTVariableInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"expression",
+		"name",
+		"type",
+		"value",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTVariableInfo := _BTVariableInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTVariableInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTVariableInfo(varBTVariableInfo)
+
+	return err
+}
+
 type NullableBTVariableInfo struct {
 	value *BTVariableInfo
 	isSet bool
diff --git a/onshape/model_bt_variable_params.go b/onshape/model_bt_variable_params.go
index 96a78e22a..a80c1e870 100644
--- a/onshape/model_bt_variable_params.go
+++ b/onshape/model_bt_variable_params.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTVariableParams type satisfies the MappedNullable interface at compile time
@@ -30,6 +32,8 @@ type BTVariableParams struct {
 	Type string `json:"type"`
 }
 
+type _BTVariableParams BTVariableParams
+
 // NewBTVariableParams instantiates a new BTVariableParams object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -173,6 +177,45 @@ func (o BTVariableParams) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTVariableParams) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"expression",
+		"name",
+		"type",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTVariableParams := _BTVariableParams{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTVariableParams)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTVariableParams(varBTVariableParams)
+
+	return err
+}
+
 type NullableBTVariableParams struct {
 	value *BTVariableParams
 	isSet bool
diff --git a/onshape/model_bt_variable_studio_reference_info.go b/onshape/model_bt_variable_studio_reference_info.go
index 9253d0a94..e91868722 100644
--- a/onshape/model_bt_variable_studio_reference_info.go
+++ b/onshape/model_bt_variable_studio_reference_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTVariableStudioReferenceInfo type satisfies the MappedNullable interface at compile time
@@ -32,6 +34,8 @@ type BTVariableStudioReferenceInfo struct {
 	VariableNames []string `json:"variableNames,omitempty"`
 }
 
+type _BTVariableStudioReferenceInfo BTVariableStudioReferenceInfo
+
 // NewBTVariableStudioReferenceInfo instantiates a new BTVariableStudioReferenceInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -228,6 +232,43 @@ func (o BTVariableStudioReferenceInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTVariableStudioReferenceInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"referenceElementId",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTVariableStudioReferenceInfo := _BTVariableStudioReferenceInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTVariableStudioReferenceInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTVariableStudioReferenceInfo(varBTVariableStudioReferenceInfo)
+
+	return err
+}
+
 type NullableBTVariableStudioReferenceInfo struct {
 	value *BTVariableStudioReferenceInfo
 	isSet bool
diff --git a/onshape/model_bt_variable_studio_scope_info.go b/onshape/model_bt_variable_studio_scope_info.go
index 74f04a4b6..1a311f6f1 100644
--- a/onshape/model_bt_variable_studio_scope_info.go
+++ b/onshape/model_bt_variable_studio_scope_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTVariableStudioScopeInfo type satisfies the MappedNullable interface at compile time
@@ -24,6 +26,8 @@ type BTVariableStudioScopeInfo struct {
 	IsAutomaticallyInserted bool `json:"isAutomaticallyInserted"`
 }
 
+type _BTVariableStudioScopeInfo BTVariableStudioScopeInfo
+
 // NewBTVariableStudioScopeInfo instantiates a new BTVariableStudioScopeInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -80,6 +84,43 @@ func (o BTVariableStudioScopeInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTVariableStudioScopeInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"isAutomaticallyInserted",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTVariableStudioScopeInfo := _BTVariableStudioScopeInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTVariableStudioScopeInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTVariableStudioScopeInfo(varBTVariableStudioScopeInfo)
+
+	return err
+}
+
 type NullableBTVariableStudioScopeInfo struct {
 	value *BTVariableStudioScopeInfo
 	isSet bool
diff --git a/onshape/model_bt_variable_table_info.go b/onshape/model_bt_variable_table_info.go
index f3d29600b..9fd498c76 100644
--- a/onshape/model_bt_variable_table_info.go
+++ b/onshape/model_bt_variable_table_info.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTVariableTableInfo type satisfies the MappedNullable interface at compile time
@@ -25,6 +27,8 @@ type BTVariableTableInfo struct {
 	Variables []BTVariableInfo `json:"variables"`
 }
 
+type _BTVariableTableInfo BTVariableTableInfo
+
 // NewBTVariableTableInfo instantiates a new BTVariableTableInfo object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -116,6 +120,43 @@ func (o BTVariableTableInfo) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTVariableTableInfo) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"variables",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTVariableTableInfo := _BTVariableTableInfo{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTVariableTableInfo)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTVariableTableInfo(varBTVariableTableInfo)
+
+	return err
+}
+
 type NullableBTVariableTableInfo struct {
 	value *BTVariableTableInfo
 	isSet bool
diff --git a/onshape/model_bt_variable_table_row_metadata_3912.go b/onshape/model_bt_variable_table_row_metadata_3912.go
index 09ae569a3..8de7abfcc 100644
--- a/onshape/model_bt_variable_table_row_metadata_3912.go
+++ b/onshape/model_bt_variable_table_row_metadata_3912.go
@@ -20,13 +20,14 @@ var _ MappedNullable = &BTVariableTableRowMetadata3912{}
 
 // BTVariableTableRowMetadata3912 struct for BTVariableTableRowMetadata3912
 type BTVariableTableRowMetadata3912 struct {
+	BTTableBaseRowMetadata-3181
 	// Type of JSON object.
-	BtType                   *string                            `json:"btType,omitempty"`
-	CrossHighlightData       *BTTableBaseCrossHighlightData2609 `json:"crossHighlightData,omitempty"`
-	Info                     *string                            `json:"info,omitempty"`
-	IsFullyEditable          *bool                              `json:"isFullyEditable,omitempty"`
-	IsRecursiveImport        *bool                              `json:"isRecursiveImport,omitempty"`
-	LastWritingFeatureNodeId *string                            `json:"lastWritingFeatureNodeId,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	CrossHighlightData *BTTableBaseCrossHighlightData2609 `json:"crossHighlightData,omitempty"`
+	Info *string `json:"info,omitempty"`
+	IsFullyEditable *bool `json:"isFullyEditable,omitempty"`
+	IsRecursiveImport *bool `json:"isRecursiveImport,omitempty"`
+	LastWritingFeatureNodeId *string `json:"lastWritingFeatureNodeId,omitempty"`
 }
 
 // NewBTVariableTableRowMetadata3912 instantiates a new BTVariableTableRowMetadata3912 object
@@ -239,7 +240,7 @@ func (o *BTVariableTableRowMetadata3912) SetLastWritingFeatureNodeId(v string) {
 }
 
 func (o BTVariableTableRowMetadata3912) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -248,6 +249,14 @@ func (o BTVariableTableRowMetadata3912) MarshalJSON() ([]byte, error) {
 
 func (o BTVariableTableRowMetadata3912) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableBaseRowMetadata3181, errBTTableBaseRowMetadata3181 := json.Marshal(o.BTTableBaseRowMetadata3181)
+	if errBTTableBaseRowMetadata3181 != nil {
+		return map[string]interface{}{}, errBTTableBaseRowMetadata3181
+	}
+	errBTTableBaseRowMetadata3181 = json.Unmarshal([]byte(serializedBTTableBaseRowMetadata3181), &toSerialize)
+	if errBTTableBaseRowMetadata3181 != nil {
+		return map[string]interface{}{}, errBTTableBaseRowMetadata3181
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -304,3 +313,5 @@ func (v *NullableBTVariableTableRowMetadata3912) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btb_drawing_operation_params.go b/onshape/model_btb_drawing_operation_params.go
index 37ddf9854..69624b16b 100644
--- a/onshape/model_btb_drawing_operation_params.go
+++ b/onshape/model_btb_drawing_operation_params.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTBDrawingOperationParams type satisfies the MappedNullable interface at compile time
@@ -26,6 +28,8 @@ type BTBDrawingOperationParams struct {
 	MessageName string `json:"messageName"`
 }
 
+type _BTBDrawingOperationParams BTBDrawingOperationParams
+
 // NewBTBDrawingOperationParams instantiates a new BTBDrawingOperationParams object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -108,6 +112,44 @@ func (o BTBDrawingOperationParams) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTBDrawingOperationParams) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"formatVersion",
+		"messageName",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTBDrawingOperationParams := _BTBDrawingOperationParams{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTBDrawingOperationParams)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTBDrawingOperationParams(varBTBDrawingOperationParams)
+
+	return err
+}
+
 type NullableBTBDrawingOperationParams struct {
 	value *BTBDrawingOperationParams
 	isSet bool
diff --git a/onshape/model_btb_export_model_params.go b/onshape/model_btb_export_model_params.go
index 4b6703214..a7b3c4ff1 100644
--- a/onshape/model_btb_export_model_params.go
+++ b/onshape/model_btb_export_model_params.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTBExportModelParams type satisfies the MappedNullable interface at compile time
@@ -74,6 +76,8 @@ type BTBExportModelParams struct {
 	ZipSingleFileOutput          *bool    `json:"zipSingleFileOutput,omitempty"`
 }
 
+type _BTBExportModelParams BTBExportModelParams
+
 // NewBTBExportModelParams instantiates a new BTBExportModelParams object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -1906,6 +1910,44 @@ func (o BTBExportModelParams) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTBExportModelParams) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"documentId",
+		"format",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTBExportModelParams := _BTBExportModelParams{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTBExportModelParams)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTBExportModelParams(varBTBExportModelParams)
+
+	return err
+}
+
 type NullableBTBExportModelParams struct {
 	value *BTBExportModelParams
 	isSet bool
diff --git a/onshape/model_btfs_table_953.go b/onshape/model_btfs_table_953.go
index 91d6eda1a..65a2b02aa 100644
--- a/onshape/model_btfs_table_953.go
+++ b/onshape/model_btfs_table_953.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTFSTable953{}
 
 // BTFSTable953 struct for BTFSTable953
 type BTFSTable953 struct {
+	BTTable-1825
 	// Type of JSON object.
-	BtType                    *string                            `json:"btType,omitempty"`
-	CrossHighlightData        *BTTableBaseCrossHighlightData2609 `json:"crossHighlightData,omitempty"`
-	HiddenColumnIdsToNames    *map[string]string                 `json:"hiddenColumnIdsToNames,omitempty"`
-	IndividualTableProperties *BTIndividualTableProperties3760   `json:"individualTableProperties,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	CrossHighlightData *BTTableBaseCrossHighlightData2609 `json:"crossHighlightData,omitempty"`
+	HiddenColumnIdsToNames *map[string]string `json:"hiddenColumnIdsToNames,omitempty"`
+	IndividualTableProperties *BTIndividualTableProperties3760 `json:"individualTableProperties,omitempty"`
 }
 
 // NewBTFSTable953 instantiates a new BTFSTable953 object
@@ -173,7 +174,7 @@ func (o *BTFSTable953) SetIndividualTableProperties(v BTIndividualTablePropertie
 }
 
 func (o BTFSTable953) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTFSTable953) MarshalJSON() ([]byte, error) {
 
 func (o BTFSTable953) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTable1825, errBTTable1825 := json.Marshal(o.BTTable1825)
+	if errBTTable1825 != nil {
+		return map[string]interface{}{}, errBTTable1825
+	}
+	errBTTable1825 = json.Unmarshal([]byte(serializedBTTable1825), &toSerialize)
+	if errBTTable1825 != nil {
+		return map[string]interface{}{}, errBTTable1825
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTFSTable953) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btfs_table_column_info_623.go b/onshape/model_btfs_table_column_info_623.go
index ad0bdb056..e9a81f894 100644
--- a/onshape/model_btfs_table_column_info_623.go
+++ b/onshape/model_btfs_table_column_info_623.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTFSTableColumnInfo623{}
 
 // BTFSTableColumnInfo623 struct for BTFSTableColumnInfo623
 type BTFSTableColumnInfo623 struct {
+	BTTableColumnInfo-1222
 	// Type of JSON object.
-	BtType             *string                            `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	CrossHighlightData *BTTableBaseCrossHighlightData2609 `json:"crossHighlightData,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTFSTableColumnInfo623) SetCrossHighlightData(v BTTableBaseCrossHighlig
 }
 
 func (o BTFSTableColumnInfo623) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTFSTableColumnInfo623) MarshalJSON() ([]byte, error) {
 
 func (o BTFSTableColumnInfo623) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableColumnInfo1222, errBTTableColumnInfo1222 := json.Marshal(o.BTTableColumnInfo1222)
+	if errBTTableColumnInfo1222 != nil {
+		return map[string]interface{}{}, errBTTableColumnInfo1222
+	}
+	errBTTableColumnInfo1222 = json.Unmarshal([]byte(serializedBTTableColumnInfo1222), &toSerialize)
+	if errBTTableColumnInfo1222 != nil {
+		return map[string]interface{}{}, errBTTableColumnInfo1222
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTFSTableColumnInfo623) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btfs_table_row_metadata_2262.go b/onshape/model_btfs_table_row_metadata_2262.go
index 59380e250..1574a8c1d 100644
--- a/onshape/model_btfs_table_row_metadata_2262.go
+++ b/onshape/model_btfs_table_row_metadata_2262.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTFSTableRowMetadata2262{}
 
 // BTFSTableRowMetadata2262 struct for BTFSTableRowMetadata2262
 type BTFSTableRowMetadata2262 struct {
+	BTTableBaseRowMetadata-3181
 	// Type of JSON object.
-	BtType             *string                            `json:"btType,omitempty"`
-	Callout            *string                            `json:"callout,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Callout *string `json:"callout,omitempty"`
 	CrossHighlightData *BTTableBaseCrossHighlightData2609 `json:"crossHighlightData,omitempty"`
 }
 
@@ -140,7 +141,7 @@ func (o *BTFSTableRowMetadata2262) SetCrossHighlightData(v BTTableBaseCrossHighl
 }
 
 func (o BTFSTableRowMetadata2262) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTFSTableRowMetadata2262) MarshalJSON() ([]byte, error) {
 
 func (o BTFSTableRowMetadata2262) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTTableBaseRowMetadata3181, errBTTableBaseRowMetadata3181 := json.Marshal(o.BTTableBaseRowMetadata3181)
+	if errBTTableBaseRowMetadata3181 != nil {
+		return map[string]interface{}{}, errBTTableBaseRowMetadata3181
+	}
+	errBTTableBaseRowMetadata3181 = json.Unmarshal([]byte(serializedBTTableBaseRowMetadata3181), &toSerialize)
+	if errBTTableBaseRowMetadata3181 != nil {
+		return map[string]interface{}{}, errBTTableBaseRowMetadata3181
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTFSTableRowMetadata2262) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btfs_value_1888.go b/onshape/model_btfs_value_1888.go
index 16d386e5c..ba278aa00 100644
--- a/onshape/model_btfs_value_1888.go
+++ b/onshape/model_btfs_value_1888.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTFSValue1888 type satisfies the MappedNullable interface at compile time
@@ -25,6 +27,8 @@ type BTFSValue1888 struct {
 	TypeTag *string `json:"typeTag,omitempty"`
 }
 
+type _BTFSValue1888 BTFSValue1888
+
 // NewBTFSValue1888 instantiates a new BTFSValue1888 object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -116,6 +120,43 @@ func (o BTFSValue1888) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTFSValue1888) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"btType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTFSValue1888 := _BTFSValue1888{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTFSValue1888)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTFSValue1888(varBTFSValue1888)
+
+	return err
+}
+
 type NullableBTFSValue1888 struct {
 	value *BTFSValue1888
 	isSet bool
diff --git a/onshape/model_btfs_value_array_1499.go b/onshape/model_btfs_value_array_1499.go
index ee4eb6365..363beb1a4 100644
--- a/onshape/model_btfs_value_array_1499.go
+++ b/onshape/model_btfs_value_array_1499.go
@@ -13,6 +13,8 @@ package onshape
 
 import (
 	"encoding/json"
+	"bytes"
+	"fmt"
 )
 
 // checks if the BTFSValueArray1499 type satisfies the MappedNullable interface at compile time
@@ -20,11 +22,14 @@ var _ MappedNullable = &BTFSValueArray1499{}
 
 // BTFSValueArray1499 struct for BTFSValueArray1499
 type BTFSValueArray1499 struct {
+	BTFSValue-1888
 	// Type of JSON object.
-	BtType string          `json:"btType"`
-	Value  []BTFSValue1888 `json:"value,omitempty"`
+	BtType string `json:"btType"`
+	Value []BTFSValue1888 `json:"value,omitempty"`
 }
 
+type _BTFSValueArray1499 BTFSValueArray1499
+
 // NewBTFSValueArray1499 instantiates a new BTFSValueArray1499 object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -100,7 +105,7 @@ func (o *BTFSValueArray1499) SetValue(v []BTFSValue1888) {
 }
 
 func (o BTFSValueArray1499) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -109,6 +114,14 @@ func (o BTFSValueArray1499) MarshalJSON() ([]byte, error) {
 
 func (o BTFSValueArray1499) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFSValue1888, errBTFSValue1888 := json.Marshal(o.BTFSValue1888)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
+	errBTFSValue1888 = json.Unmarshal([]byte(serializedBTFSValue1888), &toSerialize)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
 	toSerialize["btType"] = o.BtType
 	if !IsNil(o.Value) {
 		toSerialize["value"] = o.Value
@@ -116,6 +129,43 @@ func (o BTFSValueArray1499) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTFSValueArray1499) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"btType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err;
+	}
+
+	for _, requiredProperty := range(requiredProperties) {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTFSValueArray1499 := _BTFSValueArray1499{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTFSValueArray1499)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTFSValueArray1499(varBTFSValueArray1499)
+
+	return err
+}
+
 type NullableBTFSValueArray1499 struct {
 	value *BTFSValueArray1499
 	isSet bool
@@ -151,3 +201,5 @@ func (v *NullableBTFSValueArray1499) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btfs_value_boolean_1195.go b/onshape/model_btfs_value_boolean_1195.go
index 102706fc5..6861316f5 100644
--- a/onshape/model_btfs_value_boolean_1195.go
+++ b/onshape/model_btfs_value_boolean_1195.go
@@ -13,6 +13,8 @@ package onshape
 
 import (
 	"encoding/json"
+	"bytes"
+	"fmt"
 )
 
 // checks if the BTFSValueBoolean1195 type satisfies the MappedNullable interface at compile time
@@ -20,11 +22,14 @@ var _ MappedNullable = &BTFSValueBoolean1195{}
 
 // BTFSValueBoolean1195 struct for BTFSValueBoolean1195
 type BTFSValueBoolean1195 struct {
+	BTFSValue-1888
 	// Type of JSON object.
 	BtType string `json:"btType"`
-	Value  *bool  `json:"value,omitempty"`
+	Value *bool `json:"value,omitempty"`
 }
 
+type _BTFSValueBoolean1195 BTFSValueBoolean1195
+
 // NewBTFSValueBoolean1195 instantiates a new BTFSValueBoolean1195 object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -100,7 +105,7 @@ func (o *BTFSValueBoolean1195) SetValue(v bool) {
 }
 
 func (o BTFSValueBoolean1195) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -109,6 +114,14 @@ func (o BTFSValueBoolean1195) MarshalJSON() ([]byte, error) {
 
 func (o BTFSValueBoolean1195) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFSValue1888, errBTFSValue1888 := json.Marshal(o.BTFSValue1888)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
+	errBTFSValue1888 = json.Unmarshal([]byte(serializedBTFSValue1888), &toSerialize)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
 	toSerialize["btType"] = o.BtType
 	if !IsNil(o.Value) {
 		toSerialize["value"] = o.Value
@@ -116,6 +129,43 @@ func (o BTFSValueBoolean1195) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTFSValueBoolean1195) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"btType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err;
+	}
+
+	for _, requiredProperty := range(requiredProperties) {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTFSValueBoolean1195 := _BTFSValueBoolean1195{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTFSValueBoolean1195)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTFSValueBoolean1195(varBTFSValueBoolean1195)
+
+	return err
+}
+
 type NullableBTFSValueBoolean1195 struct {
 	value *BTFSValueBoolean1195
 	isSet bool
@@ -151,3 +201,5 @@ func (v *NullableBTFSValueBoolean1195) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btfs_value_number_772.go b/onshape/model_btfs_value_number_772.go
index c4fd51ac2..92e1c904d 100644
--- a/onshape/model_btfs_value_number_772.go
+++ b/onshape/model_btfs_value_number_772.go
@@ -13,6 +13,8 @@ package onshape
 
 import (
 	"encoding/json"
+	"bytes"
+	"fmt"
 )
 
 // checks if the BTFSValueNumber772 type satisfies the MappedNullable interface at compile time
@@ -20,11 +22,14 @@ var _ MappedNullable = &BTFSValueNumber772{}
 
 // BTFSValueNumber772 struct for BTFSValueNumber772
 type BTFSValueNumber772 struct {
+	BTFSValue-1888
 	// Type of JSON object.
-	BtType string   `json:"btType"`
-	Value  *float64 `json:"value,omitempty"`
+	BtType string `json:"btType"`
+	Value *float64 `json:"value,omitempty"`
 }
 
+type _BTFSValueNumber772 BTFSValueNumber772
+
 // NewBTFSValueNumber772 instantiates a new BTFSValueNumber772 object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -100,7 +105,7 @@ func (o *BTFSValueNumber772) SetValue(v float64) {
 }
 
 func (o BTFSValueNumber772) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -109,6 +114,14 @@ func (o BTFSValueNumber772) MarshalJSON() ([]byte, error) {
 
 func (o BTFSValueNumber772) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFSValue1888, errBTFSValue1888 := json.Marshal(o.BTFSValue1888)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
+	errBTFSValue1888 = json.Unmarshal([]byte(serializedBTFSValue1888), &toSerialize)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
 	toSerialize["btType"] = o.BtType
 	if !IsNil(o.Value) {
 		toSerialize["value"] = o.Value
@@ -116,6 +129,43 @@ func (o BTFSValueNumber772) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTFSValueNumber772) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"btType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err;
+	}
+
+	for _, requiredProperty := range(requiredProperties) {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTFSValueNumber772 := _BTFSValueNumber772{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTFSValueNumber772)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTFSValueNumber772(varBTFSValueNumber772)
+
+	return err
+}
+
 type NullableBTFSValueNumber772 struct {
 	value *BTFSValueNumber772
 	isSet bool
@@ -151,3 +201,5 @@ func (v *NullableBTFSValueNumber772) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btfs_value_other_1124.go b/onshape/model_btfs_value_other_1124.go
index bf3cbc62f..a34fb57e7 100644
--- a/onshape/model_btfs_value_other_1124.go
+++ b/onshape/model_btfs_value_other_1124.go
@@ -13,6 +13,8 @@ package onshape
 
 import (
 	"encoding/json"
+	"bytes"
+	"fmt"
 )
 
 // checks if the BTFSValueOther1124 type satisfies the MappedNullable interface at compile time
@@ -20,11 +22,14 @@ var _ MappedNullable = &BTFSValueOther1124{}
 
 // BTFSValueOther1124 struct for BTFSValueOther1124
 type BTFSValueOther1124 struct {
+	BTFSValue-1888
 	// Type of JSON object.
-	BtType string    `json:"btType"`
-	Type   *GBTPType `json:"type,omitempty"`
+	BtType string `json:"btType"`
+	Type *GBTPType `json:"type,omitempty"`
 }
 
+type _BTFSValueOther1124 BTFSValueOther1124
+
 // NewBTFSValueOther1124 instantiates a new BTFSValueOther1124 object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -100,7 +105,7 @@ func (o *BTFSValueOther1124) SetType(v GBTPType) {
 }
 
 func (o BTFSValueOther1124) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -109,6 +114,14 @@ func (o BTFSValueOther1124) MarshalJSON() ([]byte, error) {
 
 func (o BTFSValueOther1124) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFSValue1888, errBTFSValue1888 := json.Marshal(o.BTFSValue1888)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
+	errBTFSValue1888 = json.Unmarshal([]byte(serializedBTFSValue1888), &toSerialize)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
 	toSerialize["btType"] = o.BtType
 	if !IsNil(o.Type) {
 		toSerialize["type"] = o.Type
@@ -116,6 +129,43 @@ func (o BTFSValueOther1124) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTFSValueOther1124) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"btType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err;
+	}
+
+	for _, requiredProperty := range(requiredProperties) {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTFSValueOther1124 := _BTFSValueOther1124{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTFSValueOther1124)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTFSValueOther1124(varBTFSValueOther1124)
+
+	return err
+}
+
 type NullableBTFSValueOther1124 struct {
 	value *BTFSValueOther1124
 	isSet bool
@@ -151,3 +201,5 @@ func (v *NullableBTFSValueOther1124) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btfs_value_string_1422.go b/onshape/model_btfs_value_string_1422.go
index 7b1d56bba..9f0102af9 100644
--- a/onshape/model_btfs_value_string_1422.go
+++ b/onshape/model_btfs_value_string_1422.go
@@ -13,6 +13,8 @@ package onshape
 
 import (
 	"encoding/json"
+	"bytes"
+	"fmt"
 )
 
 // checks if the BTFSValueString1422 type satisfies the MappedNullable interface at compile time
@@ -20,11 +22,14 @@ var _ MappedNullable = &BTFSValueString1422{}
 
 // BTFSValueString1422 struct for BTFSValueString1422
 type BTFSValueString1422 struct {
+	BTFSValue-1888
 	// Type of JSON object.
-	BtType string  `json:"btType"`
-	Value  *string `json:"value,omitempty"`
+	BtType string `json:"btType"`
+	Value *string `json:"value,omitempty"`
 }
 
+type _BTFSValueString1422 BTFSValueString1422
+
 // NewBTFSValueString1422 instantiates a new BTFSValueString1422 object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -100,7 +105,7 @@ func (o *BTFSValueString1422) SetValue(v string) {
 }
 
 func (o BTFSValueString1422) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -109,6 +114,14 @@ func (o BTFSValueString1422) MarshalJSON() ([]byte, error) {
 
 func (o BTFSValueString1422) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFSValue1888, errBTFSValue1888 := json.Marshal(o.BTFSValue1888)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
+	errBTFSValue1888 = json.Unmarshal([]byte(serializedBTFSValue1888), &toSerialize)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
 	toSerialize["btType"] = o.BtType
 	if !IsNil(o.Value) {
 		toSerialize["value"] = o.Value
@@ -116,6 +129,43 @@ func (o BTFSValueString1422) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTFSValueString1422) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"btType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err;
+	}
+
+	for _, requiredProperty := range(requiredProperties) {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTFSValueString1422 := _BTFSValueString1422{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTFSValueString1422)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTFSValueString1422(varBTFSValueString1422)
+
+	return err
+}
+
 type NullableBTFSValueString1422 struct {
 	value *BTFSValueString1422
 	isSet bool
@@ -151,3 +201,5 @@ func (v *NullableBTFSValueString1422) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btfs_value_too_big_1247.go b/onshape/model_btfs_value_too_big_1247.go
index 7b3e49170..b182a9d67 100644
--- a/onshape/model_btfs_value_too_big_1247.go
+++ b/onshape/model_btfs_value_too_big_1247.go
@@ -13,6 +13,8 @@ package onshape
 
 import (
 	"encoding/json"
+	"bytes"
+	"fmt"
 )
 
 // checks if the BTFSValueTooBig1247 type satisfies the MappedNullable interface at compile time
@@ -20,10 +22,13 @@ var _ MappedNullable = &BTFSValueTooBig1247{}
 
 // BTFSValueTooBig1247 struct for BTFSValueTooBig1247
 type BTFSValueTooBig1247 struct {
+	BTFSValue-1888
 	// Type of JSON object.
 	BtType string `json:"btType"`
 }
 
+type _BTFSValueTooBig1247 BTFSValueTooBig1247
+
 // NewBTFSValueTooBig1247 instantiates a new BTFSValueTooBig1247 object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -67,7 +72,7 @@ func (o *BTFSValueTooBig1247) SetBtType(v string) {
 }
 
 func (o BTFSValueTooBig1247) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -76,10 +81,55 @@ func (o BTFSValueTooBig1247) MarshalJSON() ([]byte, error) {
 
 func (o BTFSValueTooBig1247) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFSValue1888, errBTFSValue1888 := json.Marshal(o.BTFSValue1888)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
+	errBTFSValue1888 = json.Unmarshal([]byte(serializedBTFSValue1888), &toSerialize)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
 	toSerialize["btType"] = o.BtType
 	return toSerialize, nil
 }
 
+func (o *BTFSValueTooBig1247) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"btType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err;
+	}
+
+	for _, requiredProperty := range(requiredProperties) {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTFSValueTooBig1247 := _BTFSValueTooBig1247{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTFSValueTooBig1247)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTFSValueTooBig1247(varBTFSValueTooBig1247)
+
+	return err
+}
+
 type NullableBTFSValueTooBig1247 struct {
 	value *BTFSValueTooBig1247
 	isSet bool
@@ -115,3 +165,5 @@ func (v *NullableBTFSValueTooBig1247) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btfs_value_undefined_2003.go b/onshape/model_btfs_value_undefined_2003.go
index 7dcd14a48..73ed6d597 100644
--- a/onshape/model_btfs_value_undefined_2003.go
+++ b/onshape/model_btfs_value_undefined_2003.go
@@ -13,6 +13,8 @@ package onshape
 
 import (
 	"encoding/json"
+	"bytes"
+	"fmt"
 )
 
 // checks if the BTFSValueUndefined2003 type satisfies the MappedNullable interface at compile time
@@ -20,10 +22,13 @@ var _ MappedNullable = &BTFSValueUndefined2003{}
 
 // BTFSValueUndefined2003 struct for BTFSValueUndefined2003
 type BTFSValueUndefined2003 struct {
+	BTFSValue-1888
 	// Type of JSON object.
 	BtType string `json:"btType"`
 }
 
+type _BTFSValueUndefined2003 BTFSValueUndefined2003
+
 // NewBTFSValueUndefined2003 instantiates a new BTFSValueUndefined2003 object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -67,7 +72,7 @@ func (o *BTFSValueUndefined2003) SetBtType(v string) {
 }
 
 func (o BTFSValueUndefined2003) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -76,10 +81,55 @@ func (o BTFSValueUndefined2003) MarshalJSON() ([]byte, error) {
 
 func (o BTFSValueUndefined2003) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFSValue1888, errBTFSValue1888 := json.Marshal(o.BTFSValue1888)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
+	errBTFSValue1888 = json.Unmarshal([]byte(serializedBTFSValue1888), &toSerialize)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
 	toSerialize["btType"] = o.BtType
 	return toSerialize, nil
 }
 
+func (o *BTFSValueUndefined2003) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"btType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err;
+	}
+
+	for _, requiredProperty := range(requiredProperties) {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTFSValueUndefined2003 := _BTFSValueUndefined2003{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTFSValueUndefined2003)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTFSValueUndefined2003(varBTFSValueUndefined2003)
+
+	return err
+}
+
 type NullableBTFSValueUndefined2003 struct {
 	value *BTFSValueUndefined2003
 	isSet bool
@@ -115,3 +165,5 @@ func (v *NullableBTFSValueUndefined2003) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btfs_value_with_units_1817.go b/onshape/model_btfs_value_with_units_1817.go
index f828ea31f..4fd6a77af 100644
--- a/onshape/model_btfs_value_with_units_1817.go
+++ b/onshape/model_btfs_value_with_units_1817.go
@@ -13,6 +13,8 @@ package onshape
 
 import (
 	"encoding/json"
+	"bytes"
+	"fmt"
 )
 
 // checks if the BTFSValueWithUnits1817 type satisfies the MappedNullable interface at compile time
@@ -20,12 +22,15 @@ var _ MappedNullable = &BTFSValueWithUnits1817{}
 
 // BTFSValueWithUnits1817 struct for BTFSValueWithUnits1817
 type BTFSValueWithUnits1817 struct {
+	BTFSValue-1888
 	// Type of JSON object.
-	BtType      string            `json:"btType"`
+	BtType string `json:"btType"`
 	UnitToPower *map[string]int32 `json:"unitToPower,omitempty"`
-	Value       *float64          `json:"value,omitempty"`
+	Value *float64 `json:"value,omitempty"`
 }
 
+type _BTFSValueWithUnits1817 BTFSValueWithUnits1817
+
 // NewBTFSValueWithUnits1817 instantiates a new BTFSValueWithUnits1817 object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -133,7 +138,7 @@ func (o *BTFSValueWithUnits1817) SetValue(v float64) {
 }
 
 func (o BTFSValueWithUnits1817) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -142,6 +147,14 @@ func (o BTFSValueWithUnits1817) MarshalJSON() ([]byte, error) {
 
 func (o BTFSValueWithUnits1817) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTFSValue1888, errBTFSValue1888 := json.Marshal(o.BTFSValue1888)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
+	errBTFSValue1888 = json.Unmarshal([]byte(serializedBTFSValue1888), &toSerialize)
+	if errBTFSValue1888 != nil {
+		return map[string]interface{}{}, errBTFSValue1888
+	}
 	toSerialize["btType"] = o.BtType
 	if !IsNil(o.UnitToPower) {
 		toSerialize["unitToPower"] = o.UnitToPower
@@ -152,6 +165,43 @@ func (o BTFSValueWithUnits1817) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTFSValueWithUnits1817) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"btType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err;
+	}
+
+	for _, requiredProperty := range(requiredProperties) {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTFSValueWithUnits1817 := _BTFSValueWithUnits1817{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTFSValueWithUnits1817)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTFSValueWithUnits1817(varBTFSValueWithUnits1817)
+
+	return err
+}
+
 type NullableBTFSValueWithUnits1817 struct {
 	value *BTFSValueWithUnits1817
 	isSet bool
@@ -187,3 +237,5 @@ func (v *NullableBTFSValueWithUnits1817) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btin_context_object_filter_3810.go b/onshape/model_btin_context_object_filter_3810.go
index 1d26ff1a3..6ab3e58b2 100644
--- a/onshape/model_btin_context_object_filter_3810.go
+++ b/onshape/model_btin_context_object_filter_3810.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTInContextObjectFilter3810{}
 
 // BTInContextObjectFilter3810 struct for BTInContextObjectFilter3810
 type BTInContextObjectFilter3810 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType      *string `json:"btType,omitempty"`
-	IsInContext *bool   `json:"isInContext,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsInContext *bool `json:"isInContext,omitempty"`
 }
 
 // NewBTInContextObjectFilter3810 instantiates a new BTInContextObjectFilter3810 object
@@ -107,7 +108,7 @@ func (o *BTInContextObjectFilter3810) SetIsInContext(v bool) {
 }
 
 func (o BTInContextObjectFilter3810) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTInContextObjectFilter3810) MarshalJSON() ([]byte, error) {
 
 func (o BTInContextObjectFilter3810) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTInContextObjectFilter3810) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btj_edit_change_2636.go b/onshape/model_btj_edit_change_2636.go
index 4f14d0ba3..58a8613aa 100644
--- a/onshape/model_btj_edit_change_2636.go
+++ b/onshape/model_btj_edit_change_2636.go
@@ -13,6 +13,8 @@ package onshape
 
 import (
 	"encoding/json"
+	"bytes"
+	"fmt"
 )
 
 // checks if the BTJEditChange2636 type satisfies the MappedNullable interface at compile time
@@ -20,12 +22,15 @@ var _ MappedNullable = &BTJEditChange2636{}
 
 // BTJEditChange2636 Change the value of a node.
 type BTJEditChange2636 struct {
+	BTJEdit-3734
 	// Type of JSON object.
-	BtType *string                   `json:"btType,omitempty"`
-	Path   *BTJPath3073              `json:"path,omitempty"`
-	Value  BTGetJsonResponse2137Tree `json:"value"`
+	BtType *string `json:"btType,omitempty"`
+	Path *BTJPath3073 `json:"path,omitempty"`
+	Value BTGetJsonResponse2137Tree `json:"value"`
 }
 
+type _BTJEditChange2636 BTJEditChange2636
+
 // NewBTJEditChange2636 instantiates a new BTJEditChange2636 object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -133,7 +138,7 @@ func (o *BTJEditChange2636) SetValue(v BTGetJsonResponse2137Tree) {
 }
 
 func (o BTJEditChange2636) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -142,6 +147,14 @@ func (o BTJEditChange2636) MarshalJSON() ([]byte, error) {
 
 func (o BTJEditChange2636) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTJEdit3734, errBTJEdit3734 := json.Marshal(o.BTJEdit3734)
+	if errBTJEdit3734 != nil {
+		return map[string]interface{}{}, errBTJEdit3734
+	}
+	errBTJEdit3734 = json.Unmarshal([]byte(serializedBTJEdit3734), &toSerialize)
+	if errBTJEdit3734 != nil {
+		return map[string]interface{}{}, errBTJEdit3734
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -152,6 +165,43 @@ func (o BTJEditChange2636) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTJEditChange2636) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"value",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err;
+	}
+
+	for _, requiredProperty := range(requiredProperties) {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTJEditChange2636 := _BTJEditChange2636{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTJEditChange2636)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTJEditChange2636(varBTJEditChange2636)
+
+	return err
+}
+
 type NullableBTJEditChange2636 struct {
 	value *BTJEditChange2636
 	isSet bool
@@ -187,3 +237,5 @@ func (v *NullableBTJEditChange2636) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btj_edit_delete_1992.go b/onshape/model_btj_edit_delete_1992.go
index 0a56c27b3..7bd23cd17 100644
--- a/onshape/model_btj_edit_delete_1992.go
+++ b/onshape/model_btj_edit_delete_1992.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTJEditDelete1992{}
 
 // BTJEditDelete1992 Deletes the specified node.
 type BTJEditDelete1992 struct {
+	BTJEdit-3734
 	// Type of JSON object.
-	BtType *string      `json:"btType,omitempty"`
-	Path   *BTJPath3073 `json:"path,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Path *BTJPath3073 `json:"path,omitempty"`
 }
 
 // NewBTJEditDelete1992 instantiates a new BTJEditDelete1992 object
@@ -107,7 +108,7 @@ func (o *BTJEditDelete1992) SetPath(v BTJPath3073) {
 }
 
 func (o BTJEditDelete1992) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTJEditDelete1992) MarshalJSON() ([]byte, error) {
 
 func (o BTJEditDelete1992) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTJEdit3734, errBTJEdit3734 := json.Marshal(o.BTJEdit3734)
+	if errBTJEdit3734 != nil {
+		return map[string]interface{}{}, errBTJEdit3734
+	}
+	errBTJEdit3734 = json.Unmarshal([]byte(serializedBTJEdit3734), &toSerialize)
+	if errBTJEdit3734 != nil {
+		return map[string]interface{}{}, errBTJEdit3734
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTJEditDelete1992) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btj_edit_insert_2523.go b/onshape/model_btj_edit_insert_2523.go
index bb84794fc..0660c41f4 100644
--- a/onshape/model_btj_edit_insert_2523.go
+++ b/onshape/model_btj_edit_insert_2523.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTJEditInsert2523{}
 
 // BTJEditInsert2523 Inserts a value using the specified path.
 type BTJEditInsert2523 struct {
+	BTJEdit-3734
 	// Type of JSON object.
-	BtType *string                    `json:"btType,omitempty"`
-	Path   *BTJPath3073               `json:"path,omitempty"`
-	Value  *BTGetJsonResponse2137Tree `json:"value,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Path *BTJPath3073 `json:"path,omitempty"`
+	Value *BTGetJsonResponse2137Tree `json:"value,omitempty"`
 }
 
 // NewBTJEditInsert2523 instantiates a new BTJEditInsert2523 object
@@ -140,7 +141,7 @@ func (o *BTJEditInsert2523) SetValue(v BTGetJsonResponse2137Tree) {
 }
 
 func (o BTJEditInsert2523) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTJEditInsert2523) MarshalJSON() ([]byte, error) {
 
 func (o BTJEditInsert2523) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTJEdit3734, errBTJEdit3734 := json.Marshal(o.BTJEdit3734)
+	if errBTJEdit3734 != nil {
+		return map[string]interface{}{}, errBTJEdit3734
+	}
+	errBTJEdit3734 = json.Unmarshal([]byte(serializedBTJEdit3734), &toSerialize)
+	if errBTJEdit3734 != nil {
+		return map[string]interface{}{}, errBTJEdit3734
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTJEditInsert2523) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btj_edit_list_2707.go b/onshape/model_btj_edit_list_2707.go
index b5a070a75..99960da4b 100644
--- a/onshape/model_btj_edit_list_2707.go
+++ b/onshape/model_btj_edit_list_2707.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTJEditList2707{}
 
 // BTJEditList2707 A list of edits that will be applied in order.
 type BTJEditList2707 struct {
+	BTJEdit-3734
 	// Type of JSON object.
-	BtType *string       `json:"btType,omitempty"`
-	Edits  []BTJEdit3734 `json:"edits,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Edits []BTJEdit3734 `json:"edits,omitempty"`
 }
 
 // NewBTJEditList2707 instantiates a new BTJEditList2707 object
@@ -107,7 +108,7 @@ func (o *BTJEditList2707) SetEdits(v []BTJEdit3734) {
 }
 
 func (o BTJEditList2707) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTJEditList2707) MarshalJSON() ([]byte, error) {
 
 func (o BTJEditList2707) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTJEdit3734, errBTJEdit3734 := json.Marshal(o.BTJEdit3734)
+	if errBTJEdit3734 != nil {
+		return map[string]interface{}{}, errBTJEdit3734
+	}
+	errBTJEdit3734 = json.Unmarshal([]byte(serializedBTJEdit3734), &toSerialize)
+	if errBTJEdit3734 != nil {
+		return map[string]interface{}{}, errBTJEdit3734
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTJEditList2707) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btj_edit_move_3245.go b/onshape/model_btj_edit_move_3245.go
index bd92196c9..dc9b0547b 100644
--- a/onshape/model_btj_edit_move_3245.go
+++ b/onshape/model_btj_edit_move_3245.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTJEditMove3245{}
 
 // BTJEditMove3245 Move an existing node from one path to another.
 type BTJEditMove3245 struct {
+	BTJEdit-3734
 	// Type of JSON object.
-	BtType          *string      `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	DestinationPath *BTJPath3073 `json:"destinationPath,omitempty"`
-	SourcePath      *BTJPath3073 `json:"sourcePath,omitempty"`
+	SourcePath *BTJPath3073 `json:"sourcePath,omitempty"`
 }
 
 // NewBTJEditMove3245 instantiates a new BTJEditMove3245 object
@@ -140,7 +141,7 @@ func (o *BTJEditMove3245) SetSourcePath(v BTJPath3073) {
 }
 
 func (o BTJEditMove3245) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTJEditMove3245) MarshalJSON() ([]byte, error) {
 
 func (o BTJEditMove3245) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTJEdit3734, errBTJEdit3734 := json.Marshal(o.BTJEdit3734)
+	if errBTJEdit3734 != nil {
+		return map[string]interface{}{}, errBTJEdit3734
+	}
+	errBTJEdit3734 = json.Unmarshal([]byte(serializedBTJEdit3734), &toSerialize)
+	if errBTJEdit3734 != nil {
+		return map[string]interface{}{}, errBTJEdit3734
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTJEditMove3245) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btj_path_3073.go b/onshape/model_btj_path_3073.go
index aab9640f9..2754c5461 100644
--- a/onshape/model_btj_path_3073.go
+++ b/onshape/model_btj_path_3073.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the BTJPath3073 type satisfies the MappedNullable interface at compile time
@@ -27,6 +29,8 @@ type BTJPath3073 struct {
 	StartNode string `json:"startNode"`
 }
 
+type _BTJPath3073 BTJPath3073
+
 // NewBTJPath3073 instantiates a new BTJPath3073 object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -153,6 +157,43 @@ func (o BTJPath3073) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *BTJPath3073) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"startNode",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varBTJPath3073 := _BTJPath3073{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varBTJPath3073)
+
+	if err != nil {
+		return err
+	}
+
+	*o = BTJPath3073(varBTJPath3073)
+
+	return err
+}
+
 type NullableBTJPath3073 struct {
 	value *BTJPath3073
 	isSet bool
diff --git a/onshape/model_btj_path_index_1871.go b/onshape/model_btj_path_index_1871.go
index 0eca37cca..0835a2bcb 100644
--- a/onshape/model_btj_path_index_1871.go
+++ b/onshape/model_btj_path_index_1871.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTJPathIndex1871{}
 
 // BTJPathIndex1871 Identifies a value in a json array. For insert and move edit destinations, -1 can be used to indicate 'end'.
 type BTJPathIndex1871 struct {
+	BTJPathElement-2297
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
-	Index  *int32  `json:"index,omitempty"`
+	Index *int32 `json:"index,omitempty"`
 }
 
 // NewBTJPathIndex1871 instantiates a new BTJPathIndex1871 object
@@ -107,7 +108,7 @@ func (o *BTJPathIndex1871) SetIndex(v int32) {
 }
 
 func (o BTJPathIndex1871) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTJPathIndex1871) MarshalJSON() ([]byte, error) {
 
 func (o BTJPathIndex1871) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTJPathElement2297, errBTJPathElement2297 := json.Marshal(o.BTJPathElement2297)
+	if errBTJPathElement2297 != nil {
+		return map[string]interface{}{}, errBTJPathElement2297
+	}
+	errBTJPathElement2297 = json.Unmarshal([]byte(serializedBTJPathElement2297), &toSerialize)
+	if errBTJPathElement2297 != nil {
+		return map[string]interface{}{}, errBTJPathElement2297
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTJPathIndex1871) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btj_path_key_3221.go b/onshape/model_btj_path_key_3221.go
index 8f137efb0..8c015d234 100644
--- a/onshape/model_btj_path_key_3221.go
+++ b/onshape/model_btj_path_key_3221.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTJPathKey3221{}
 
 // BTJPathKey3221 Identifies a subtree of the json structure by field name.
 type BTJPathKey3221 struct {
+	BTJPathElement-2297
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
-	Key    *string `json:"key,omitempty"`
+	Key *string `json:"key,omitempty"`
 }
 
 // NewBTJPathKey3221 instantiates a new BTJPathKey3221 object
@@ -107,7 +108,7 @@ func (o *BTJPathKey3221) SetKey(v string) {
 }
 
 func (o BTJPathKey3221) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTJPathKey3221) MarshalJSON() ([]byte, error) {
 
 func (o BTJPathKey3221) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTJPathElement2297, errBTJPathElement2297 := json.Marshal(o.BTJPathElement2297)
+	if errBTJPathElement2297 != nil {
+		return map[string]interface{}{}, errBTJPathElement2297
+	}
+	errBTJPathElement2297 = json.Unmarshal([]byte(serializedBTJPathElement2297), &toSerialize)
+	if errBTJPathElement2297 != nil {
+		return map[string]interface{}{}, errBTJPathElement2297
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTJPathKey3221) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_assembly_feature1_2218.go b/onshape/model_btm_assembly_feature1_2218.go
index 36f65dfe3..846cf8113 100644
--- a/onshape/model_btm_assembly_feature1_2218.go
+++ b/onshape/model_btm_assembly_feature1_2218.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMAssemblyFeature12218{}
 
 // BTMAssemblyFeature12218 struct for BTMAssemblyFeature12218
 type BTMAssemblyFeature12218 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMAssemblyFeature12218) SetBtType(v string) {
 }
 
 func (o BTMAssemblyFeature12218) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMAssemblyFeature12218) MarshalJSON() ([]byte, error) {
 
 func (o BTMAssemblyFeature12218) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMAssemblyFeature12218) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_assembly_feature2_1022.go b/onshape/model_btm_assembly_feature2_1022.go
index ec24aa1cf..e37c75308 100644
--- a/onshape/model_btm_assembly_feature2_1022.go
+++ b/onshape/model_btm_assembly_feature2_1022.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMAssemblyFeature21022{}
 
 // BTMAssemblyFeature21022 struct for BTMAssemblyFeature21022
 type BTMAssemblyFeature21022 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMAssemblyFeature21022) SetBtType(v string) {
 }
 
 func (o BTMAssemblyFeature21022) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMAssemblyFeature21022) MarshalJSON() ([]byte, error) {
 
 func (o BTMAssemblyFeature21022) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMAssemblyFeature21022) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_assembly_feature_887.go b/onshape/model_btm_assembly_feature_887.go
index a5ced1514..7492bfa31 100644
--- a/onshape/model_btm_assembly_feature_887.go
+++ b/onshape/model_btm_assembly_feature_887.go
@@ -20,15 +20,16 @@ var _ MappedNullable = &BTMAssemblyFeature887{}
 
 // BTMAssemblyFeature887 struct for BTMAssemblyFeature887
 type BTMAssemblyFeature887 struct {
+	BTMFeature-134
 	// Type of JSON object.
-	BtType                                 *string                                   `json:"btType,omitempty"`
-	AuxiliaryTreeFeature                   *bool                                     `json:"auxiliaryTreeFeature,omitempty"`
-	FeatureFolder                          *bool                                     `json:"featureFolder,omitempty"`
-	FeatureListFieldIndex                  *int32                                    `json:"featureListFieldIndex,omitempty"`
-	FieldIndexForOwnedMateConnectors       *int32                                    `json:"fieldIndexForOwnedMateConnectors,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	AuxiliaryTreeFeature *bool `json:"auxiliaryTreeFeature,omitempty"`
+	FeatureFolder *bool `json:"featureFolder,omitempty"`
+	FeatureListFieldIndex *int32 `json:"featureListFieldIndex,omitempty"`
+	FieldIndexForOwnedMateConnectors *int32 `json:"fieldIndexForOwnedMateConnectors,omitempty"`
 	OccurrenceQueriesFromAllConfigurations []BTMIndividualQueryWithOccurrenceBase904 `json:"occurrenceQueriesFromAllConfigurations,omitempty"`
-	ParametricInstanceFeature              *bool                                     `json:"parametricInstanceFeature,omitempty"`
-	Version                                *int32                                    `json:"version,omitempty"`
+	ParametricInstanceFeature *bool `json:"parametricInstanceFeature,omitempty"`
+	Version *int32 `json:"version,omitempty"`
 }
 
 // NewBTMAssemblyFeature887 instantiates a new BTMAssemblyFeature887 object
@@ -305,7 +306,7 @@ func (o *BTMAssemblyFeature887) SetVersion(v int32) {
 }
 
 func (o BTMAssemblyFeature887) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -314,6 +315,14 @@ func (o BTMAssemblyFeature887) MarshalJSON() ([]byte, error) {
 
 func (o BTMAssemblyFeature887) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMFeature134, errBTMFeature134 := json.Marshal(o.BTMFeature134)
+	if errBTMFeature134 != nil {
+		return map[string]interface{}{}, errBTMFeature134
+	}
+	errBTMFeature134 = json.Unmarshal([]byte(serializedBTMFeature134), &toSerialize)
+	if errBTMFeature134 != nil {
+		return map[string]interface{}{}, errBTMFeature134
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -376,3 +385,5 @@ func (v *NullableBTMAssemblyFeature887) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_assembly_feature_folder_2543.go b/onshape/model_btm_assembly_feature_folder_2543.go
index 577d42b61..fb91a65bc 100644
--- a/onshape/model_btm_assembly_feature_folder_2543.go
+++ b/onshape/model_btm_assembly_feature_folder_2543.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTMAssemblyFeatureFolder2543{}
 
 // BTMAssemblyFeatureFolder2543 struct for BTMAssemblyFeatureFolder2543
 type BTMAssemblyFeatureFolder2543 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
-	BtType         *string     `json:"btType,omitempty"`
-	FolderEnd      *bool       `json:"folderEnd,omitempty"`
-	FolderStart    *bool       `json:"folderStart,omitempty"`
-	StartNodeId    *string     `json:"startNodeId,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	FolderEnd *bool `json:"folderEnd,omitempty"`
+	FolderStart *bool `json:"folderStart,omitempty"`
+	StartNodeId *string `json:"startNodeId,omitempty"`
 	StartNodeIdRaw *BTObjectId `json:"startNodeIdRaw,omitempty"`
 }
 
@@ -206,7 +207,7 @@ func (o *BTMAssemblyFeatureFolder2543) SetStartNodeIdRaw(v BTObjectId) {
 }
 
 func (o BTMAssemblyFeatureFolder2543) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTMAssemblyFeatureFolder2543) MarshalJSON() ([]byte, error) {
 
 func (o BTMAssemblyFeatureFolder2543) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTMAssemblyFeatureFolder2543) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_assembly_pattern_feature_2241.go b/onshape/model_btm_assembly_pattern_feature_2241.go
index a500c8e2d..c1256527c 100644
--- a/onshape/model_btm_assembly_pattern_feature_2241.go
+++ b/onshape/model_btm_assembly_pattern_feature_2241.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTMAssemblyPatternFeature2241{}
 
 // BTMAssemblyPatternFeature2241 struct for BTMAssemblyPatternFeature2241
 type BTMAssemblyPatternFeature2241 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
-	BtType      *string         `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	PatternType *GBTPatternType `json:"patternType,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTMAssemblyPatternFeature2241) SetPatternType(v GBTPatternType) {
 }
 
 func (o BTMAssemblyPatternFeature2241) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMAssemblyPatternFeature2241) MarshalJSON() ([]byte, error) {
 
 func (o BTMAssemblyPatternFeature2241) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMAssemblyPatternFeature2241) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_assembly_replicate_feature_1351.go b/onshape/model_btm_assembly_replicate_feature_1351.go
index 511f32935..22d71d4fd 100644
--- a/onshape/model_btm_assembly_replicate_feature_1351.go
+++ b/onshape/model_btm_assembly_replicate_feature_1351.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMAssemblyReplicateFeature1351{}
 
 // BTMAssemblyReplicateFeature1351 struct for BTMAssemblyReplicateFeature1351
 type BTMAssemblyReplicateFeature1351 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMAssemblyReplicateFeature1351) SetBtType(v string) {
 }
 
 func (o BTMAssemblyReplicateFeature1351) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMAssemblyReplicateFeature1351) MarshalJSON() ([]byte, error) {
 
 func (o BTMAssemblyReplicateFeature1351) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMAssemblyReplicateFeature1351) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_configuration_data_1560.go b/onshape/model_btm_configuration_data_1560.go
index 1c1af1600..f8c1dcd11 100644
--- a/onshape/model_btm_configuration_data_1560.go
+++ b/onshape/model_btm_configuration_data_1560.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTMConfigurationData1560{}
 
 // BTMConfigurationData1560 struct for BTMConfigurationData1560
 type BTMConfigurationData1560 struct {
+	BTMNode-19
 	// Type of JSON object.
-	BtType                     *string                   `json:"btType,omitempty"`
-	CurrentConfiguration       []BTMParameter1           `json:"currentConfiguration,omitempty"`
-	CurrentFSValues            *map[string]BTFSValue1888 `json:"currentFSValues,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	CurrentConfiguration []BTMParameter1 `json:"currentConfiguration,omitempty"`
+	CurrentFSValues *map[string]BTFSValue1888 `json:"currentFSValues,omitempty"`
 	DefaultConfigurationValues *map[string]BTFSValue1888 `json:"defaultConfigurationValues,omitempty"`
 }
 
@@ -173,7 +174,7 @@ func (o *BTMConfigurationData1560) SetDefaultConfigurationValues(v map[string]BT
 }
 
 func (o BTMConfigurationData1560) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTMConfigurationData1560) MarshalJSON() ([]byte, error) {
 
 func (o BTMConfigurationData1560) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMNode19, errBTMNode19 := json.Marshal(o.BTMNode19)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
+	errBTMNode19 = json.Unmarshal([]byte(serializedBTMNode19), &toSerialize)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTMConfigurationData1560) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_configuration_parameter_boolean_2550.go b/onshape/model_btm_configuration_parameter_boolean_2550.go
index 791a28256..d037ae23f 100644
--- a/onshape/model_btm_configuration_parameter_boolean_2550.go
+++ b/onshape/model_btm_configuration_parameter_boolean_2550.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTMConfigurationParameterBoolean2550{}
 
 // BTMConfigurationParameterBoolean2550 struct for BTMConfigurationParameterBoolean2550
 type BTMConfigurationParameterBoolean2550 struct {
+	BTMConfigurationParameter-819
 	// Type of JSON object.
-	BtType       *string `json:"btType,omitempty"`
-	DefaultValue *bool   `json:"defaultValue,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	DefaultValue *bool `json:"defaultValue,omitempty"`
 }
 
 // NewBTMConfigurationParameterBoolean2550 instantiates a new BTMConfigurationParameterBoolean2550 object
@@ -107,7 +108,7 @@ func (o *BTMConfigurationParameterBoolean2550) SetDefaultValue(v bool) {
 }
 
 func (o BTMConfigurationParameterBoolean2550) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMConfigurationParameterBoolean2550) MarshalJSON() ([]byte, error) {
 
 func (o BTMConfigurationParameterBoolean2550) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMConfigurationParameter819, errBTMConfigurationParameter819 := json.Marshal(o.BTMConfigurationParameter819)
+	if errBTMConfigurationParameter819 != nil {
+		return map[string]interface{}{}, errBTMConfigurationParameter819
+	}
+	errBTMConfigurationParameter819 = json.Unmarshal([]byte(serializedBTMConfigurationParameter819), &toSerialize)
+	if errBTMConfigurationParameter819 != nil {
+		return map[string]interface{}{}, errBTMConfigurationParameter819
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMConfigurationParameterBoolean2550) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_configuration_parameter_enum_105.go b/onshape/model_btm_configuration_parameter_enum_105.go
index c2950c28e..af0d63929 100644
--- a/onshape/model_btm_configuration_parameter_enum_105.go
+++ b/onshape/model_btm_configuration_parameter_enum_105.go
@@ -20,13 +20,14 @@ var _ MappedNullable = &BTMConfigurationParameterEnum105{}
 
 // BTMConfigurationParameterEnum105 struct for BTMConfigurationParameterEnum105
 type BTMConfigurationParameterEnum105 struct {
+	BTMConfigurationParameter-819
 	// Type of JSON object.
-	BtType       *string            `json:"btType,omitempty"`
-	DefaultValue *string            `json:"defaultValue,omitempty"`
-	EnumName     *string            `json:"enumName,omitempty"`
-	Namespace    *string            `json:"namespace,omitempty"`
-	OptionIds    []string           `json:"optionIds,omitempty"`
-	Options      []BTMEnumOption592 `json:"options,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	DefaultValue *string `json:"defaultValue,omitempty"`
+	EnumName *string `json:"enumName,omitempty"`
+	Namespace *string `json:"namespace,omitempty"`
+	OptionIds []string `json:"optionIds,omitempty"`
+	Options []BTMEnumOption592 `json:"options,omitempty"`
 }
 
 // NewBTMConfigurationParameterEnum105 instantiates a new BTMConfigurationParameterEnum105 object
@@ -239,7 +240,7 @@ func (o *BTMConfigurationParameterEnum105) SetOptions(v []BTMEnumOption592) {
 }
 
 func (o BTMConfigurationParameterEnum105) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -248,6 +249,14 @@ func (o BTMConfigurationParameterEnum105) MarshalJSON() ([]byte, error) {
 
 func (o BTMConfigurationParameterEnum105) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMConfigurationParameter819, errBTMConfigurationParameter819 := json.Marshal(o.BTMConfigurationParameter819)
+	if errBTMConfigurationParameter819 != nil {
+		return map[string]interface{}{}, errBTMConfigurationParameter819
+	}
+	errBTMConfigurationParameter819 = json.Unmarshal([]byte(serializedBTMConfigurationParameter819), &toSerialize)
+	if errBTMConfigurationParameter819 != nil {
+		return map[string]interface{}{}, errBTMConfigurationParameter819
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -304,3 +313,5 @@ func (v *NullableBTMConfigurationParameterEnum105) UnmarshalJSON(src []byte) err
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_configuration_parameter_quantity_1826.go b/onshape/model_btm_configuration_parameter_quantity_1826.go
index 65eb7f5d5..009e76855 100644
--- a/onshape/model_btm_configuration_parameter_quantity_1826.go
+++ b/onshape/model_btm_configuration_parameter_quantity_1826.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTMConfigurationParameterQuantity1826{}
 
 // BTMConfigurationParameterQuantity1826 struct for BTMConfigurationParameterQuantity1826
 type BTMConfigurationParameterQuantity1826 struct {
+	BTMConfigurationParameter-819
 	// Type of JSON object.
-	BtType          *string             `json:"btType,omitempty"`
-	QuantityType    *GBTQuantityType    `json:"quantityType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	QuantityType *GBTQuantityType `json:"quantityType,omitempty"`
 	RangeAndDefault *BTQuantityRange181 `json:"rangeAndDefault,omitempty"`
 }
 
@@ -140,7 +141,7 @@ func (o *BTMConfigurationParameterQuantity1826) SetRangeAndDefault(v BTQuantityR
 }
 
 func (o BTMConfigurationParameterQuantity1826) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTMConfigurationParameterQuantity1826) MarshalJSON() ([]byte, error) {
 
 func (o BTMConfigurationParameterQuantity1826) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMConfigurationParameter819, errBTMConfigurationParameter819 := json.Marshal(o.BTMConfigurationParameter819)
+	if errBTMConfigurationParameter819 != nil {
+		return map[string]interface{}{}, errBTMConfigurationParameter819
+	}
+	errBTMConfigurationParameter819 = json.Unmarshal([]byte(serializedBTMConfigurationParameter819), &toSerialize)
+	if errBTMConfigurationParameter819 != nil {
+		return map[string]interface{}{}, errBTMConfigurationParameter819
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTMConfigurationParameterQuantity1826) UnmarshalJSON(src []byte
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_configuration_parameter_string_872.go b/onshape/model_btm_configuration_parameter_string_872.go
index 406e778be..70b45e353 100644
--- a/onshape/model_btm_configuration_parameter_string_872.go
+++ b/onshape/model_btm_configuration_parameter_string_872.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTMConfigurationParameterString872{}
 
 // BTMConfigurationParameterString872 struct for BTMConfigurationParameterString872
 type BTMConfigurationParameterString872 struct {
+	BTMConfigurationParameter-819
 	// Type of JSON object.
-	BtType       *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	DefaultValue *string `json:"defaultValue,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTMConfigurationParameterString872) SetDefaultValue(v string) {
 }
 
 func (o BTMConfigurationParameterString872) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMConfigurationParameterString872) MarshalJSON() ([]byte, error) {
 
 func (o BTMConfigurationParameterString872) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMConfigurationParameter819, errBTMConfigurationParameter819 := json.Marshal(o.BTMConfigurationParameter819)
+	if errBTMConfigurationParameter819 != nil {
+		return map[string]interface{}{}, errBTMConfigurationParameter819
+	}
+	errBTMConfigurationParameter819 = json.Unmarshal([]byte(serializedBTMConfigurationParameter819), &toSerialize)
+	if errBTMConfigurationParameter819 != nil {
+		return map[string]interface{}{}, errBTMConfigurationParameter819
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMConfigurationParameterString872) UnmarshalJSON(src []byte) e
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_configured_value_by_boolean_1501.go b/onshape/model_btm_configured_value_by_boolean_1501.go
index f2dba50ae..1cc80038e 100644
--- a/onshape/model_btm_configured_value_by_boolean_1501.go
+++ b/onshape/model_btm_configured_value_by_boolean_1501.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTMConfiguredValueByBoolean1501{}
 
 // BTMConfiguredValueByBoolean1501 struct for BTMConfiguredValueByBoolean1501
 type BTMConfiguredValueByBoolean1501 struct {
+	BTMConfiguredValue-1341
 	// Type of JSON object.
-	BtType       *string `json:"btType,omitempty"`
-	BooleanValue *bool   `json:"booleanValue,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	BooleanValue *bool `json:"booleanValue,omitempty"`
 }
 
 // NewBTMConfiguredValueByBoolean1501 instantiates a new BTMConfiguredValueByBoolean1501 object
@@ -107,7 +108,7 @@ func (o *BTMConfiguredValueByBoolean1501) SetBooleanValue(v bool) {
 }
 
 func (o BTMConfiguredValueByBoolean1501) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMConfiguredValueByBoolean1501) MarshalJSON() ([]byte, error) {
 
 func (o BTMConfiguredValueByBoolean1501) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMConfiguredValue1341, errBTMConfiguredValue1341 := json.Marshal(o.BTMConfiguredValue1341)
+	if errBTMConfiguredValue1341 != nil {
+		return map[string]interface{}{}, errBTMConfiguredValue1341
+	}
+	errBTMConfiguredValue1341 = json.Unmarshal([]byte(serializedBTMConfiguredValue1341), &toSerialize)
+	if errBTMConfiguredValue1341 != nil {
+		return map[string]interface{}{}, errBTMConfiguredValue1341
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMConfiguredValueByBoolean1501) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_configured_value_by_enum_1923.go b/onshape/model_btm_configured_value_by_enum_1923.go
index c7d247e87..4841504ea 100644
--- a/onshape/model_btm_configured_value_by_enum_1923.go
+++ b/onshape/model_btm_configured_value_by_enum_1923.go
@@ -20,13 +20,14 @@ var _ MappedNullable = &BTMConfiguredValueByEnum1923{}
 
 // BTMConfiguredValueByEnum1923 struct for BTMConfiguredValueByEnum1923
 type BTMConfiguredValueByEnum1923 struct {
+	BTMConfiguredValue-1341
 	// Type of JSON object.
-	BtType    *string `json:"btType,omitempty"`
-	EnumName  *string `json:"enumName,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	EnumName *string `json:"enumName,omitempty"`
 	EnumValue *string `json:"enumValue,omitempty"`
 	// Element microversion that is being imported.
 	ImportMicroversion *string `json:"importMicroversion,omitempty"`
-	Namespace          *string `json:"namespace,omitempty"`
+	Namespace *string `json:"namespace,omitempty"`
 }
 
 // NewBTMConfiguredValueByEnum1923 instantiates a new BTMConfiguredValueByEnum1923 object
@@ -207,7 +208,7 @@ func (o *BTMConfiguredValueByEnum1923) SetNamespace(v string) {
 }
 
 func (o BTMConfiguredValueByEnum1923) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -216,6 +217,14 @@ func (o BTMConfiguredValueByEnum1923) MarshalJSON() ([]byte, error) {
 
 func (o BTMConfiguredValueByEnum1923) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMConfiguredValue1341, errBTMConfiguredValue1341 := json.Marshal(o.BTMConfiguredValue1341)
+	if errBTMConfiguredValue1341 != nil {
+		return map[string]interface{}{}, errBTMConfiguredValue1341
+	}
+	errBTMConfiguredValue1341 = json.Unmarshal([]byte(serializedBTMConfiguredValue1341), &toSerialize)
+	if errBTMConfiguredValue1341 != nil {
+		return map[string]interface{}{}, errBTMConfiguredValue1341
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -269,3 +278,5 @@ func (v *NullableBTMConfiguredValueByEnum1923) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_database_parameter_2229.go b/onshape/model_btm_database_parameter_2229.go
index 96768caa0..16a7dfe33 100644
--- a/onshape/model_btm_database_parameter_2229.go
+++ b/onshape/model_btm_database_parameter_2229.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTMDatabaseParameter2229{}
 
 // BTMDatabaseParameter2229 struct for BTMDatabaseParameter2229
 type BTMDatabaseParameter2229 struct {
+	BTMParameter-1
 	// Type of JSON object.
-	BtType     *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	DatabaseId *string `json:"databaseId,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTMDatabaseParameter2229) SetDatabaseId(v string) {
 }
 
 func (o BTMDatabaseParameter2229) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMDatabaseParameter2229) MarshalJSON() ([]byte, error) {
 
 func (o BTMDatabaseParameter2229) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMDatabaseParameter2229) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_enum_option_592.go b/onshape/model_btm_enum_option_592.go
index 23af9eb59..1e8441053 100644
--- a/onshape/model_btm_enum_option_592.go
+++ b/onshape/model_btm_enum_option_592.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTMEnumOption592{}
 
 // BTMEnumOption592 struct for BTMEnumOption592
 type BTMEnumOption592 struct {
+	BTMNode-19
 	// Type of JSON object.
-	BtType     *string `json:"btType,omitempty"`
-	Option     *string `json:"option,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Option *string `json:"option,omitempty"`
 	OptionName *string `json:"optionName,omitempty"`
 }
 
@@ -140,7 +141,7 @@ func (o *BTMEnumOption592) SetOptionName(v string) {
 }
 
 func (o BTMEnumOption592) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTMEnumOption592) MarshalJSON() ([]byte, error) {
 
 func (o BTMEnumOption592) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMNode19, errBTMNode19 := json.Marshal(o.BTMNode19)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
+	errBTMNode19 = json.Unmarshal([]byte(serializedBTMNode19), &toSerialize)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTMEnumOption592) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_feature_invalid_1031.go b/onshape/model_btm_feature_invalid_1031.go
index e41bfa2ee..4cd9e8731 100644
--- a/onshape/model_btm_feature_invalid_1031.go
+++ b/onshape/model_btm_feature_invalid_1031.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMFeatureInvalid1031{}
 
 // BTMFeatureInvalid1031 struct for BTMFeatureInvalid1031
 type BTMFeatureInvalid1031 struct {
+	BTMFeature-134
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMFeatureInvalid1031) SetBtType(v string) {
 }
 
 func (o BTMFeatureInvalid1031) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMFeatureInvalid1031) MarshalJSON() ([]byte, error) {
 
 func (o BTMFeatureInvalid1031) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMFeature134, errBTMFeature134 := json.Marshal(o.BTMFeature134)
+	if errBTMFeature134 != nil {
+		return map[string]interface{}{}, errBTMFeature134
+	}
+	errBTMFeature134 = json.Unmarshal([]byte(serializedBTMFeature134), &toSerialize)
+	if errBTMFeature134 != nil {
+		return map[string]interface{}{}, errBTMFeature134
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMFeatureInvalid1031) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_feature_query_with_occurrence_157.go b/onshape/model_btm_feature_query_with_occurrence_157.go
index 793e4d49e..c1c94b52a 100644
--- a/onshape/model_btm_feature_query_with_occurrence_157.go
+++ b/onshape/model_btm_feature_query_with_occurrence_157.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTMFeatureQueryWithOccurrence157{}
 
 // BTMFeatureQueryWithOccurrence157 struct for BTMFeatureQueryWithOccurrence157
 type BTMFeatureQueryWithOccurrence157 struct {
+	BTMIndividualQueryWithOccurrenceBase-904
 	// Type of JSON object.
-	BtType                       *string `json:"btType,omitempty"`
-	FeatureId                    *string `json:"featureId,omitempty"`
-	FeatureIdWithOccurrence      *string `json:"featureIdWithOccurrence,omitempty"`
-	PartStudioMateConnectorQuery *bool   `json:"partStudioMateConnectorQuery,omitempty"`
-	QueryData                    *string `json:"queryData,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	FeatureId *string `json:"featureId,omitempty"`
+	FeatureIdWithOccurrence *string `json:"featureIdWithOccurrence,omitempty"`
+	PartStudioMateConnectorQuery *bool `json:"partStudioMateConnectorQuery,omitempty"`
+	QueryData *string `json:"queryData,omitempty"`
 }
 
 // NewBTMFeatureQueryWithOccurrence157 instantiates a new BTMFeatureQueryWithOccurrence157 object
@@ -206,7 +207,7 @@ func (o *BTMFeatureQueryWithOccurrence157) SetQueryData(v string) {
 }
 
 func (o BTMFeatureQueryWithOccurrence157) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTMFeatureQueryWithOccurrence157) MarshalJSON() ([]byte, error) {
 
 func (o BTMFeatureQueryWithOccurrence157) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMIndividualQueryWithOccurrenceBase904, errBTMIndividualQueryWithOccurrenceBase904 := json.Marshal(o.BTMIndividualQueryWithOccurrenceBase904)
+	if errBTMIndividualQueryWithOccurrenceBase904 != nil {
+		return map[string]interface{}{}, errBTMIndividualQueryWithOccurrenceBase904
+	}
+	errBTMIndividualQueryWithOccurrenceBase904 = json.Unmarshal([]byte(serializedBTMIndividualQueryWithOccurrenceBase904), &toSerialize)
+	if errBTMIndividualQueryWithOccurrenceBase904 != nil {
+		return map[string]interface{}{}, errBTMIndividualQueryWithOccurrenceBase904
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTMFeatureQueryWithOccurrence157) UnmarshalJSON(src []byte) err
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_folder_3208.go b/onshape/model_btm_folder_3208.go
index 18247af05..8d9e9b8ba 100644
--- a/onshape/model_btm_folder_3208.go
+++ b/onshape/model_btm_folder_3208.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTMFolder3208{}
 
 // BTMFolder3208 struct for BTMFolder3208
 type BTMFolder3208 struct {
+	BTMNode-19
 	// Type of JSON object.
-	BtType        *string `json:"btType,omitempty"`
-	FolderId      *string `json:"folderId,omitempty"`
-	IsStartFolder *bool   `json:"isStartFolder,omitempty"`
-	Name          *string `json:"name,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	FolderId *string `json:"folderId,omitempty"`
+	IsStartFolder *bool `json:"isStartFolder,omitempty"`
+	Name *string `json:"name,omitempty"`
 }
 
 // NewBTMFolder3208 instantiates a new BTMFolder3208 object
@@ -173,7 +174,7 @@ func (o *BTMFolder3208) SetName(v string) {
 }
 
 func (o BTMFolder3208) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTMFolder3208) MarshalJSON() ([]byte, error) {
 
 func (o BTMFolder3208) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMNode19, errBTMNode19 := json.Marshal(o.BTMNode19)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
+	errBTMNode19 = json.Unmarshal([]byte(serializedBTMNode19), &toSerialize)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTMFolder3208) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_generative_design_feature_3195.go b/onshape/model_btm_generative_design_feature_3195.go
index 4a38439db..318a8cae1 100644
--- a/onshape/model_btm_generative_design_feature_3195.go
+++ b/onshape/model_btm_generative_design_feature_3195.go
@@ -20,14 +20,15 @@ var _ MappedNullable = &BTMGenerativeDesignFeature3195{}
 
 // BTMGenerativeDesignFeature3195 struct for BTMGenerativeDesignFeature3195
 type BTMGenerativeDesignFeature3195 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
-	BtType                      *string                       `json:"btType,omitempty"`
-	AdditiveSupportsOccurrences []BTOccurrence74              `json:"additiveSupportsOccurrences,omitempty"`
-	DraftOccurrences            []BTOccurrence74              `json:"draftOccurrences,omitempty"`
-	ExtrusionOccurrences        []BTOccurrence74              `json:"extrusionOccurrences,omitempty"`
-	JsonRecipe                  *BTMParameterReferenceJSON790 `json:"jsonRecipe,omitempty"`
-	MillingOccurrences          []BTOccurrence74              `json:"millingOccurrences,omitempty"`
-	Occurrences                 []BTOccurrence74              `json:"occurrences,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	AdditiveSupportsOccurrences []BTOccurrence74 `json:"additiveSupportsOccurrences,omitempty"`
+	DraftOccurrences []BTOccurrence74 `json:"draftOccurrences,omitempty"`
+	ExtrusionOccurrences []BTOccurrence74 `json:"extrusionOccurrences,omitempty"`
+	JsonRecipe *BTMParameterReferenceJSON790 `json:"jsonRecipe,omitempty"`
+	MillingOccurrences []BTOccurrence74 `json:"millingOccurrences,omitempty"`
+	Occurrences []BTOccurrence74 `json:"occurrences,omitempty"`
 }
 
 // NewBTMGenerativeDesignFeature3195 instantiates a new BTMGenerativeDesignFeature3195 object
@@ -272,7 +273,7 @@ func (o *BTMGenerativeDesignFeature3195) SetOccurrences(v []BTOccurrence74) {
 }
 
 func (o BTMGenerativeDesignFeature3195) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -281,6 +282,14 @@ func (o BTMGenerativeDesignFeature3195) MarshalJSON() ([]byte, error) {
 
 func (o BTMGenerativeDesignFeature3195) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -340,3 +349,5 @@ func (v *NullableBTMGenerativeDesignFeature3195) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_geometry_mate_1260.go b/onshape/model_btm_geometry_mate_1260.go
index 2eb9e6fff..269372720 100644
--- a/onshape/model_btm_geometry_mate_1260.go
+++ b/onshape/model_btm_geometry_mate_1260.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMGeometryMate1260{}
 
 // BTMGeometryMate1260 struct for BTMGeometryMate1260
 type BTMGeometryMate1260 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMGeometryMate1260) SetBtType(v string) {
 }
 
 func (o BTMGeometryMate1260) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMGeometryMate1260) MarshalJSON() ([]byte, error) {
 
 func (o BTMGeometryMate1260) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMGeometryMate1260) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_individual_co_edge_query_1332.go b/onshape/model_btm_individual_co_edge_query_1332.go
index 1a777f8b3..88e9f505e 100644
--- a/onshape/model_btm_individual_co_edge_query_1332.go
+++ b/onshape/model_btm_individual_co_edge_query_1332.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTMIndividualCoEdgeQuery1332{}
 
 // BTMIndividualCoEdgeQuery1332 struct for BTMIndividualCoEdgeQuery1332
 type BTMIndividualCoEdgeQuery1332 struct {
+	BTMIndividualQuery-138
 	// Type of JSON object.
-	BtType    *string                `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	EdgeQuery *BTMIndividualQuery138 `json:"edgeQuery,omitempty"`
 	FaceQuery *BTMIndividualQuery138 `json:"faceQuery,omitempty"`
 }
@@ -140,7 +141,7 @@ func (o *BTMIndividualCoEdgeQuery1332) SetFaceQuery(v BTMIndividualQuery138) {
 }
 
 func (o BTMIndividualCoEdgeQuery1332) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTMIndividualCoEdgeQuery1332) MarshalJSON() ([]byte, error) {
 
 func (o BTMIndividualCoEdgeQuery1332) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMIndividualQuery138, errBTMIndividualQuery138 := json.Marshal(o.BTMIndividualQuery138)
+	if errBTMIndividualQuery138 != nil {
+		return map[string]interface{}{}, errBTMIndividualQuery138
+	}
+	errBTMIndividualQuery138 = json.Unmarshal([]byte(serializedBTMIndividualQuery138), &toSerialize)
+	if errBTMIndividualQuery138 != nil {
+		return map[string]interface{}{}, errBTMIndividualQuery138
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTMIndividualCoEdgeQuery1332) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_individual_created_by_query_137.go b/onshape/model_btm_individual_created_by_query_137.go
index 43656580e..653e8628e 100644
--- a/onshape/model_btm_individual_created_by_query_137.go
+++ b/onshape/model_btm_individual_created_by_query_137.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTMIndividualCreatedByQuery137{}
 
 // BTMIndividualCreatedByQuery137 struct for BTMIndividualCreatedByQuery137
 type BTMIndividualCreatedByQuery137 struct {
+	BTMIndividualQuery-138
 	// Type of JSON object.
-	BtType             *string        `json:"btType,omitempty"`
-	BodyType           *GBTBodyType   `json:"bodyType,omitempty"`
-	EntityType         *GBTEntityType `json:"entityType,omitempty"`
-	FeatureId          *string        `json:"featureId,omitempty"`
-	FilterConstruction *bool          `json:"filterConstruction,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	BodyType *GBTBodyType `json:"bodyType,omitempty"`
+	EntityType *GBTEntityType `json:"entityType,omitempty"`
+	FeatureId *string `json:"featureId,omitempty"`
+	FilterConstruction *bool `json:"filterConstruction,omitempty"`
 }
 
 // NewBTMIndividualCreatedByQuery137 instantiates a new BTMIndividualCreatedByQuery137 object
@@ -206,7 +207,7 @@ func (o *BTMIndividualCreatedByQuery137) SetFilterConstruction(v bool) {
 }
 
 func (o BTMIndividualCreatedByQuery137) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTMIndividualCreatedByQuery137) MarshalJSON() ([]byte, error) {
 
 func (o BTMIndividualCreatedByQuery137) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMIndividualQuery138, errBTMIndividualQuery138 := json.Marshal(o.BTMIndividualQuery138)
+	if errBTMIndividualQuery138 != nil {
+		return map[string]interface{}{}, errBTMIndividualQuery138
+	}
+	errBTMIndividualQuery138 = json.Unmarshal([]byte(serializedBTMIndividualQuery138), &toSerialize)
+	if errBTMIndividualQuery138 != nil {
+		return map[string]interface{}{}, errBTMIndividualQuery138
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTMIndividualCreatedByQuery137) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_individual_occurrence_query_626.go b/onshape/model_btm_individual_occurrence_query_626.go
index e9dd6669a..6850ebe15 100644
--- a/onshape/model_btm_individual_occurrence_query_626.go
+++ b/onshape/model_btm_individual_occurrence_query_626.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMIndividualOccurrenceQuery626{}
 
 // BTMIndividualOccurrenceQuery626 struct for BTMIndividualOccurrenceQuery626
 type BTMIndividualOccurrenceQuery626 struct {
+	BTMIndividualQueryWithOccurrenceBase-904
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMIndividualOccurrenceQuery626) SetBtType(v string) {
 }
 
 func (o BTMIndividualOccurrenceQuery626) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMIndividualOccurrenceQuery626) MarshalJSON() ([]byte, error) {
 
 func (o BTMIndividualOccurrenceQuery626) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMIndividualQueryWithOccurrenceBase904, errBTMIndividualQueryWithOccurrenceBase904 := json.Marshal(o.BTMIndividualQueryWithOccurrenceBase904)
+	if errBTMIndividualQueryWithOccurrenceBase904 != nil {
+		return map[string]interface{}{}, errBTMIndividualQueryWithOccurrenceBase904
+	}
+	errBTMIndividualQueryWithOccurrenceBase904 = json.Unmarshal([]byte(serializedBTMIndividualQueryWithOccurrenceBase904), &toSerialize)
+	if errBTMIndividualQueryWithOccurrenceBase904 != nil {
+		return map[string]interface{}{}, errBTMIndividualQueryWithOccurrenceBase904
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMIndividualOccurrenceQuery626) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_individual_query_138.go b/onshape/model_btm_individual_query_138.go
index dbe3d988d..84dd20a2f 100644
--- a/onshape/model_btm_individual_query_138.go
+++ b/onshape/model_btm_individual_query_138.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTMIndividualQuery138{}
 
 // BTMIndividualQuery138 struct for BTMIndividualQuery138
 type BTMIndividualQuery138 struct {
+	BTMIndividualQueryBase-139
 	// Type of JSON object.
-	BtType          *string                `json:"btType,omitempty"`
-	PersistentQuery *BTPStatement269       `json:"persistentQuery,omitempty"`
-	QueryStatement  *BTPStatement269       `json:"queryStatement,omitempty"`
-	VariableName    *BTMIndividualQuery138 `json:"variableName,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	PersistentQuery *BTPStatement269 `json:"persistentQuery,omitempty"`
+	QueryStatement *BTPStatement269 `json:"queryStatement,omitempty"`
+	VariableName *BTMIndividualQuery138 `json:"variableName,omitempty"`
 }
 
 // NewBTMIndividualQuery138 instantiates a new BTMIndividualQuery138 object
@@ -173,7 +174,7 @@ func (o *BTMIndividualQuery138) SetVariableName(v BTMIndividualQuery138) {
 }
 
 func (o BTMIndividualQuery138) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTMIndividualQuery138) MarshalJSON() ([]byte, error) {
 
 func (o BTMIndividualQuery138) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMIndividualQueryBase139, errBTMIndividualQueryBase139 := json.Marshal(o.BTMIndividualQueryBase139)
+	if errBTMIndividualQueryBase139 != nil {
+		return map[string]interface{}{}, errBTMIndividualQueryBase139
+	}
+	errBTMIndividualQueryBase139 = json.Unmarshal([]byte(serializedBTMIndividualQueryBase139), &toSerialize)
+	if errBTMIndividualQueryBase139 != nil {
+		return map[string]interface{}{}, errBTMIndividualQueryBase139
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTMIndividualQuery138) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_individual_query_with_occurrence_811.go b/onshape/model_btm_individual_query_with_occurrence_811.go
index 5dc856039..a512e6f9a 100644
--- a/onshape/model_btm_individual_query_with_occurrence_811.go
+++ b/onshape/model_btm_individual_query_with_occurrence_811.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTMIndividualQueryWithOccurrence811{}
 
 // BTMIndividualQueryWithOccurrence811 struct for BTMIndividualQueryWithOccurrence811
 type BTMIndividualQueryWithOccurrence811 struct {
+	BTMIndividualQueryWithOccurrenceBase-904
 	// Type of JSON object.
-	BtType      *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	EntityQuery *string `json:"entityQuery,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTMIndividualQueryWithOccurrence811) SetEntityQuery(v string) {
 }
 
 func (o BTMIndividualQueryWithOccurrence811) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMIndividualQueryWithOccurrence811) MarshalJSON() ([]byte, error) {
 
 func (o BTMIndividualQueryWithOccurrence811) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMIndividualQueryWithOccurrenceBase904, errBTMIndividualQueryWithOccurrenceBase904 := json.Marshal(o.BTMIndividualQueryWithOccurrenceBase904)
+	if errBTMIndividualQueryWithOccurrenceBase904 != nil {
+		return map[string]interface{}{}, errBTMIndividualQueryWithOccurrenceBase904
+	}
+	errBTMIndividualQueryWithOccurrenceBase904 = json.Unmarshal([]byte(serializedBTMIndividualQueryWithOccurrenceBase904), &toSerialize)
+	if errBTMIndividualQueryWithOccurrenceBase904 != nil {
+		return map[string]interface{}{}, errBTMIndividualQueryWithOccurrenceBase904
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMIndividualQueryWithOccurrence811) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_individual_sketch_region_query_140.go b/onshape/model_btm_individual_sketch_region_query_140.go
index ba1628cf7..7a9cbe392 100644
--- a/onshape/model_btm_individual_sketch_region_query_140.go
+++ b/onshape/model_btm_individual_sketch_region_query_140.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTMIndividualSketchRegionQuery140{}
 
 // BTMIndividualSketchRegionQuery140 struct for BTMIndividualSketchRegionQuery140
 type BTMIndividualSketchRegionQuery140 struct {
+	BTMIndividualQuery-138
 	// Type of JSON object.
-	BtType           *string `json:"btType,omitempty"`
-	FeatureId        *string `json:"featureId,omitempty"`
-	FilterInnerLoops *bool   `json:"filterInnerLoops,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	FeatureId *string `json:"featureId,omitempty"`
+	FilterInnerLoops *bool `json:"filterInnerLoops,omitempty"`
 }
 
 // NewBTMIndividualSketchRegionQuery140 instantiates a new BTMIndividualSketchRegionQuery140 object
@@ -140,7 +141,7 @@ func (o *BTMIndividualSketchRegionQuery140) SetFilterInnerLoops(v bool) {
 }
 
 func (o BTMIndividualSketchRegionQuery140) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTMIndividualSketchRegionQuery140) MarshalJSON() ([]byte, error) {
 
 func (o BTMIndividualSketchRegionQuery140) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMIndividualQuery138, errBTMIndividualQuery138 := json.Marshal(o.BTMIndividualQuery138)
+	if errBTMIndividualQuery138 != nil {
+		return map[string]interface{}{}, errBTMIndividualQuery138
+	}
+	errBTMIndividualQuery138 = json.Unmarshal([]byte(serializedBTMIndividualQuery138), &toSerialize)
+	if errBTMIndividualQuery138 != nil {
+		return map[string]interface{}{}, errBTMIndividualQuery138
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTMIndividualSketchRegionQuery140) UnmarshalJSON(src []byte) er
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_individual_sketch_unique_vertices_query_1472.go b/onshape/model_btm_individual_sketch_unique_vertices_query_1472.go
index a4e35ca03..97bf00dc1 100644
--- a/onshape/model_btm_individual_sketch_unique_vertices_query_1472.go
+++ b/onshape/model_btm_individual_sketch_unique_vertices_query_1472.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTMIndividualSketchUniqueVerticesQuery1472{}
 
 // BTMIndividualSketchUniqueVerticesQuery1472 struct for BTMIndividualSketchUniqueVerticesQuery1472
 type BTMIndividualSketchUniqueVerticesQuery1472 struct {
+	BTMIndividualQuery-138
 	// Type of JSON object.
-	BtType    *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	FeatureId *string `json:"featureId,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTMIndividualSketchUniqueVerticesQuery1472) SetFeatureId(v string) {
 }
 
 func (o BTMIndividualSketchUniqueVerticesQuery1472) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMIndividualSketchUniqueVerticesQuery1472) MarshalJSON() ([]byte, error
 
 func (o BTMIndividualSketchUniqueVerticesQuery1472) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMIndividualQuery138, errBTMIndividualQuery138 := json.Marshal(o.BTMIndividualQuery138)
+	if errBTMIndividualQuery138 != nil {
+		return map[string]interface{}{}, errBTMIndividualQuery138
+	}
+	errBTMIndividualQuery138 = json.Unmarshal([]byte(serializedBTMIndividualQuery138), &toSerialize)
+	if errBTMIndividualQuery138 != nil {
+		return map[string]interface{}{}, errBTMIndividualQuery138
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMIndividualSketchUniqueVerticesQuery1472) UnmarshalJSON(src [
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_inference_query_with_occurrence_1083.go b/onshape/model_btm_inference_query_with_occurrence_1083.go
index ef963c48a..fa5e93542 100644
--- a/onshape/model_btm_inference_query_with_occurrence_1083.go
+++ b/onshape/model_btm_inference_query_with_occurrence_1083.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTMInferenceQueryWithOccurrence1083{}
 
 // BTMInferenceQueryWithOccurrence1083 struct for BTMInferenceQueryWithOccurrence1083
 type BTMInferenceQueryWithOccurrence1083 struct {
+	BTMIndividualQueryWithOccurrence-811
 	// Type of JSON object.
-	BtType                *string                 `json:"btType,omitempty"`
-	InferenceType         *GBTEntityInferenceType `json:"inferenceType,omitempty"`
-	SecondDeterministicId *string                 `json:"secondDeterministicId,omitempty"`
-	SecondEntityQuery     *string                 `json:"secondEntityQuery,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	InferenceType *GBTEntityInferenceType `json:"inferenceType,omitempty"`
+	SecondDeterministicId *string `json:"secondDeterministicId,omitempty"`
+	SecondEntityQuery *string `json:"secondEntityQuery,omitempty"`
 }
 
 // NewBTMInferenceQueryWithOccurrence1083 instantiates a new BTMInferenceQueryWithOccurrence1083 object
@@ -173,7 +174,7 @@ func (o *BTMInferenceQueryWithOccurrence1083) SetSecondEntityQuery(v string) {
 }
 
 func (o BTMInferenceQueryWithOccurrence1083) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTMInferenceQueryWithOccurrence1083) MarshalJSON() ([]byte, error) {
 
 func (o BTMInferenceQueryWithOccurrence1083) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMIndividualQueryWithOccurrence811, errBTMIndividualQueryWithOccurrence811 := json.Marshal(o.BTMIndividualQueryWithOccurrence811)
+	if errBTMIndividualQueryWithOccurrence811 != nil {
+		return map[string]interface{}{}, errBTMIndividualQueryWithOccurrence811
+	}
+	errBTMIndividualQueryWithOccurrence811 = json.Unmarshal([]byte(serializedBTMIndividualQueryWithOccurrence811), &toSerialize)
+	if errBTMIndividualQueryWithOccurrence811 != nil {
+		return map[string]interface{}{}, errBTMIndividualQueryWithOccurrence811
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTMInferenceQueryWithOccurrence1083) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_load_3538.go b/onshape/model_btm_load_3538.go
index e96bc6398..924560d8d 100644
--- a/onshape/model_btm_load_3538.go
+++ b/onshape/model_btm_load_3538.go
@@ -20,18 +20,19 @@ var _ MappedNullable = &BTMLoad3538{}
 
 // BTMLoad3538 struct for BTMLoad3538
 type BTMLoad3538 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
-	BtType                    *string            `json:"btType,omitempty"`
-	DefinedByComponents       *bool              `json:"definedByComponents,omitempty"`
-	DirectionFlipped          *bool              `json:"directionFlipped,omitempty"`
-	FgsBaseUnits              *string            `json:"fgsBaseUnits,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	DefinedByComponents *bool `json:"definedByComponents,omitempty"`
+	DirectionFlipped *bool `json:"directionFlipped,omitempty"`
+	FgsBaseUnits *string `json:"fgsBaseUnits,omitempty"`
 	LoadComponentParameterIds *map[string]string `json:"loadComponentParameterIds,omitempty"`
-	LoadRegionParameterId     *string            `json:"loadRegionParameterId,omitempty"`
-	LoadType                  *GBTLoadType       `json:"loadType,omitempty"`
-	MagnitudeParameterId      *string            `json:"magnitudeParameterId,omitempty"`
-	MagnitudeQuantityType     *GBTQuantityType   `json:"magnitudeQuantityType,omitempty"`
-	StructuralLoad            *bool              `json:"structuralLoad,omitempty"`
-	SuppressedInSimulations   *map[string]int32  `json:"suppressedInSimulations,omitempty"`
+	LoadRegionParameterId *string `json:"loadRegionParameterId,omitempty"`
+	LoadType *GBTLoadType `json:"loadType,omitempty"`
+	MagnitudeParameterId *string `json:"magnitudeParameterId,omitempty"`
+	MagnitudeQuantityType *GBTQuantityType `json:"magnitudeQuantityType,omitempty"`
+	StructuralLoad *bool `json:"structuralLoad,omitempty"`
+	SuppressedInSimulations *map[string]int32 `json:"suppressedInSimulations,omitempty"`
 }
 
 // NewBTMLoad3538 instantiates a new BTMLoad3538 object
@@ -404,7 +405,7 @@ func (o *BTMLoad3538) SetSuppressedInSimulations(v map[string]int32) {
 }
 
 func (o BTMLoad3538) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -413,6 +414,14 @@ func (o BTMLoad3538) MarshalJSON() ([]byte, error) {
 
 func (o BTMLoad3538) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -484,3 +493,5 @@ func (v *NullableBTMLoad3538) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_mate_64.go b/onshape/model_btm_mate_64.go
index b62a5a997..2e6fddea2 100644
--- a/onshape/model_btm_mate_64.go
+++ b/onshape/model_btm_mate_64.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTMMate64{}
 
 // BTMMate64 struct for BTMMate64
 type BTMMate64 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
-	BtType                 *string                                `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	MateConnectorQueryList *BTMParameterQueryWithOccurrenceList67 `json:"mateConnectorQueryList,omitempty"`
-	MateConnectors         []BTMMateConnector66                   `json:"mateConnectors,omitempty"`
-	MateType               *GBTMateType                           `json:"mateType,omitempty"`
+	MateConnectors []BTMMateConnector66 `json:"mateConnectors,omitempty"`
+	MateType *GBTMateType `json:"mateType,omitempty"`
 }
 
 // NewBTMMate64 instantiates a new BTMMate64 object
@@ -173,7 +174,7 @@ func (o *BTMMate64) SetMateType(v GBTMateType) {
 }
 
 func (o BTMMate64) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTMMate64) MarshalJSON() ([]byte, error) {
 
 func (o BTMMate64) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTMMate64) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_mate_connector_66.go b/onshape/model_btm_mate_connector_66.go
index 7922a48fb..57d1a3f5a 100644
--- a/onshape/model_btm_mate_connector_66.go
+++ b/onshape/model_btm_mate_connector_66.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTMMateConnector66{}
 
 // BTMMateConnector66 struct for BTMMateConnector66
 type BTMMateConnector66 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
-	BtType                       *string `json:"btType,omitempty"`
-	Implicit                     *bool   `json:"implicit,omitempty"`
-	IsAuxiliaryTreeMateConnector *bool   `json:"isAuxiliaryTreeMateConnector,omitempty"`
-	IsHidden                     *bool   `json:"isHidden,omitempty"`
-	SavedFeatureType             *string `json:"savedFeatureType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Implicit *bool `json:"implicit,omitempty"`
+	IsAuxiliaryTreeMateConnector *bool `json:"isAuxiliaryTreeMateConnector,omitempty"`
+	IsHidden *bool `json:"isHidden,omitempty"`
+	SavedFeatureType *string `json:"savedFeatureType,omitempty"`
 }
 
 // NewBTMMateConnector66 instantiates a new BTMMateConnector66 object
@@ -206,7 +207,7 @@ func (o *BTMMateConnector66) SetSavedFeatureType(v string) {
 }
 
 func (o BTMMateConnector66) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTMMateConnector66) MarshalJSON() ([]byte, error) {
 
 func (o BTMMateConnector66) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTMMateConnector66) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_mate_group_65.go b/onshape/model_btm_mate_group_65.go
index f7f6d9beb..5a507a5d7 100644
--- a/onshape/model_btm_mate_group_65.go
+++ b/onshape/model_btm_mate_group_65.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMMateGroup65{}
 
 // BTMMateGroup65 struct for BTMMateGroup65
 type BTMMateGroup65 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMMateGroup65) SetBtType(v string) {
 }
 
 func (o BTMMateGroup65) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMMateGroup65) MarshalJSON() ([]byte, error) {
 
 func (o BTMMateGroup65) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMMateGroup65) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_mate_relation_1412.go b/onshape/model_btm_mate_relation_1412.go
index f22223a65..ae15d058f 100644
--- a/onshape/model_btm_mate_relation_1412.go
+++ b/onshape/model_btm_mate_relation_1412.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMMateRelation1412{}
 
 // BTMMateRelation1412 struct for BTMMateRelation1412
 type BTMMateRelation1412 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMMateRelation1412) SetBtType(v string) {
 }
 
 func (o BTMMateRelation1412) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMMateRelation1412) MarshalJSON() ([]byte, error) {
 
 func (o BTMMateRelation1412) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMMateRelation1412) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_mesh_point_query_1183.go b/onshape/model_btm_mesh_point_query_1183.go
index 7ed93be7a..1f53db86c 100644
--- a/onshape/model_btm_mesh_point_query_1183.go
+++ b/onshape/model_btm_mesh_point_query_1183.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTMMeshPointQuery1183{}
 
 // BTMMeshPointQuery1183 struct for BTMMeshPointQuery1183
 type BTMMeshPointQuery1183 struct {
+	BTMIndividualQueryWithOccurrenceBase-904
 	// Type of JSON object.
-	BtType *string        `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Origin *BTVector3d389 `json:"origin,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTMMeshPointQuery1183) SetOrigin(v BTVector3d389) {
 }
 
 func (o BTMMeshPointQuery1183) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMMeshPointQuery1183) MarshalJSON() ([]byte, error) {
 
 func (o BTMMeshPointQuery1183) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMIndividualQueryWithOccurrenceBase904, errBTMIndividualQueryWithOccurrenceBase904 := json.Marshal(o.BTMIndividualQueryWithOccurrenceBase904)
+	if errBTMIndividualQueryWithOccurrenceBase904 != nil {
+		return map[string]interface{}{}, errBTMIndividualQueryWithOccurrenceBase904
+	}
+	errBTMIndividualQueryWithOccurrenceBase904 = json.Unmarshal([]byte(serializedBTMIndividualQueryWithOccurrenceBase904), &toSerialize)
+	if errBTMIndividualQueryWithOccurrenceBase904 != nil {
+		return map[string]interface{}{}, errBTMIndividualQueryWithOccurrenceBase904
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMMeshPointQuery1183) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_node_invalid_1772.go b/onshape/model_btm_node_invalid_1772.go
index 4294d7ad4..c4a29b4c2 100644
--- a/onshape/model_btm_node_invalid_1772.go
+++ b/onshape/model_btm_node_invalid_1772.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMNodeInvalid1772{}
 
 // BTMNodeInvalid1772 struct for BTMNodeInvalid1772
 type BTMNodeInvalid1772 struct {
+	BTMNode-19
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMNodeInvalid1772) SetBtType(v string) {
 }
 
 func (o BTMNodeInvalid1772) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMNodeInvalid1772) MarshalJSON() ([]byte, error) {
 
 func (o BTMNodeInvalid1772) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMNode19, errBTMNode19 := json.Marshal(o.BTMNode19)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
+	errBTMNode19 = json.Unmarshal([]byte(serializedBTMNode19), &toSerialize)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMNodeInvalid1772) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_non_geometric_item_1864.go b/onshape/model_btm_non_geometric_item_1864.go
index 64e957603..0cff5888d 100644
--- a/onshape/model_btm_non_geometric_item_1864.go
+++ b/onshape/model_btm_non_geometric_item_1864.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTMNonGeometricItem1864{}
 
 // BTMNonGeometricItem1864 struct for BTMNonGeometricItem1864
 type BTMNonGeometricItem1864 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
-	BtType           *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	ItemDefinitionId *string `json:"itemDefinitionId,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTMNonGeometricItem1864) SetItemDefinitionId(v string) {
 }
 
 func (o BTMNonGeometricItem1864) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMNonGeometricItem1864) MarshalJSON() ([]byte, error) {
 
 func (o BTMNonGeometricItem1864) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMNonGeometricItem1864) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_appearance_627.go b/onshape/model_btm_parameter_appearance_627.go
index 3ea822a9a..cef320ba5 100644
--- a/onshape/model_btm_parameter_appearance_627.go
+++ b/onshape/model_btm_parameter_appearance_627.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTMParameterAppearance627{}
 
 // BTMParameterAppearance627 struct for BTMParameterAppearance627
 type BTMParameterAppearance627 struct {
+	BTMParameter-1
 	// Type of JSON object.
-	BtType     *string                   `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Appearance *BTGraphicsAppearance1152 `json:"appearance,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTMParameterAppearance627) SetAppearance(v BTGraphicsAppearance1152) {
 }
 
 func (o BTMParameterAppearance627) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMParameterAppearance627) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterAppearance627) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMParameterAppearance627) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_array_2025.go b/onshape/model_btm_parameter_array_2025.go
index f21e3a87a..646ebb7a4 100644
--- a/onshape/model_btm_parameter_array_2025.go
+++ b/onshape/model_btm_parameter_array_2025.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTMParameterArray2025{}
 
 // BTMParameterArray2025 struct for BTMParameterArray2025
 type BTMParameterArray2025 struct {
+	BTMParameter-1
 	// Type of JSON object.
-	BtType *string                     `json:"btType,omitempty"`
-	Items  []BTMArrayParameterItem1843 `json:"items,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Items []BTMArrayParameterItem1843 `json:"items,omitempty"`
 }
 
 // NewBTMParameterArray2025 instantiates a new BTMParameterArray2025 object
@@ -107,7 +108,7 @@ func (o *BTMParameterArray2025) SetItems(v []BTMArrayParameterItem1843) {
 }
 
 func (o BTMParameterArray2025) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMParameterArray2025) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterArray2025) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMParameterArray2025) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_blob_reference_1679.go b/onshape/model_btm_parameter_blob_reference_1679.go
index 4546f6fe6..51362c707 100644
--- a/onshape/model_btm_parameter_blob_reference_1679.go
+++ b/onshape/model_btm_parameter_blob_reference_1679.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTMParameterBlobReference1679{}
 
 // BTMParameterBlobReference1679 struct for BTMParameterBlobReference1679
 type BTMParameterBlobReference1679 struct {
+	BTMParameter-1
 	// Type of JSON object.
-	BtType     *string       `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	BlobImport *BTMImport136 `json:"blobImport,omitempty"`
 	// Element microversion that is being imported.
 	ImportMicroversion *string `json:"importMicroversion,omitempty"`
-	Namespace          *string `json:"namespace,omitempty"`
+	Namespace *string `json:"namespace,omitempty"`
 }
 
 // NewBTMParameterBlobReference1679 instantiates a new BTMParameterBlobReference1679 object
@@ -174,7 +175,7 @@ func (o *BTMParameterBlobReference1679) SetNamespace(v string) {
 }
 
 func (o BTMParameterBlobReference1679) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -183,6 +184,14 @@ func (o BTMParameterBlobReference1679) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterBlobReference1679) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -233,3 +242,5 @@ func (v *NullableBTMParameterBlobReference1679) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_boolean_144.go b/onshape/model_btm_parameter_boolean_144.go
index 13f4b60a9..6546c149a 100644
--- a/onshape/model_btm_parameter_boolean_144.go
+++ b/onshape/model_btm_parameter_boolean_144.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTMParameterBoolean144{}
 
 // BTMParameterBoolean144 struct for BTMParameterBoolean144
 type BTMParameterBoolean144 struct {
+	BTMParameter-1
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
-	Value  *bool   `json:"value,omitempty"`
+	Value *bool `json:"value,omitempty"`
 }
 
 // NewBTMParameterBoolean144 instantiates a new BTMParameterBoolean144 object
@@ -107,7 +108,7 @@ func (o *BTMParameterBoolean144) SetValue(v bool) {
 }
 
 func (o BTMParameterBoolean144) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMParameterBoolean144) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterBoolean144) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMParameterBoolean144) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_configured_2222.go b/onshape/model_btm_parameter_configured_2222.go
index fa590e1f7..0faa17599 100644
--- a/onshape/model_btm_parameter_configured_2222.go
+++ b/onshape/model_btm_parameter_configured_2222.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTMParameterConfigured2222{}
 
 // BTMParameterConfigured2222 struct for BTMParameterConfigured2222
 type BTMParameterConfigured2222 struct {
+	BTMParameter-1
 	// Type of JSON object.
-	BtType                             *string                  `json:"btType,omitempty"`
-	ConfigurationParameterId           *string                  `json:"configurationParameterId,omitempty"`
-	ConfigurationParameterIdFieldIndex *int32                   `json:"configurationParameterIdFieldIndex,omitempty"`
-	Values                             []BTMConfiguredValue1341 `json:"values,omitempty"`
-	ValuesFieldIndex                   *int32                   `json:"valuesFieldIndex,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	ConfigurationParameterId *string `json:"configurationParameterId,omitempty"`
+	ConfigurationParameterIdFieldIndex *int32 `json:"configurationParameterIdFieldIndex,omitempty"`
+	Values []BTMConfiguredValue1341 `json:"values,omitempty"`
+	ValuesFieldIndex *int32 `json:"valuesFieldIndex,omitempty"`
 }
 
 // NewBTMParameterConfigured2222 instantiates a new BTMParameterConfigured2222 object
@@ -206,7 +207,7 @@ func (o *BTMParameterConfigured2222) SetValuesFieldIndex(v int32) {
 }
 
 func (o BTMParameterConfigured2222) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTMParameterConfigured2222) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterConfigured2222) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTMParameterConfigured2222) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_derived_864.go b/onshape/model_btm_parameter_derived_864.go
index 62bc5327e..6450b706f 100644
--- a/onshape/model_btm_parameter_derived_864.go
+++ b/onshape/model_btm_parameter_derived_864.go
@@ -20,13 +20,14 @@ var _ MappedNullable = &BTMParameterDerived864{}
 
 // BTMParameterDerived864 struct for BTMParameterDerived864
 type BTMParameterDerived864 struct {
+	BTMParameter-1
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 	// Element microversion that is being imported.
-	ImportMicroversion *string         `json:"importMicroversion,omitempty"`
-	Imports            []BTMImport136  `json:"imports,omitempty"`
-	ModuleId           *BTPModuleId235 `json:"moduleId,omitempty"`
-	Namespace          *string         `json:"namespace,omitempty"`
+	ImportMicroversion *string `json:"importMicroversion,omitempty"`
+	Imports []BTMImport136 `json:"imports,omitempty"`
+	ModuleId *BTPModuleId235 `json:"moduleId,omitempty"`
+	Namespace *string `json:"namespace,omitempty"`
 }
 
 // NewBTMParameterDerived864 instantiates a new BTMParameterDerived864 object
@@ -207,7 +208,7 @@ func (o *BTMParameterDerived864) SetNamespace(v string) {
 }
 
 func (o BTMParameterDerived864) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -216,6 +217,14 @@ func (o BTMParameterDerived864) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterDerived864) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -269,3 +278,5 @@ func (v *NullableBTMParameterDerived864) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_enum_145.go b/onshape/model_btm_parameter_enum_145.go
index e411c21e9..c69f3def0 100644
--- a/onshape/model_btm_parameter_enum_145.go
+++ b/onshape/model_btm_parameter_enum_145.go
@@ -20,13 +20,14 @@ var _ MappedNullable = &BTMParameterEnum145{}
 
 // BTMParameterEnum145 struct for BTMParameterEnum145
 type BTMParameterEnum145 struct {
+	BTMParameter-1
 	// Type of JSON object.
-	BtType   *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	EnumName *string `json:"enumName,omitempty"`
 	// Element microversion that is being imported.
 	ImportMicroversion *string `json:"importMicroversion,omitempty"`
-	Namespace          *string `json:"namespace,omitempty"`
-	Value              *string `json:"value,omitempty"`
+	Namespace *string `json:"namespace,omitempty"`
+	Value *string `json:"value,omitempty"`
 }
 
 // NewBTMParameterEnum145 instantiates a new BTMParameterEnum145 object
@@ -207,7 +208,7 @@ func (o *BTMParameterEnum145) SetValue(v string) {
 }
 
 func (o BTMParameterEnum145) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -216,6 +217,14 @@ func (o BTMParameterEnum145) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterEnum145) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -269,3 +278,5 @@ func (v *NullableBTMParameterEnum145) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_feature_list_1749.go b/onshape/model_btm_parameter_feature_list_1749.go
index 0ccd0a2bc..af107a0e0 100644
--- a/onshape/model_btm_parameter_feature_list_1749.go
+++ b/onshape/model_btm_parameter_feature_list_1749.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTMParameterFeatureList1749{}
 
 // BTMParameterFeatureList1749 struct for BTMParameterFeatureList1749
 type BTMParameterFeatureList1749 struct {
+	BTMParameter-1
 	// Type of JSON object.
-	BtType     *string  `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	FeatureIds []string `json:"featureIds,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTMParameterFeatureList1749) SetFeatureIds(v []string) {
 }
 
 func (o BTMParameterFeatureList1749) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMParameterFeatureList1749) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterFeatureList1749) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMParameterFeatureList1749) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_foreign_id_146.go b/onshape/model_btm_parameter_foreign_id_146.go
index fc1b68b81..aceb652e6 100644
--- a/onshape/model_btm_parameter_foreign_id_146.go
+++ b/onshape/model_btm_parameter_foreign_id_146.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTMParameterForeignId146{}
 
 // BTMParameterForeignId146 struct for BTMParameterForeignId146
 type BTMParameterForeignId146 struct {
+	BTMParameter-1
 	// Type of JSON object.
-	BtType       *string                    `json:"btType,omitempty"`
-	ForeignId    *string                    `json:"foreignId,omitempty"`
-	ForeignName  *string                    `json:"foreignName,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	ForeignId *string `json:"foreignId,omitempty"`
+	ForeignName *string `json:"foreignName,omitempty"`
 	LocationInfo *BTForeignDataResponse1070 `json:"locationInfo,omitempty"`
 }
 
@@ -173,7 +174,7 @@ func (o *BTMParameterForeignId146) SetLocationInfo(v BTForeignDataResponse1070)
 }
 
 func (o BTMParameterForeignId146) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTMParameterForeignId146) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterForeignId146) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTMParameterForeignId146) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_invalid_1664.go b/onshape/model_btm_parameter_invalid_1664.go
index 31980a718..8f70bbb53 100644
--- a/onshape/model_btm_parameter_invalid_1664.go
+++ b/onshape/model_btm_parameter_invalid_1664.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMParameterInvalid1664{}
 
 // BTMParameterInvalid1664 struct for BTMParameterInvalid1664
 type BTMParameterInvalid1664 struct {
+	BTMParameter-1
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMParameterInvalid1664) SetBtType(v string) {
 }
 
 func (o BTMParameterInvalid1664) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMParameterInvalid1664) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterInvalid1664) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMParameterInvalid1664) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_lookup_table_path_1419.go b/onshape/model_btm_parameter_lookup_table_path_1419.go
index 9aa687bd7..4b468f200 100644
--- a/onshape/model_btm_parameter_lookup_table_path_1419.go
+++ b/onshape/model_btm_parameter_lookup_table_path_1419.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTMParameterLookupTablePath1419{}
 
 // BTMParameterLookupTablePath1419 struct for BTMParameterLookupTablePath1419
 type BTMParameterLookupTablePath1419 struct {
+	BTMParameter-1
 	// Type of JSON object.
-	BtType *string            `json:"btType,omitempty"`
-	Value  *map[string]string `json:"value,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Value *map[string]string `json:"value,omitempty"`
 }
 
 // NewBTMParameterLookupTablePath1419 instantiates a new BTMParameterLookupTablePath1419 object
@@ -107,7 +108,7 @@ func (o *BTMParameterLookupTablePath1419) SetValue(v map[string]string) {
 }
 
 func (o BTMParameterLookupTablePath1419) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMParameterLookupTablePath1419) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterLookupTablePath1419) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMParameterLookupTablePath1419) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_material_1388.go b/onshape/model_btm_parameter_material_1388.go
index 3ecac8311..93973deb2 100644
--- a/onshape/model_btm_parameter_material_1388.go
+++ b/onshape/model_btm_parameter_material_1388.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTMParameterMaterial1388{}
 
 // BTMParameterMaterial1388 struct for BTMParameterMaterial1388
 type BTMParameterMaterial1388 struct {
+	BTMParameter-1
 	// Type of JSON object.
-	BtType   *string             `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Material *BTPartMaterial1445 `json:"material,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTMParameterMaterial1388) SetMaterial(v BTPartMaterial1445) {
 }
 
 func (o BTMParameterMaterial1388) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMParameterMaterial1388) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterMaterial1388) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMParameterMaterial1388) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_multi_enum_3411.go b/onshape/model_btm_parameter_multi_enum_3411.go
index de49fd9ba..d6bb393ed 100644
--- a/onshape/model_btm_parameter_multi_enum_3411.go
+++ b/onshape/model_btm_parameter_multi_enum_3411.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTMParameterMultiEnum3411{}
 
 // BTMParameterMultiEnum3411 struct for BTMParameterMultiEnum3411
 type BTMParameterMultiEnum3411 struct {
+	BTMParameter-1
 	// Type of JSON object.
-	BtType    *string  `json:"btType,omitempty"`
-	EnumName  *string  `json:"enumName,omitempty"`
-	Namespace *string  `json:"namespace,omitempty"`
-	Values    []string `json:"values,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	EnumName *string `json:"enumName,omitempty"`
+	Namespace *string `json:"namespace,omitempty"`
+	Values []string `json:"values,omitempty"`
 }
 
 // NewBTMParameterMultiEnum3411 instantiates a new BTMParameterMultiEnum3411 object
@@ -173,7 +174,7 @@ func (o *BTMParameterMultiEnum3411) SetValues(v []string) {
 }
 
 func (o BTMParameterMultiEnum3411) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTMParameterMultiEnum3411) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterMultiEnum3411) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTMParameterMultiEnum3411) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_nullable_quantity_807.go b/onshape/model_btm_parameter_nullable_quantity_807.go
index fec6df683..542353472 100644
--- a/onshape/model_btm_parameter_nullable_quantity_807.go
+++ b/onshape/model_btm_parameter_nullable_quantity_807.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTMParameterNullableQuantity807{}
 
 // BTMParameterNullableQuantity807 struct for BTMParameterNullableQuantity807
 type BTMParameterNullableQuantity807 struct {
+	BTMParameterQuantity-147
 	// Type of JSON object.
-	BtType    *string `json:"btType,omitempty"`
-	IsNull    *bool   `json:"isNull,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsNull *bool `json:"isNull,omitempty"`
 	NullValue *string `json:"nullValue,omitempty"`
 }
 
@@ -140,7 +141,7 @@ func (o *BTMParameterNullableQuantity807) SetNullValue(v string) {
 }
 
 func (o BTMParameterNullableQuantity807) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTMParameterNullableQuantity807) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterNullableQuantity807) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameterQuantity147, errBTMParameterQuantity147 := json.Marshal(o.BTMParameterQuantity147)
+	if errBTMParameterQuantity147 != nil {
+		return map[string]interface{}{}, errBTMParameterQuantity147
+	}
+	errBTMParameterQuantity147 = json.Unmarshal([]byte(serializedBTMParameterQuantity147), &toSerialize)
+	if errBTMParameterQuantity147 != nil {
+		return map[string]interface{}{}, errBTMParameterQuantity147
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTMParameterNullableQuantity807) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_progress_3232.go b/onshape/model_btm_parameter_progress_3232.go
index 1f6f4aec6..0db26fd04 100644
--- a/onshape/model_btm_parameter_progress_3232.go
+++ b/onshape/model_btm_parameter_progress_3232.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTMParameterProgress3232{}
 
 // BTMParameterProgress3232 struct for BTMParameterProgress3232
 type BTMParameterProgress3232 struct {
+	BTMReadOnlyParameter-3800
 	// Type of JSON object.
-	BtType        *string           `json:"btType,omitempty"`
-	PercentDone   *float64          `json:"percentDone,omitempty"`
-	Status        *GBTComputeStatus `json:"status,omitempty"`
-	StatusMessage *string           `json:"statusMessage,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	PercentDone *float64 `json:"percentDone,omitempty"`
+	Status *GBTComputeStatus `json:"status,omitempty"`
+	StatusMessage *string `json:"statusMessage,omitempty"`
 }
 
 // NewBTMParameterProgress3232 instantiates a new BTMParameterProgress3232 object
@@ -173,7 +174,7 @@ func (o *BTMParameterProgress3232) SetStatusMessage(v string) {
 }
 
 func (o BTMParameterProgress3232) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTMParameterProgress3232) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterProgress3232) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMReadOnlyParameter3800, errBTMReadOnlyParameter3800 := json.Marshal(o.BTMReadOnlyParameter3800)
+	if errBTMReadOnlyParameter3800 != nil {
+		return map[string]interface{}{}, errBTMReadOnlyParameter3800
+	}
+	errBTMReadOnlyParameter3800 = json.Unmarshal([]byte(serializedBTMReadOnlyParameter3800), &toSerialize)
+	if errBTMReadOnlyParameter3800 != nil {
+		return map[string]interface{}{}, errBTMReadOnlyParameter3800
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTMParameterProgress3232) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_quantity_147.go b/onshape/model_btm_parameter_quantity_147.go
index 3a6066aae..89260e584 100644
--- a/onshape/model_btm_parameter_quantity_147.go
+++ b/onshape/model_btm_parameter_quantity_147.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTMParameterQuantity147{}
 
 // BTMParameterQuantity147 struct for BTMParameterQuantity147
 type BTMParameterQuantity147 struct {
+	BTMParameter-1
 	// Type of JSON object.
-	BtType     *string  `json:"btType,omitempty"`
-	Expression *string  `json:"expression,omitempty"`
-	IsInteger  *bool    `json:"isInteger,omitempty"`
-	Units      *string  `json:"units,omitempty"`
-	Value      *float64 `json:"value,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Expression *string `json:"expression,omitempty"`
+	IsInteger *bool `json:"isInteger,omitempty"`
+	Units *string `json:"units,omitempty"`
+	Value *float64 `json:"value,omitempty"`
 }
 
 // NewBTMParameterQuantity147 instantiates a new BTMParameterQuantity147 object
@@ -206,7 +207,7 @@ func (o *BTMParameterQuantity147) SetValue(v float64) {
 }
 
 func (o BTMParameterQuantity147) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTMParameterQuantity147) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterQuantity147) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTMParameterQuantity147) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_query_list_148.go b/onshape/model_btm_parameter_query_list_148.go
index 6a601a6d8..e2f4a2749 100644
--- a/onshape/model_btm_parameter_query_list_148.go
+++ b/onshape/model_btm_parameter_query_list_148.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTMParameterQueryList148{}
 
 // BTMParameterQueryList148 struct for BTMParameterQueryList148
 type BTMParameterQueryList148 struct {
+	BTMParameter-1
 	// Type of JSON object.
-	BtType  *string                     `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Queries []BTMIndividualQueryBase139 `json:"queries,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTMParameterQueryList148) SetQueries(v []BTMIndividualQueryBase139) {
 }
 
 func (o BTMParameterQueryList148) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMParameterQueryList148) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterQueryList148) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMParameterQueryList148) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_reference_2434.go b/onshape/model_btm_parameter_reference_2434.go
index 9024e3370..3ff50438a 100644
--- a/onshape/model_btm_parameter_reference_2434.go
+++ b/onshape/model_btm_parameter_reference_2434.go
@@ -20,18 +20,19 @@ var _ MappedNullable = &BTMParameterReference2434{}
 
 // BTMParameterReference2434 struct for BTMParameterReference2434
 type BTMParameterReference2434 struct {
+	BTMParameter-1
 	// Type of JSON object.
-	BtType             *string                            `json:"btType,omitempty"`
-	DocumentId         *string                            `json:"documentId,omitempty"`
-	DocumentVersionId  *string                            `json:"documentVersionId,omitempty"`
-	ElementId          *string                            `json:"elementId,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	DocumentId *string `json:"documentId,omitempty"`
+	DocumentVersionId *string `json:"documentVersionId,omitempty"`
+	ElementId *string `json:"elementId,omitempty"`
 	ElementLibraryData *BTElementLibraryReferenceData3133 `json:"elementLibraryData,omitempty"`
-	FeatureScriptType  *string                            `json:"featureScriptType,omitempty"`
-	Ids                []string                           `json:"ids,omitempty"`
+	FeatureScriptType *string `json:"featureScriptType,omitempty"`
+	Ids []string `json:"ids,omitempty"`
 	// Element microversion that is being imported.
 	ImportMicroversion *string `json:"importMicroversion,omitempty"`
-	MicroversioId      *string `json:"microversioId,omitempty"`
-	Namespace          *string `json:"namespace,omitempty"`
+	MicroversioId *string `json:"microversioId,omitempty"`
+	Namespace *string `json:"namespace,omitempty"`
 }
 
 // NewBTMParameterReference2434 instantiates a new BTMParameterReference2434 object
@@ -372,7 +373,7 @@ func (o *BTMParameterReference2434) SetNamespace(v string) {
 }
 
 func (o BTMParameterReference2434) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -381,6 +382,14 @@ func (o BTMParameterReference2434) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterReference2434) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -449,3 +458,5 @@ func (v *NullableBTMParameterReference2434) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_reference_assembly_938.go b/onshape/model_btm_parameter_reference_assembly_938.go
index 6a932f8db..d048e2b8f 100644
--- a/onshape/model_btm_parameter_reference_assembly_938.go
+++ b/onshape/model_btm_parameter_reference_assembly_938.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMParameterReferenceAssembly938{}
 
 // BTMParameterReferenceAssembly938 struct for BTMParameterReferenceAssembly938
 type BTMParameterReferenceAssembly938 struct {
+	BTMParameterReferenceWithConfiguration-3028
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMParameterReferenceAssembly938) SetBtType(v string) {
 }
 
 func (o BTMParameterReferenceAssembly938) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMParameterReferenceAssembly938) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterReferenceAssembly938) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameterReferenceWithConfiguration3028, errBTMParameterReferenceWithConfiguration3028 := json.Marshal(o.BTMParameterReferenceWithConfiguration3028)
+	if errBTMParameterReferenceWithConfiguration3028 != nil {
+		return map[string]interface{}{}, errBTMParameterReferenceWithConfiguration3028
+	}
+	errBTMParameterReferenceWithConfiguration3028 = json.Unmarshal([]byte(serializedBTMParameterReferenceWithConfiguration3028), &toSerialize)
+	if errBTMParameterReferenceWithConfiguration3028 != nil {
+		return map[string]interface{}{}, errBTMParameterReferenceWithConfiguration3028
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMParameterReferenceAssembly938) UnmarshalJSON(src []byte) err
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_reference_blob_3281.go b/onshape/model_btm_parameter_reference_blob_3281.go
index 6110264de..8158bd93d 100644
--- a/onshape/model_btm_parameter_reference_blob_3281.go
+++ b/onshape/model_btm_parameter_reference_blob_3281.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMParameterReferenceBlob3281{}
 
 // BTMParameterReferenceBlob3281 struct for BTMParameterReferenceBlob3281
 type BTMParameterReferenceBlob3281 struct {
+	BTMParameterReference-2434
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMParameterReferenceBlob3281) SetBtType(v string) {
 }
 
 func (o BTMParameterReferenceBlob3281) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMParameterReferenceBlob3281) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterReferenceBlob3281) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameterReference2434, errBTMParameterReference2434 := json.Marshal(o.BTMParameterReference2434)
+	if errBTMParameterReference2434 != nil {
+		return map[string]interface{}{}, errBTMParameterReference2434
+	}
+	errBTMParameterReference2434 = json.Unmarshal([]byte(serializedBTMParameterReference2434), &toSerialize)
+	if errBTMParameterReference2434 != nil {
+		return map[string]interface{}{}, errBTMParameterReference2434
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMParameterReferenceBlob3281) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_reference_cad_import_2016.go b/onshape/model_btm_parameter_reference_cad_import_2016.go
index cede60e33..5916c806f 100644
--- a/onshape/model_btm_parameter_reference_cad_import_2016.go
+++ b/onshape/model_btm_parameter_reference_cad_import_2016.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMParameterReferenceCADImport2016{}
 
 // BTMParameterReferenceCADImport2016 struct for BTMParameterReferenceCADImport2016
 type BTMParameterReferenceCADImport2016 struct {
+	BTMParameterReferenceBlob-3281
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMParameterReferenceCADImport2016) SetBtType(v string) {
 }
 
 func (o BTMParameterReferenceCADImport2016) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMParameterReferenceCADImport2016) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterReferenceCADImport2016) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameterReferenceBlob3281, errBTMParameterReferenceBlob3281 := json.Marshal(o.BTMParameterReferenceBlob3281)
+	if errBTMParameterReferenceBlob3281 != nil {
+		return map[string]interface{}{}, errBTMParameterReferenceBlob3281
+	}
+	errBTMParameterReferenceBlob3281 = json.Unmarshal([]byte(serializedBTMParameterReferenceBlob3281), &toSerialize)
+	if errBTMParameterReferenceBlob3281 != nil {
+		return map[string]interface{}{}, errBTMParameterReferenceBlob3281
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMParameterReferenceCADImport2016) UnmarshalJSON(src []byte) e
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_reference_image_2014.go b/onshape/model_btm_parameter_reference_image_2014.go
index 569db240c..51054985e 100644
--- a/onshape/model_btm_parameter_reference_image_2014.go
+++ b/onshape/model_btm_parameter_reference_image_2014.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMParameterReferenceImage2014{}
 
 // BTMParameterReferenceImage2014 struct for BTMParameterReferenceImage2014
 type BTMParameterReferenceImage2014 struct {
+	BTMParameterReferenceBlob-3281
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMParameterReferenceImage2014) SetBtType(v string) {
 }
 
 func (o BTMParameterReferenceImage2014) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMParameterReferenceImage2014) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterReferenceImage2014) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameterReferenceBlob3281, errBTMParameterReferenceBlob3281 := json.Marshal(o.BTMParameterReferenceBlob3281)
+	if errBTMParameterReferenceBlob3281 != nil {
+		return map[string]interface{}{}, errBTMParameterReferenceBlob3281
+	}
+	errBTMParameterReferenceBlob3281 = json.Unmarshal([]byte(serializedBTMParameterReferenceBlob3281), &toSerialize)
+	if errBTMParameterReferenceBlob3281 != nil {
+		return map[string]interface{}{}, errBTMParameterReferenceBlob3281
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMParameterReferenceImage2014) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_reference_part_studio_3302.go b/onshape/model_btm_parameter_reference_part_studio_3302.go
index dfcc9ff5f..57b17ca13 100644
--- a/onshape/model_btm_parameter_reference_part_studio_3302.go
+++ b/onshape/model_btm_parameter_reference_part_studio_3302.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTMParameterReferencePartStudio3302{}
 
 // BTMParameterReferencePartStudio3302 struct for BTMParameterReferencePartStudio3302
 type BTMParameterReferencePartStudio3302 struct {
+	BTMParameterReferenceWithConfiguration-3028
 	// Type of JSON object.
-	BtType                      *string                   `json:"btType,omitempty"`
-	BlockBuildFunctionAccess    *bool                     `json:"blockBuildFunctionAccess,omitempty"`
-	PartIdentity                *BTPSOIdentity2741        `json:"partIdentity,omitempty"`
-	PartQuery                   *BTMParameterQueryList148 `json:"partQuery,omitempty"`
-	StandardContentParametersId *string                   `json:"standardContentParametersId,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	BlockBuildFunctionAccess *bool `json:"blockBuildFunctionAccess,omitempty"`
+	PartIdentity *BTPSOIdentity2741 `json:"partIdentity,omitempty"`
+	PartQuery *BTMParameterQueryList148 `json:"partQuery,omitempty"`
+	StandardContentParametersId *string `json:"standardContentParametersId,omitempty"`
 }
 
 // NewBTMParameterReferencePartStudio3302 instantiates a new BTMParameterReferencePartStudio3302 object
@@ -206,7 +207,7 @@ func (o *BTMParameterReferencePartStudio3302) SetStandardContentParametersId(v s
 }
 
 func (o BTMParameterReferencePartStudio3302) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTMParameterReferencePartStudio3302) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterReferencePartStudio3302) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameterReferenceWithConfiguration3028, errBTMParameterReferenceWithConfiguration3028 := json.Marshal(o.BTMParameterReferenceWithConfiguration3028)
+	if errBTMParameterReferenceWithConfiguration3028 != nil {
+		return map[string]interface{}{}, errBTMParameterReferenceWithConfiguration3028
+	}
+	errBTMParameterReferenceWithConfiguration3028 = json.Unmarshal([]byte(serializedBTMParameterReferenceWithConfiguration3028), &toSerialize)
+	if errBTMParameterReferenceWithConfiguration3028 != nil {
+		return map[string]interface{}{}, errBTMParameterReferenceWithConfiguration3028
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTMParameterReferencePartStudio3302) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_reference_table_917.go b/onshape/model_btm_parameter_reference_table_917.go
index e77ea2ad0..3ac603049 100644
--- a/onshape/model_btm_parameter_reference_table_917.go
+++ b/onshape/model_btm_parameter_reference_table_917.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMParameterReferenceTable917{}
 
 // BTMParameterReferenceTable917 struct for BTMParameterReferenceTable917
 type BTMParameterReferenceTable917 struct {
+	BTMParameterReferenceBlob-3281
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMParameterReferenceTable917) SetBtType(v string) {
 }
 
 func (o BTMParameterReferenceTable917) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMParameterReferenceTable917) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterReferenceTable917) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameterReferenceBlob3281, errBTMParameterReferenceBlob3281 := json.Marshal(o.BTMParameterReferenceBlob3281)
+	if errBTMParameterReferenceBlob3281 != nil {
+		return map[string]interface{}{}, errBTMParameterReferenceBlob3281
+	}
+	errBTMParameterReferenceBlob3281 = json.Unmarshal([]byte(serializedBTMParameterReferenceBlob3281), &toSerialize)
+	if errBTMParameterReferenceBlob3281 != nil {
+		return map[string]interface{}{}, errBTMParameterReferenceBlob3281
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMParameterReferenceTable917) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_reference_variable_studio_3550.go b/onshape/model_btm_parameter_reference_variable_studio_3550.go
index 6f644e4d3..ca5a0feb6 100644
--- a/onshape/model_btm_parameter_reference_variable_studio_3550.go
+++ b/onshape/model_btm_parameter_reference_variable_studio_3550.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMParameterReferenceVariableStudio3550{}
 
 // BTMParameterReferenceVariableStudio3550 struct for BTMParameterReferenceVariableStudio3550
 type BTMParameterReferenceVariableStudio3550 struct {
+	BTMParameterReferenceWithConfiguration-3028
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMParameterReferenceVariableStudio3550) SetBtType(v string) {
 }
 
 func (o BTMParameterReferenceVariableStudio3550) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMParameterReferenceVariableStudio3550) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterReferenceVariableStudio3550) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameterReferenceWithConfiguration3028, errBTMParameterReferenceWithConfiguration3028 := json.Marshal(o.BTMParameterReferenceWithConfiguration3028)
+	if errBTMParameterReferenceWithConfiguration3028 != nil {
+		return map[string]interface{}{}, errBTMParameterReferenceWithConfiguration3028
+	}
+	errBTMParameterReferenceWithConfiguration3028 = json.Unmarshal([]byte(serializedBTMParameterReferenceWithConfiguration3028), &toSerialize)
+	if errBTMParameterReferenceWithConfiguration3028 != nil {
+		return map[string]interface{}{}, errBTMParameterReferenceWithConfiguration3028
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMParameterReferenceVariableStudio3550) UnmarshalJSON(src []by
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_string_149.go b/onshape/model_btm_parameter_string_149.go
index 04841f50c..66a6a47ff 100644
--- a/onshape/model_btm_parameter_string_149.go
+++ b/onshape/model_btm_parameter_string_149.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTMParameterString149{}
 
 // BTMParameterString149 struct for BTMParameterString149
 type BTMParameterString149 struct {
+	BTMParameter-1
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
-	Value  *string `json:"value,omitempty"`
+	Value *string `json:"value,omitempty"`
 }
 
 // NewBTMParameterString149 instantiates a new BTMParameterString149 object
@@ -107,7 +108,7 @@ func (o *BTMParameterString149) SetValue(v string) {
 }
 
 func (o BTMParameterString149) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMParameterString149) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterString149) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMParameterString149) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parameter_string_with_tolerances_4286.go b/onshape/model_btm_parameter_string_with_tolerances_4286.go
index 74ade9ccc..55f1cecd1 100644
--- a/onshape/model_btm_parameter_string_with_tolerances_4286.go
+++ b/onshape/model_btm_parameter_string_with_tolerances_4286.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTMParameterStringWithTolerances4286{}
 
 // BTMParameterStringWithTolerances4286 struct for BTMParameterStringWithTolerances4286
 type BTMParameterStringWithTolerances4286 struct {
+	BTMReadOnlyParameter-3800
 	// Type of JSON object.
-	BtType     *string                 `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Components []BTToleranceString3274 `json:"components,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTMParameterStringWithTolerances4286) SetComponents(v []BTToleranceStri
 }
 
 func (o BTMParameterStringWithTolerances4286) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMParameterStringWithTolerances4286) MarshalJSON() ([]byte, error) {
 
 func (o BTMParameterStringWithTolerances4286) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMReadOnlyParameter3800, errBTMReadOnlyParameter3800 := json.Marshal(o.BTMReadOnlyParameter3800)
+	if errBTMReadOnlyParameter3800 != nil {
+		return map[string]interface{}{}, errBTMReadOnlyParameter3800
+	}
+	errBTMReadOnlyParameter3800 = json.Unmarshal([]byte(serializedBTMReadOnlyParameter3800), &toSerialize)
+	if errBTMReadOnlyParameter3800 != nil {
+		return map[string]interface{}{}, errBTMReadOnlyParameter3800
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMParameterStringWithTolerances4286) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_parametric_part_studio_feature_3883.go b/onshape/model_btm_parametric_part_studio_feature_3883.go
index 888d7b1cb..4525b0ce2 100644
--- a/onshape/model_btm_parametric_part_studio_feature_3883.go
+++ b/onshape/model_btm_parametric_part_studio_feature_3883.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMParametricPartStudioFeature3883{}
 
 // BTMParametricPartStudioFeature3883 struct for BTMParametricPartStudioFeature3883
 type BTMParametricPartStudioFeature3883 struct {
+	BTMAssemblyFeature-887
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMParametricPartStudioFeature3883) SetBtType(v string) {
 }
 
 func (o BTMParametricPartStudioFeature3883) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMParametricPartStudioFeature3883) MarshalJSON() ([]byte, error) {
 
 func (o BTMParametricPartStudioFeature3883) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMAssemblyFeature887, errBTMAssemblyFeature887 := json.Marshal(o.BTMAssemblyFeature887)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
+	errBTMAssemblyFeature887 = json.Unmarshal([]byte(serializedBTMAssemblyFeature887), &toSerialize)
+	if errBTMAssemblyFeature887 != nil {
+		return map[string]interface{}{}, errBTMAssemblyFeature887
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMParametricPartStudioFeature3883) UnmarshalJSON(src []byte) e
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_part_studio_mate_connector_query_1324.go b/onshape/model_btm_part_studio_mate_connector_query_1324.go
index 835742a88..9c26aff68 100644
--- a/onshape/model_btm_part_studio_mate_connector_query_1324.go
+++ b/onshape/model_btm_part_studio_mate_connector_query_1324.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMPartStudioMateConnectorQuery1324{}
 
 // BTMPartStudioMateConnectorQuery1324 struct for BTMPartStudioMateConnectorQuery1324
 type BTMPartStudioMateConnectorQuery1324 struct {
+	BTMFeatureQueryWithOccurrence-157
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMPartStudioMateConnectorQuery1324) SetBtType(v string) {
 }
 
 func (o BTMPartStudioMateConnectorQuery1324) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMPartStudioMateConnectorQuery1324) MarshalJSON() ([]byte, error) {
 
 func (o BTMPartStudioMateConnectorQuery1324) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMFeatureQueryWithOccurrence157, errBTMFeatureQueryWithOccurrence157 := json.Marshal(o.BTMFeatureQueryWithOccurrence157)
+	if errBTMFeatureQueryWithOccurrence157 != nil {
+		return map[string]interface{}{}, errBTMFeatureQueryWithOccurrence157
+	}
+	errBTMFeatureQueryWithOccurrence157 = json.Unmarshal([]byte(serializedBTMFeatureQueryWithOccurrence157), &toSerialize)
+	if errBTMFeatureQueryWithOccurrence157 != nil {
+		return map[string]interface{}{}, errBTMFeatureQueryWithOccurrence157
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMPartStudioMateConnectorQuery1324) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_read_only_parameter_3800.go b/onshape/model_btm_read_only_parameter_3800.go
index 2f67a3f06..4197da86d 100644
--- a/onshape/model_btm_read_only_parameter_3800.go
+++ b/onshape/model_btm_read_only_parameter_3800.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMReadOnlyParameter3800{}
 
 // BTMReadOnlyParameter3800 struct for BTMReadOnlyParameter3800
 type BTMReadOnlyParameter3800 struct {
+	BTMParameter-1
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMReadOnlyParameter3800) SetBtType(v string) {
 }
 
 func (o BTMReadOnlyParameter3800) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMReadOnlyParameter3800) MarshalJSON() ([]byte, error) {
 
 func (o BTMReadOnlyParameter3800) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMParameter1, errBTMParameter1 := json.Marshal(o.BTMParameter1)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
+	errBTMParameter1 = json.Unmarshal([]byte(serializedBTMParameter1), &toSerialize)
+	if errBTMParameter1 != nil {
+		return map[string]interface{}{}, errBTMParameter1
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMReadOnlyParameter3800) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_record_metrics_1169.go b/onshape/model_btm_record_metrics_1169.go
index 0c1c352c5..90f987ffd 100644
--- a/onshape/model_btm_record_metrics_1169.go
+++ b/onshape/model_btm_record_metrics_1169.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTMRecordMetrics1169{}
 
 // BTMRecordMetrics1169 struct for BTMRecordMetrics1169
 type BTMRecordMetrics1169 struct {
+	BTMNode-19
 	// Type of JSON object.
-	BtType            *string                 `json:"btType,omitempty"`
-	DoBodyValidation  *bool                   `json:"doBodyValidation,omitempty"`
-	PreviousFeatureId *string                 `json:"previousFeatureId,omitempty"`
-	References        []BTMIndividualQuery138 `json:"references,omitempty"`
-	UseLatestBehavior *bool                   `json:"useLatestBehavior,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	DoBodyValidation *bool `json:"doBodyValidation,omitempty"`
+	PreviousFeatureId *string `json:"previousFeatureId,omitempty"`
+	References []BTMIndividualQuery138 `json:"references,omitempty"`
+	UseLatestBehavior *bool `json:"useLatestBehavior,omitempty"`
 }
 
 // NewBTMRecordMetrics1169 instantiates a new BTMRecordMetrics1169 object
@@ -206,7 +207,7 @@ func (o *BTMRecordMetrics1169) SetUseLatestBehavior(v bool) {
 }
 
 func (o BTMRecordMetrics1169) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTMRecordMetrics1169) MarshalJSON() ([]byte, error) {
 
 func (o BTMRecordMetrics1169) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMNode19, errBTMNode19 := json.Marshal(o.BTMNode19)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
+	errBTMNode19 = json.Unmarshal([]byte(serializedBTMNode19), &toSerialize)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTMRecordMetrics1169) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_rollback_150.go b/onshape/model_btm_rollback_150.go
index 862f0cb7d..1bcbffe33 100644
--- a/onshape/model_btm_rollback_150.go
+++ b/onshape/model_btm_rollback_150.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMRollback150{}
 
 // BTMRollback150 struct for BTMRollback150
 type BTMRollback150 struct {
+	BTMNode-19
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMRollback150) SetBtType(v string) {
 }
 
 func (o BTMRollback150) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMRollback150) MarshalJSON() ([]byte, error) {
 
 func (o BTMRollback150) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMNode19, errBTMNode19 := json.Marshal(o.BTMNode19)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
+	errBTMNode19 = json.Unmarshal([]byte(serializedBTMNode19), &toSerialize)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMRollback150) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_sketch_151.go b/onshape/model_btm_sketch_151.go
index eb0469f77..d96a0456a 100644
--- a/onshape/model_btm_sketch_151.go
+++ b/onshape/model_btm_sketch_151.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTMSketch151{}
 
 // BTMSketch151 struct for BTMSketch151
 type BTMSketch151 struct {
+	BTMFeature-134
 	// Type of JSON object.
-	BtType      *string                `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Constraints []BTMSketchConstraint2 `json:"constraints,omitempty"`
-	Entities    []BTMSketchGeomEntity5 `json:"entities,omitempty"`
+	Entities []BTMSketchGeomEntity5 `json:"entities,omitempty"`
 }
 
 // NewBTMSketch151 instantiates a new BTMSketch151 object
@@ -140,7 +141,7 @@ func (o *BTMSketch151) SetEntities(v []BTMSketchGeomEntity5) {
 }
 
 func (o BTMSketch151) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTMSketch151) MarshalJSON() ([]byte, error) {
 
 func (o BTMSketch151) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMFeature134, errBTMFeature134 := json.Marshal(o.BTMFeature134)
+	if errBTMFeature134 != nil {
+		return map[string]interface{}{}, errBTMFeature134
+	}
+	errBTMFeature134 = json.Unmarshal([]byte(serializedBTMFeature134), &toSerialize)
+	if errBTMFeature134 != nil {
+		return map[string]interface{}{}, errBTMFeature134
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTMSketch151) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_sketch_composite_entity_893.go b/onshape/model_btm_sketch_composite_entity_893.go
index 37fd516d0..e677f9c21 100644
--- a/onshape/model_btm_sketch_composite_entity_893.go
+++ b/onshape/model_btm_sketch_composite_entity_893.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTMSketchCompositeEntity893{}
 
 // BTMSketchCompositeEntity893 struct for BTMSketchCompositeEntity893
 type BTMSketchCompositeEntity893 struct {
+	BTMSketchEntity-3
 	// Type of JSON object.
-	BtType      *string            `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	SubEntities []BTMSketchEntity3 `json:"subEntities,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTMSketchCompositeEntity893) SetSubEntities(v []BTMSketchEntity3) {
 }
 
 func (o BTMSketchCompositeEntity893) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMSketchCompositeEntity893) MarshalJSON() ([]byte, error) {
 
 func (o BTMSketchCompositeEntity893) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMSketchEntity3, errBTMSketchEntity3 := json.Marshal(o.BTMSketchEntity3)
+	if errBTMSketchEntity3 != nil {
+		return map[string]interface{}{}, errBTMSketchEntity3
+	}
+	errBTMSketchEntity3 = json.Unmarshal([]byte(serializedBTMSketchEntity3), &toSerialize)
+	if errBTMSketchEntity3 != nil {
+		return map[string]interface{}{}, errBTMSketchEntity3
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMSketchCompositeEntity893) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_sketch_curve_4.go b/onshape/model_btm_sketch_curve_4.go
index 57b93da9a..353ecc1f6 100644
--- a/onshape/model_btm_sketch_curve_4.go
+++ b/onshape/model_btm_sketch_curve_4.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTMSketchCurve4{}
 
 // BTMSketchCurve4 struct for BTMSketchCurve4
 type BTMSketchCurve4 struct {
+	BTMSketchGeomEntity-5
 	// Type of JSON object.
-	BtType      *string             `json:"btType,omitempty"`
-	CenterId    *string             `json:"centerId,omitempty"`
-	Geometry    *BTCurveGeometry114 `json:"geometry,omitempty"`
-	InternalIds []string            `json:"internalIds,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	CenterId *string `json:"centerId,omitempty"`
+	Geometry *BTCurveGeometry114 `json:"geometry,omitempty"`
+	InternalIds []string `json:"internalIds,omitempty"`
 }
 
 // NewBTMSketchCurve4 instantiates a new BTMSketchCurve4 object
@@ -173,7 +174,7 @@ func (o *BTMSketchCurve4) SetInternalIds(v []string) {
 }
 
 func (o BTMSketchCurve4) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTMSketchCurve4) MarshalJSON() ([]byte, error) {
 
 func (o BTMSketchCurve4) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMSketchGeomEntity5, errBTMSketchGeomEntity5 := json.Marshal(o.BTMSketchGeomEntity5)
+	if errBTMSketchGeomEntity5 != nil {
+		return map[string]interface{}{}, errBTMSketchGeomEntity5
+	}
+	errBTMSketchGeomEntity5 = json.Unmarshal([]byte(serializedBTMSketchGeomEntity5), &toSerialize)
+	if errBTMSketchGeomEntity5 != nil {
+		return map[string]interface{}{}, errBTMSketchGeomEntity5
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTMSketchCurve4) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_sketch_curve_segment_155.go b/onshape/model_btm_sketch_curve_segment_155.go
index 15f751175..dc089a87b 100644
--- a/onshape/model_btm_sketch_curve_segment_155.go
+++ b/onshape/model_btm_sketch_curve_segment_155.go
@@ -20,13 +20,14 @@ var _ MappedNullable = &BTMSketchCurveSegment155{}
 
 // BTMSketchCurveSegment155 struct for BTMSketchCurveSegment155
 type BTMSketchCurveSegment155 struct {
+	BTMSketchCurve-4
 	// Type of JSON object.
-	BtType                *string   `json:"btType,omitempty"`
-	EndParam              *float64  `json:"endParam,omitempty"`
-	EndPointId            *string   `json:"endPointId,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	EndParam *float64 `json:"endParam,omitempty"`
+	EndPointId *string `json:"endPointId,omitempty"`
 	OffsetCurveExtensions []float64 `json:"offsetCurveExtensions,omitempty"`
-	StartParam            *float64  `json:"startParam,omitempty"`
-	StartPointId          *string   `json:"startPointId,omitempty"`
+	StartParam *float64 `json:"startParam,omitempty"`
+	StartPointId *string `json:"startPointId,omitempty"`
 }
 
 // NewBTMSketchCurveSegment155 instantiates a new BTMSketchCurveSegment155 object
@@ -239,7 +240,7 @@ func (o *BTMSketchCurveSegment155) SetStartPointId(v string) {
 }
 
 func (o BTMSketchCurveSegment155) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -248,6 +249,14 @@ func (o BTMSketchCurveSegment155) MarshalJSON() ([]byte, error) {
 
 func (o BTMSketchCurveSegment155) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMSketchCurve4, errBTMSketchCurve4 := json.Marshal(o.BTMSketchCurve4)
+	if errBTMSketchCurve4 != nil {
+		return map[string]interface{}{}, errBTMSketchCurve4
+	}
+	errBTMSketchCurve4 = json.Unmarshal([]byte(serializedBTMSketchCurve4), &toSerialize)
+	if errBTMSketchCurve4 != nil {
+		return map[string]interface{}{}, errBTMSketchCurve4
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -304,3 +313,5 @@ func (v *NullableBTMSketchCurveSegment155) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_sketch_entity_3.go b/onshape/model_btm_sketch_entity_3.go
index 6a53f145a..f77b986d1 100644
--- a/onshape/model_btm_sketch_entity_3.go
+++ b/onshape/model_btm_sketch_entity_3.go
@@ -20,14 +20,15 @@ var _ MappedNullable = &BTMSketchEntity3{}
 
 // BTMSketchEntity3 struct for BTMSketchEntity3
 type BTMSketchEntity3 struct {
+	BTMNode-19
 	// Type of JSON object.
-	BtType                              *string `json:"btType,omitempty"`
-	EntityId                            *string `json:"entityId,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	EntityId *string `json:"entityId,omitempty"`
 	EntityIdAndReplaceInDependentFields *string `json:"entityIdAndReplaceInDependentFields,omitempty"`
 	// Element microversion that is being imported.
-	ImportMicroversion *string         `json:"importMicroversion,omitempty"`
-	Namespace          *string         `json:"namespace,omitempty"`
-	Parameters         []BTMParameter1 `json:"parameters,omitempty"`
+	ImportMicroversion *string `json:"importMicroversion,omitempty"`
+	Namespace *string `json:"namespace,omitempty"`
+	Parameters []BTMParameter1 `json:"parameters,omitempty"`
 }
 
 // NewBTMSketchEntity3 instantiates a new BTMSketchEntity3 object
@@ -240,7 +241,7 @@ func (o *BTMSketchEntity3) SetParameters(v []BTMParameter1) {
 }
 
 func (o BTMSketchEntity3) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -249,6 +250,14 @@ func (o BTMSketchEntity3) MarshalJSON() ([]byte, error) {
 
 func (o BTMSketchEntity3) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMNode19, errBTMNode19 := json.Marshal(o.BTMNode19)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
+	errBTMNode19 = json.Unmarshal([]byte(serializedBTMNode19), &toSerialize)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -305,3 +314,5 @@ func (v *NullableBTMSketchEntity3) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_sketch_image_entity_763.go b/onshape/model_btm_sketch_image_entity_763.go
index d921c619a..ebe2ef327 100644
--- a/onshape/model_btm_sketch_image_entity_763.go
+++ b/onshape/model_btm_sketch_image_entity_763.go
@@ -20,13 +20,14 @@ var _ MappedNullable = &BTMSketchImageEntity763{}
 
 // BTMSketchImageEntity763 struct for BTMSketchImageEntity763
 type BTMSketchImageEntity763 struct {
+	BTMSketchGeomEntity-5
 	// Type of JSON object.
-	BtType      *string  `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	AspectRatio *float64 `json:"aspectRatio,omitempty"`
-	OriginX     *float64 `json:"originX,omitempty"`
-	OriginY     *float64 `json:"originY,omitempty"`
-	XaxisX      *float64 `json:"xaxisX,omitempty"`
-	XaxisY      *float64 `json:"xaxisY,omitempty"`
+	OriginX *float64 `json:"originX,omitempty"`
+	OriginY *float64 `json:"originY,omitempty"`
+	XaxisX *float64 `json:"xaxisX,omitempty"`
+	XaxisY *float64 `json:"xaxisY,omitempty"`
 }
 
 // NewBTMSketchImageEntity763 instantiates a new BTMSketchImageEntity763 object
@@ -239,7 +240,7 @@ func (o *BTMSketchImageEntity763) SetXaxisY(v float64) {
 }
 
 func (o BTMSketchImageEntity763) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -248,6 +249,14 @@ func (o BTMSketchImageEntity763) MarshalJSON() ([]byte, error) {
 
 func (o BTMSketchImageEntity763) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMSketchGeomEntity5, errBTMSketchGeomEntity5 := json.Marshal(o.BTMSketchGeomEntity5)
+	if errBTMSketchGeomEntity5 != nil {
+		return map[string]interface{}{}, errBTMSketchGeomEntity5
+	}
+	errBTMSketchGeomEntity5 = json.Unmarshal([]byte(serializedBTMSketchGeomEntity5), &toSerialize)
+	if errBTMSketchGeomEntity5 != nil {
+		return map[string]interface{}{}, errBTMSketchGeomEntity5
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -304,3 +313,5 @@ func (v *NullableBTMSketchImageEntity763) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_sketch_invalid_1601.go b/onshape/model_btm_sketch_invalid_1601.go
index 30ed89e9f..4d0c04ab4 100644
--- a/onshape/model_btm_sketch_invalid_1601.go
+++ b/onshape/model_btm_sketch_invalid_1601.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMSketchInvalid1601{}
 
 // BTMSketchInvalid1601 struct for BTMSketchInvalid1601
 type BTMSketchInvalid1601 struct {
+	BTMSketchEntity-3
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMSketchInvalid1601) SetBtType(v string) {
 }
 
 func (o BTMSketchInvalid1601) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMSketchInvalid1601) MarshalJSON() ([]byte, error) {
 
 func (o BTMSketchInvalid1601) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMSketchEntity3, errBTMSketchEntity3 := json.Marshal(o.BTMSketchEntity3)
+	if errBTMSketchEntity3 != nil {
+		return map[string]interface{}{}, errBTMSketchEntity3
+	}
+	errBTMSketchEntity3 = json.Unmarshal([]byte(serializedBTMSketchEntity3), &toSerialize)
+	if errBTMSketchEntity3 != nil {
+		return map[string]interface{}{}, errBTMSketchEntity3
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMSketchInvalid1601) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_sketch_point_158.go b/onshape/model_btm_sketch_point_158.go
index 13b9160d8..b3bc61cb0 100644
--- a/onshape/model_btm_sketch_point_158.go
+++ b/onshape/model_btm_sketch_point_158.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTMSketchPoint158{}
 
 // BTMSketchPoint158 struct for BTMSketchPoint158
 type BTMSketchPoint158 struct {
+	BTMSketchGeomEntity-5
 	// Type of JSON object.
-	BtType      *string  `json:"btType,omitempty"`
-	IsUserPoint *bool    `json:"isUserPoint,omitempty"`
-	X           *float64 `json:"x,omitempty"`
-	Y           *float64 `json:"y,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsUserPoint *bool `json:"isUserPoint,omitempty"`
+	X *float64 `json:"x,omitempty"`
+	Y *float64 `json:"y,omitempty"`
 }
 
 // NewBTMSketchPoint158 instantiates a new BTMSketchPoint158 object
@@ -173,7 +174,7 @@ func (o *BTMSketchPoint158) SetY(v float64) {
 }
 
 func (o BTMSketchPoint158) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTMSketchPoint158) MarshalJSON() ([]byte, error) {
 
 func (o BTMSketchPoint158) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMSketchGeomEntity5, errBTMSketchGeomEntity5 := json.Marshal(o.BTMSketchGeomEntity5)
+	if errBTMSketchGeomEntity5 != nil {
+		return map[string]interface{}{}, errBTMSketchGeomEntity5
+	}
+	errBTMSketchGeomEntity5 = json.Unmarshal([]byte(serializedBTMSketchGeomEntity5), &toSerialize)
+	if errBTMSketchGeomEntity5 != nil {
+		return map[string]interface{}{}, errBTMSketchGeomEntity5
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTMSketchPoint158) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_sketch_text_entity_1761.go b/onshape/model_btm_sketch_text_entity_1761.go
index aa468a0a7..fdf5c7b23 100644
--- a/onshape/model_btm_sketch_text_entity_1761.go
+++ b/onshape/model_btm_sketch_text_entity_1761.go
@@ -20,15 +20,16 @@ var _ MappedNullable = &BTMSketchTextEntity1761{}
 
 // BTMSketchTextEntity1761 struct for BTMSketchTextEntity1761
 type BTMSketchTextEntity1761 struct {
+	BTMSketchGeomEntity-5
 	// Type of JSON object.
-	BtType             *string  `json:"btType,omitempty"`
-	Ascent             *float64 `json:"ascent,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Ascent *float64 `json:"ascent,omitempty"`
 	BaselineDirectionX *float64 `json:"baselineDirectionX,omitempty"`
 	BaselineDirectionY *float64 `json:"baselineDirectionY,omitempty"`
-	BaselineStartX     *float64 `json:"baselineStartX,omitempty"`
-	BaselineStartY     *float64 `json:"baselineStartY,omitempty"`
-	FontName           *string  `json:"fontName,omitempty"`
-	Text               *string  `json:"text,omitempty"`
+	BaselineStartX *float64 `json:"baselineStartX,omitempty"`
+	BaselineStartY *float64 `json:"baselineStartY,omitempty"`
+	FontName *string `json:"fontName,omitempty"`
+	Text *string `json:"text,omitempty"`
 }
 
 // NewBTMSketchTextEntity1761 instantiates a new BTMSketchTextEntity1761 object
@@ -305,7 +306,7 @@ func (o *BTMSketchTextEntity1761) SetText(v string) {
 }
 
 func (o BTMSketchTextEntity1761) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -314,6 +315,14 @@ func (o BTMSketchTextEntity1761) MarshalJSON() ([]byte, error) {
 
 func (o BTMSketchTextEntity1761) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMSketchGeomEntity5, errBTMSketchGeomEntity5 := json.Marshal(o.BTMSketchGeomEntity5)
+	if errBTMSketchGeomEntity5 != nil {
+		return map[string]interface{}{}, errBTMSketchGeomEntity5
+	}
+	errBTMSketchGeomEntity5 = json.Unmarshal([]byte(serializedBTMSketchGeomEntity5), &toSerialize)
+	if errBTMSketchGeomEntity5 != nil {
+		return map[string]interface{}{}, errBTMSketchGeomEntity5
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -376,3 +385,5 @@ func (v *NullableBTMSketchTextEntity1761) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_suppression_state_1924.go b/onshape/model_btm_suppression_state_1924.go
index 19827ffd2..afb51918f 100644
--- a/onshape/model_btm_suppression_state_1924.go
+++ b/onshape/model_btm_suppression_state_1924.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTMSuppressionState1924{}
 
 // BTMSuppressionState1924 struct for BTMSuppressionState1924
 type BTMSuppressionState1924 struct {
+	BTMNode-19
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTMSuppressionState1924) SetBtType(v string) {
 }
 
 func (o BTMSuppressionState1924) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTMSuppressionState1924) MarshalJSON() ([]byte, error) {
 
 func (o BTMSuppressionState1924) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMNode19, errBTMNode19 := json.Marshal(o.BTMNode19)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
+	errBTMNode19 = json.Unmarshal([]byte(serializedBTMNode19), &toSerialize)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTMSuppressionState1924) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_suppression_state_configured_2598.go b/onshape/model_btm_suppression_state_configured_2598.go
index ba48fe9af..e0c4a0c2a 100644
--- a/onshape/model_btm_suppression_state_configured_2598.go
+++ b/onshape/model_btm_suppression_state_configured_2598.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTMSuppressionStateConfigured2598{}
 
 // BTMSuppressionStateConfigured2598 struct for BTMSuppressionStateConfigured2598
 type BTMSuppressionStateConfigured2598 struct {
+	BTMSuppressionState-1924
 	// Type of JSON object.
-	BtType                             *string                  `json:"btType,omitempty"`
-	ConfigurationParameterId           *string                  `json:"configurationParameterId,omitempty"`
-	ConfigurationParameterIdFieldIndex *int32                   `json:"configurationParameterIdFieldIndex,omitempty"`
-	Values                             []BTMConfiguredValue1341 `json:"values,omitempty"`
-	ValuesFieldIndex                   *int32                   `json:"valuesFieldIndex,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	ConfigurationParameterId *string `json:"configurationParameterId,omitempty"`
+	ConfigurationParameterIdFieldIndex *int32 `json:"configurationParameterIdFieldIndex,omitempty"`
+	Values []BTMConfiguredValue1341 `json:"values,omitempty"`
+	ValuesFieldIndex *int32 `json:"valuesFieldIndex,omitempty"`
 }
 
 // NewBTMSuppressionStateConfigured2598 instantiates a new BTMSuppressionStateConfigured2598 object
@@ -206,7 +207,7 @@ func (o *BTMSuppressionStateConfigured2598) SetValuesFieldIndex(v int32) {
 }
 
 func (o BTMSuppressionStateConfigured2598) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTMSuppressionStateConfigured2598) MarshalJSON() ([]byte, error) {
 
 func (o BTMSuppressionStateConfigured2598) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMSuppressionState1924, errBTMSuppressionState1924 := json.Marshal(o.BTMSuppressionState1924)
+	if errBTMSuppressionState1924 != nil {
+		return map[string]interface{}{}, errBTMSuppressionState1924
+	}
+	errBTMSuppressionState1924 = json.Unmarshal([]byte(serializedBTMSuppressionState1924), &toSerialize)
+	if errBTMSuppressionState1924 != nil {
+		return map[string]interface{}{}, errBTMSuppressionState1924
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTMSuppressionStateConfigured2598) UnmarshalJSON(src []byte) er
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_units_default_160.go b/onshape/model_btm_units_default_160.go
index 18d622292..39da279d7 100644
--- a/onshape/model_btm_units_default_160.go
+++ b/onshape/model_btm_units_default_160.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTMUnitsDefault160{}
 
 // BTMUnitsDefault160 struct for BTMUnitsDefault160
 type BTMUnitsDefault160 struct {
+	BTMNode-19
 	// Type of JSON object.
-	BtType *string            `json:"btType,omitempty"`
-	Units  *map[string]string `json:"units,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Units *map[string]string `json:"units,omitempty"`
 }
 
 // NewBTMUnitsDefault160 instantiates a new BTMUnitsDefault160 object
@@ -107,7 +108,7 @@ func (o *BTMUnitsDefault160) SetUnits(v map[string]string) {
 }
 
 func (o BTMUnitsDefault160) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMUnitsDefault160) MarshalJSON() ([]byte, error) {
 
 func (o BTMUnitsDefault160) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMNode19, errBTMNode19 := json.Marshal(o.BTMNode19)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
+	errBTMNode19 = json.Unmarshal([]byte(serializedBTMNode19), &toSerialize)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMUnitsDefault160) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_user_code_161.go b/onshape/model_btm_user_code_161.go
index 573dd7ecb..381432a6c 100644
--- a/onshape/model_btm_user_code_161.go
+++ b/onshape/model_btm_user_code_161.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTMUserCode161{}
 
 // BTMUserCode161 struct for BTMUserCode161
 type BTMUserCode161 struct {
+	BTMNode-19
 	// Type of JSON object.
-	BtType    *string          `json:"btType,omitempty"`
-	Parsed    *BTPStatement269 `json:"parsed,omitempty"`
-	Statement *string          `json:"statement,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Parsed *BTPStatement269 `json:"parsed,omitempty"`
+	Statement *string `json:"statement,omitempty"`
 }
 
 // NewBTMUserCode161 instantiates a new BTMUserCode161 object
@@ -140,7 +141,7 @@ func (o *BTMUserCode161) SetStatement(v string) {
 }
 
 func (o BTMUserCode161) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTMUserCode161) MarshalJSON() ([]byte, error) {
 
 func (o BTMUserCode161) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMNode19, errBTMNode19 := json.Marshal(o.BTMNode19)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
+	errBTMNode19 = json.Unmarshal([]byte(serializedBTMNode19), &toSerialize)
+	if errBTMNode19 != nil {
+		return map[string]interface{}{}, errBTMNode19
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTMUserCode161) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btm_variable_studio_reference_2764.go b/onshape/model_btm_variable_studio_reference_2764.go
index 83d280d80..166d7df92 100644
--- a/onshape/model_btm_variable_studio_reference_2764.go
+++ b/onshape/model_btm_variable_studio_reference_2764.go
@@ -20,23 +20,24 @@ var _ MappedNullable = &BTMVariableStudioReference2764{}
 
 // BTMVariableStudioReference2764 struct for BTMVariableStudioReference2764
 type BTMVariableStudioReference2764 struct {
+	BTMFeature-134
 	// Type of JSON object.
-	BtType                 *string                                     `json:"btType,omitempty"`
-	ApiConfiguration       *BTApiConfiguration                         `json:"apiConfiguration,omitempty"`
-	Configuration          []BTMParameter1                             `json:"configuration,omitempty"`
-	DocumentId             *string                                     `json:"documentId,omitempty"`
-	ElementId              *string                                     `json:"elementId,omitempty"`
-	EntireVariableStudio   *bool                                       `json:"entireVariableStudio,omitempty"`
-	IsAutomatic            *bool                                       `json:"isAutomatic,omitempty"`
-	MicroversionId         *BTMicroversionId366                        `json:"microversionId,omitempty"`
-	PartialReference       *bool                                       `json:"partialReference,omitempty"`
-	ReferenceId            *string                                     `json:"referenceId,omitempty"`
-	ReferenceNamespace     *string                                     `json:"referenceNamespace,omitempty"`
-	ReferenceParameter     *BTMParameterReferenceWithConfiguration3028 `json:"referenceParameter,omitempty"`
-	UnsetAutomaticEdit     *BTTreeEdit13                               `json:"unsetAutomaticEdit,omitempty"`
-	ValidRevisionReference *bool                                       `json:"validRevisionReference,omitempty"`
-	VariableNames          []string                                    `json:"variableNames,omitempty"`
-	VersionId              *string                                     `json:"versionId,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	ApiConfiguration *BTApiConfiguration `json:"apiConfiguration,omitempty"`
+	Configuration []BTMParameter1 `json:"configuration,omitempty"`
+	DocumentId *string `json:"documentId,omitempty"`
+	ElementId *string `json:"elementId,omitempty"`
+	EntireVariableStudio *bool `json:"entireVariableStudio,omitempty"`
+	IsAutomatic *bool `json:"isAutomatic,omitempty"`
+	MicroversionId *BTMicroversionId366 `json:"microversionId,omitempty"`
+	PartialReference *bool `json:"partialReference,omitempty"`
+	ReferenceId *string `json:"referenceId,omitempty"`
+	ReferenceNamespace *string `json:"referenceNamespace,omitempty"`
+	ReferenceParameter *BTMParameterReferenceWithConfiguration3028 `json:"referenceParameter,omitempty"`
+	UnsetAutomaticEdit *BTTreeEdit13 `json:"unsetAutomaticEdit,omitempty"`
+	ValidRevisionReference *bool `json:"validRevisionReference,omitempty"`
+	VariableNames []string `json:"variableNames,omitempty"`
+	VersionId *string `json:"versionId,omitempty"`
 }
 
 // NewBTMVariableStudioReference2764 instantiates a new BTMVariableStudioReference2764 object
@@ -569,7 +570,7 @@ func (o *BTMVariableStudioReference2764) SetVersionId(v string) {
 }
 
 func (o BTMVariableStudioReference2764) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -578,6 +579,14 @@ func (o BTMVariableStudioReference2764) MarshalJSON() ([]byte, error) {
 
 func (o BTMVariableStudioReference2764) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMFeature134, errBTMFeature134 := json.Marshal(o.BTMFeature134)
+	if errBTMFeature134 != nil {
+		return map[string]interface{}{}, errBTMFeature134
+	}
+	errBTMFeature134 = json.Unmarshal([]byte(serializedBTMFeature134), &toSerialize)
+	if errBTMFeature134 != nil {
+		return map[string]interface{}{}, errBTMFeature134
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -664,3 +673,5 @@ func (v *NullableBTMVariableStudioReference2764) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btmin_context_query_2254.go b/onshape/model_btmin_context_query_2254.go
index 46bcfc0a8..c15ee9a23 100644
--- a/onshape/model_btmin_context_query_2254.go
+++ b/onshape/model_btmin_context_query_2254.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTMInContextQuery2254{}
 
 // BTMInContextQuery2254 struct for BTMInContextQuery2254
 type BTMInContextQuery2254 struct {
+	BTMIndividualQueryBase-139
 	// Type of JSON object.
-	BtType *string  `json:"btType,omitempty"`
-	Path   []string `json:"path,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Path []string `json:"path,omitempty"`
 }
 
 // NewBTMInContextQuery2254 instantiates a new BTMInContextQuery2254 object
@@ -107,7 +108,7 @@ func (o *BTMInContextQuery2254) SetPath(v []string) {
 }
 
 func (o BTMInContextQuery2254) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTMInContextQuery2254) MarshalJSON() ([]byte, error) {
 
 func (o BTMInContextQuery2254) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTMIndividualQueryBase139, errBTMIndividualQueryBase139 := json.Marshal(o.BTMIndividualQueryBase139)
+	if errBTMIndividualQueryBase139 != nil {
+		return map[string]interface{}{}, errBTMIndividualQueryBase139
+	}
+	errBTMIndividualQueryBase139 = json.Unmarshal([]byte(serializedBTMIndividualQueryBase139), &toSerialize)
+	if errBTMIndividualQueryBase139 != nil {
+		return map[string]interface{}{}, errBTMIndividualQueryBase139
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTMInContextQuery2254) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btor_filter_167.go b/onshape/model_btor_filter_167.go
index 7ddcaaa09..08daeea90 100644
--- a/onshape/model_btor_filter_167.go
+++ b/onshape/model_btor_filter_167.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTOrFilter167{}
 
 // BTOrFilter167 struct for BTOrFilter167
 type BTOrFilter167 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType   *string           `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Operand1 *BTQueryFilter183 `json:"operand1,omitempty"`
 	Operand2 *BTQueryFilter183 `json:"operand2,omitempty"`
 }
@@ -140,7 +141,7 @@ func (o *BTOrFilter167) SetOperand2(v BTQueryFilter183) {
 }
 
 func (o BTOrFilter167) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTOrFilter167) MarshalJSON() ([]byte, error) {
 
 func (o BTOrFilter167) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTOrFilter167) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_conversion_function_1362.go b/onshape/model_btp_conversion_function_1362.go
index 0fd8b32f5..bb1544af0 100644
--- a/onshape/model_btp_conversion_function_1362.go
+++ b/onshape/model_btp_conversion_function_1362.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTPConversionFunction1362{}
 
 // BTPConversionFunction1362 struct for BTPConversionFunction1362
 type BTPConversionFunction1362 struct {
+	BTPProcedureDeclarationBase-266
 	// Type of JSON object.
-	BtType         *string              `json:"btType,omitempty"`
-	From           *BTPLiteralNumber258 `json:"from,omitempty"`
-	SpaceAfterType *BTPSpace10          `json:"spaceAfterType,omitempty"`
-	To             *BTPLiteralNumber258 `json:"to,omitempty"`
-	TypeName       *BTPIdentifier8      `json:"typeName,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	From *BTPLiteralNumber258 `json:"from,omitempty"`
+	SpaceAfterType *BTPSpace10 `json:"spaceAfterType,omitempty"`
+	To *BTPLiteralNumber258 `json:"to,omitempty"`
+	TypeName *BTPIdentifier8 `json:"typeName,omitempty"`
 }
 
 // NewBTPConversionFunction1362 instantiates a new BTPConversionFunction1362 object
@@ -206,7 +207,7 @@ func (o *BTPConversionFunction1362) SetTypeName(v BTPIdentifier8) {
 }
 
 func (o BTPConversionFunction1362) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTPConversionFunction1362) MarshalJSON() ([]byte, error) {
 
 func (o BTPConversionFunction1362) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPProcedureDeclarationBase266, errBTPProcedureDeclarationBase266 := json.Marshal(o.BTPProcedureDeclarationBase266)
+	if errBTPProcedureDeclarationBase266 != nil {
+		return map[string]interface{}{}, errBTPProcedureDeclarationBase266
+	}
+	errBTPProcedureDeclarationBase266 = json.Unmarshal([]byte(serializedBTPProcedureDeclarationBase266), &toSerialize)
+	if errBTPProcedureDeclarationBase266 != nil {
+		return map[string]interface{}{}, errBTPProcedureDeclarationBase266
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTPConversionFunction1362) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_expression_access_237.go b/onshape/model_btp_expression_access_237.go
index 56e7f551f..a640225fb 100644
--- a/onshape/model_btp_expression_access_237.go
+++ b/onshape/model_btp_expression_access_237.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTPExpressionAccess237{}
 
 // BTPExpressionAccess237 struct for BTPExpressionAccess237
 type BTPExpressionAccess237 struct {
+	BTPExpression-9
 	// Type of JSON object.
-	BtType          *string                `json:"btType,omitempty"`
-	Accessor        *BTPPropertyAccessor23 `json:"accessor,omitempty"`
-	Base            *BTPExpression9        `json:"base,omitempty"`
-	SpaceInAccessor *BTPSpace10            `json:"spaceInAccessor,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Accessor *BTPPropertyAccessor23 `json:"accessor,omitempty"`
+	Base *BTPExpression9 `json:"base,omitempty"`
+	SpaceInAccessor *BTPSpace10 `json:"spaceInAccessor,omitempty"`
 }
 
 // NewBTPExpressionAccess237 instantiates a new BTPExpressionAccess237 object
@@ -173,7 +174,7 @@ func (o *BTPExpressionAccess237) SetSpaceInAccessor(v BTPSpace10) {
 }
 
 func (o BTPExpressionAccess237) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTPExpressionAccess237) MarshalJSON() ([]byte, error) {
 
 func (o BTPExpressionAccess237) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
+	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTPExpressionAccess237) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_expression_as_238.go b/onshape/model_btp_expression_as_238.go
index a49eb3230..912da2192 100644
--- a/onshape/model_btp_expression_as_238.go
+++ b/onshape/model_btp_expression_as_238.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTPExpressionAs238{}
 
 // BTPExpressionAs238 struct for BTPExpressionAs238
 type BTPExpressionAs238 struct {
+	BTPExpression-9
 	// Type of JSON object.
-	BtType   *string         `json:"btType,omitempty"`
-	Operand  *BTPExpression9 `json:"operand,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Operand *BTPExpression9 `json:"operand,omitempty"`
 	TypeName *BTPTypeName290 `json:"typeName,omitempty"`
 }
 
@@ -140,7 +141,7 @@ func (o *BTPExpressionAs238) SetTypeName(v BTPTypeName290) {
 }
 
 func (o BTPExpressionAs238) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTPExpressionAs238) MarshalJSON() ([]byte, error) {
 
 func (o BTPExpressionAs238) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
+	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTPExpressionAs238) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_expression_builtin_call_239.go b/onshape/model_btp_expression_builtin_call_239.go
index d25821545..10f139523 100644
--- a/onshape/model_btp_expression_builtin_call_239.go
+++ b/onshape/model_btp_expression_builtin_call_239.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTPExpressionBuiltinCall239{}
 
 // BTPExpressionBuiltinCall239 struct for BTPExpressionBuiltinCall239
 type BTPExpressionBuiltinCall239 struct {
+	BTPExpression-9
 	// Type of JSON object.
-	BtType           *string                  `json:"btType,omitempty"`
-	Arguments        []BTPExpression9         `json:"arguments,omitempty"`
-	Name             *BTPBuiltinIdentifier233 `json:"name,omitempty"`
-	SpaceInEmptyList *BTPSpace10              `json:"spaceInEmptyList,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Arguments []BTPExpression9 `json:"arguments,omitempty"`
+	Name *BTPBuiltinIdentifier233 `json:"name,omitempty"`
+	SpaceInEmptyList *BTPSpace10 `json:"spaceInEmptyList,omitempty"`
 }
 
 // NewBTPExpressionBuiltinCall239 instantiates a new BTPExpressionBuiltinCall239 object
@@ -173,7 +174,7 @@ func (o *BTPExpressionBuiltinCall239) SetSpaceInEmptyList(v BTPSpace10) {
 }
 
 func (o BTPExpressionBuiltinCall239) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTPExpressionBuiltinCall239) MarshalJSON() ([]byte, error) {
 
 func (o BTPExpressionBuiltinCall239) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
+	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTPExpressionBuiltinCall239) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_expression_call_240.go b/onshape/model_btp_expression_call_240.go
index 2c2d3f410..97ccebab9 100644
--- a/onshape/model_btp_expression_call_240.go
+++ b/onshape/model_btp_expression_call_240.go
@@ -20,13 +20,14 @@ var _ MappedNullable = &BTPExpressionCall240{}
 
 // BTPExpressionCall240 struct for BTPExpressionCall240
 type BTPExpressionCall240 struct {
+	BTPExpression-9
 	// Type of JSON object.
-	BtType             *string         `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	FunctionExpression *BTPExpression9 `json:"functionExpression,omitempty"`
-	FunctionName       *BTPName261     `json:"functionName,omitempty"`
-	FunctionNameString *string         `json:"functionNameString,omitempty"`
-	IsArrowCall        *bool           `json:"isArrowCall,omitempty"`
-	SpaceInEmptyList   *BTPSpace10     `json:"spaceInEmptyList,omitempty"`
+	FunctionName *BTPName261 `json:"functionName,omitempty"`
+	FunctionNameString *string `json:"functionNameString,omitempty"`
+	IsArrowCall *bool `json:"isArrowCall,omitempty"`
+	SpaceInEmptyList *BTPSpace10 `json:"spaceInEmptyList,omitempty"`
 }
 
 // NewBTPExpressionCall240 instantiates a new BTPExpressionCall240 object
@@ -239,7 +240,7 @@ func (o *BTPExpressionCall240) SetSpaceInEmptyList(v BTPSpace10) {
 }
 
 func (o BTPExpressionCall240) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -248,6 +249,14 @@ func (o BTPExpressionCall240) MarshalJSON() ([]byte, error) {
 
 func (o BTPExpressionCall240) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
+	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -304,3 +313,5 @@ func (v *NullableBTPExpressionCall240) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_expression_function_1325.go b/onshape/model_btp_expression_function_1325.go
index 7240120e8..354d804df 100644
--- a/onshape/model_btp_expression_function_1325.go
+++ b/onshape/model_btp_expression_function_1325.go
@@ -20,15 +20,16 @@ var _ MappedNullable = &BTPExpressionFunction1325{}
 
 // BTPExpressionFunction1325 struct for BTPExpressionFunction1325
 type BTPExpressionFunction1325 struct {
+	BTPExpression-9
 	// Type of JSON object.
-	BtType             *string                     `json:"btType,omitempty"`
-	Arguments          []BTPArgumentDeclaration232 `json:"arguments,omitempty"`
-	Body               *BTPStatementBlock271       `json:"body,omitempty"`
-	Precondition       *BTPStatement269            `json:"precondition,omitempty"`
-	ReturnType         *BTPTypeName290             `json:"returnType,omitempty"`
-	SpaceAfterArglist  *BTPSpace10                 `json:"spaceAfterArglist,omitempty"`
-	SpaceAfterFunction *BTPSpace10                 `json:"spaceAfterFunction,omitempty"`
-	SpaceInEmptyList   *BTPSpace10                 `json:"spaceInEmptyList,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Arguments []BTPArgumentDeclaration232 `json:"arguments,omitempty"`
+	Body *BTPStatementBlock271 `json:"body,omitempty"`
+	Precondition *BTPStatement269 `json:"precondition,omitempty"`
+	ReturnType *BTPTypeName290 `json:"returnType,omitempty"`
+	SpaceAfterArglist *BTPSpace10 `json:"spaceAfterArglist,omitempty"`
+	SpaceAfterFunction *BTPSpace10 `json:"spaceAfterFunction,omitempty"`
+	SpaceInEmptyList *BTPSpace10 `json:"spaceInEmptyList,omitempty"`
 }
 
 // NewBTPExpressionFunction1325 instantiates a new BTPExpressionFunction1325 object
@@ -305,7 +306,7 @@ func (o *BTPExpressionFunction1325) SetSpaceInEmptyList(v BTPSpace10) {
 }
 
 func (o BTPExpressionFunction1325) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -314,6 +315,14 @@ func (o BTPExpressionFunction1325) MarshalJSON() ([]byte, error) {
 
 func (o BTPExpressionFunction1325) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
+	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -376,3 +385,5 @@ func (v *NullableBTPExpressionFunction1325) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_expression_group_241.go b/onshape/model_btp_expression_group_241.go
index 657d07f26..d7aa5d432 100644
--- a/onshape/model_btp_expression_group_241.go
+++ b/onshape/model_btp_expression_group_241.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTPExpressionGroup241{}
 
 // BTPExpressionGroup241 struct for BTPExpressionGroup241
 type BTPExpressionGroup241 struct {
+	BTPExpression-9
 	// Type of JSON object.
-	BtType  *string         `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Content *BTPExpression9 `json:"content,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTPExpressionGroup241) SetContent(v BTPExpression9) {
 }
 
 func (o BTPExpressionGroup241) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPExpressionGroup241) MarshalJSON() ([]byte, error) {
 
 func (o BTPExpressionGroup241) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
+	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPExpressionGroup241) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_expression_is_242.go b/onshape/model_btp_expression_is_242.go
index 8d0900e21..7afa1cc8f 100644
--- a/onshape/model_btp_expression_is_242.go
+++ b/onshape/model_btp_expression_is_242.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTPExpressionIs242{}
 
 // BTPExpressionIs242 struct for BTPExpressionIs242
 type BTPExpressionIs242 struct {
+	BTPExpression-9
 	// Type of JSON object.
-	BtType   *string         `json:"btType,omitempty"`
-	Operand  *BTPExpression9 `json:"operand,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Operand *BTPExpression9 `json:"operand,omitempty"`
 	TypeName *BTPTypeName290 `json:"typeName,omitempty"`
 }
 
@@ -140,7 +141,7 @@ func (o *BTPExpressionIs242) SetTypeName(v BTPTypeName290) {
 }
 
 func (o BTPExpressionIs242) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTPExpressionIs242) MarshalJSON() ([]byte, error) {
 
 func (o BTPExpressionIs242) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
+	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTPExpressionIs242) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_expression_new_243.go b/onshape/model_btp_expression_new_243.go
index b9e86373c..cf306db73 100644
--- a/onshape/model_btp_expression_new_243.go
+++ b/onshape/model_btp_expression_new_243.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTPExpressionNew243{}
 
 // BTPExpressionNew243 struct for BTPExpressionNew243
 type BTPExpressionNew243 struct {
+	BTPExpression-9
 	// Type of JSON object.
-	BtType             *string         `json:"btType,omitempty"`
-	SpaceAfterBox      *BTPSpace10     `json:"spaceAfterBox,omitempty"`
-	SpaceBetweenNewBox *BTPSpace10     `json:"spaceBetweenNewBox,omitempty"`
-	Value              *BTPExpression9 `json:"value,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	SpaceAfterBox *BTPSpace10 `json:"spaceAfterBox,omitempty"`
+	SpaceBetweenNewBox *BTPSpace10 `json:"spaceBetweenNewBox,omitempty"`
+	Value *BTPExpression9 `json:"value,omitempty"`
 }
 
 // NewBTPExpressionNew243 instantiates a new BTPExpressionNew243 object
@@ -173,7 +174,7 @@ func (o *BTPExpressionNew243) SetValue(v BTPExpression9) {
 }
 
 func (o BTPExpressionNew243) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTPExpressionNew243) MarshalJSON() ([]byte, error) {
 
 func (o BTPExpressionNew243) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
+	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTPExpressionNew243) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_expression_operator_244.go b/onshape/model_btp_expression_operator_244.go
index 0167b7fe7..d3321c288 100644
--- a/onshape/model_btp_expression_operator_244.go
+++ b/onshape/model_btp_expression_operator_244.go
@@ -20,21 +20,22 @@ var _ MappedNullable = &BTPExpressionOperator244{}
 
 // BTPExpressionOperator244 struct for BTPExpressionOperator244
 type BTPExpressionOperator244 struct {
+	BTPExpression-9
 	// Type of JSON object.
-	BtType          *string `json:"btType,omitempty"`
-	ForExport       *bool   `json:"forExport,omitempty"`
-	GlobalNamespace *bool   `json:"globalNamespace,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	ForExport *bool `json:"forExport,omitempty"`
+	GlobalNamespace *bool `json:"globalNamespace,omitempty"`
 	// Element microversion that is being imported.
-	ImportMicroversion    *string          `json:"importMicroversion,omitempty"`
-	Namespace             []BTPIdentifier8 `json:"namespace,omitempty"`
-	Operand1              *BTPExpression9  `json:"operand1,omitempty"`
-	Operand2              *BTPExpression9  `json:"operand2,omitempty"`
-	Operand3              *BTPExpression9  `json:"operand3,omitempty"`
-	Operator              *GBTPOperator    `json:"operator,omitempty"`
-	SpaceAfterNamespace   *BTPSpace10      `json:"spaceAfterNamespace,omitempty"`
-	SpaceAfterOperator    *BTPSpace10      `json:"spaceAfterOperator,omitempty"`
-	SpaceBeforeOperator   *BTPSpace10      `json:"spaceBeforeOperator,omitempty"`
-	WrittenAsFunctionCall *bool            `json:"writtenAsFunctionCall,omitempty"`
+	ImportMicroversion *string `json:"importMicroversion,omitempty"`
+	Namespace []BTPIdentifier8 `json:"namespace,omitempty"`
+	Operand1 *BTPExpression9 `json:"operand1,omitempty"`
+	Operand2 *BTPExpression9 `json:"operand2,omitempty"`
+	Operand3 *BTPExpression9 `json:"operand3,omitempty"`
+	Operator *GBTPOperator `json:"operator,omitempty"`
+	SpaceAfterNamespace *BTPSpace10 `json:"spaceAfterNamespace,omitempty"`
+	SpaceAfterOperator *BTPSpace10 `json:"spaceAfterOperator,omitempty"`
+	SpaceBeforeOperator *BTPSpace10 `json:"spaceBeforeOperator,omitempty"`
+	WrittenAsFunctionCall *bool `json:"writtenAsFunctionCall,omitempty"`
 }
 
 // NewBTPExpressionOperator244 instantiates a new BTPExpressionOperator244 object
@@ -471,7 +472,7 @@ func (o *BTPExpressionOperator244) SetWrittenAsFunctionCall(v bool) {
 }
 
 func (o BTPExpressionOperator244) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -480,6 +481,14 @@ func (o BTPExpressionOperator244) MarshalJSON() ([]byte, error) {
 
 func (o BTPExpressionOperator244) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
+	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -557,3 +566,5 @@ func (v *NullableBTPExpressionOperator244) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_expression_switch_2632.go b/onshape/model_btp_expression_switch_2632.go
index 08bc03f08..bd6a1be01 100644
--- a/onshape/model_btp_expression_switch_2632.go
+++ b/onshape/model_btp_expression_switch_2632.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTPExpressionSwitch2632{}
 
 // BTPExpressionSwitch2632 struct for BTPExpressionSwitch2632
 type BTPExpressionSwitch2632 struct {
+	BTPExpression-9
 	// Type of JSON object.
-	BtType           *string           `json:"btType,omitempty"`
-	Choices          *BTPLiteralMap256 `json:"choices,omitempty"`
-	Selector         *BTPExpression9   `json:"selector,omitempty"`
-	SpaceAfterSwitch *BTPSpace10       `json:"spaceAfterSwitch,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Choices *BTPLiteralMap256 `json:"choices,omitempty"`
+	Selector *BTPExpression9 `json:"selector,omitempty"`
+	SpaceAfterSwitch *BTPSpace10 `json:"spaceAfterSwitch,omitempty"`
 }
 
 // NewBTPExpressionSwitch2632 instantiates a new BTPExpressionSwitch2632 object
@@ -173,7 +174,7 @@ func (o *BTPExpressionSwitch2632) SetSpaceAfterSwitch(v BTPSpace10) {
 }
 
 func (o BTPExpressionSwitch2632) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTPExpressionSwitch2632) MarshalJSON() ([]byte, error) {
 
 func (o BTPExpressionSwitch2632) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
+	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTPExpressionSwitch2632) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_expression_try_1271.go b/onshape/model_btp_expression_try_1271.go
index 567aab1c6..a91296a60 100644
--- a/onshape/model_btp_expression_try_1271.go
+++ b/onshape/model_btp_expression_try_1271.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTPExpressionTry1271{}
 
 // BTPExpressionTry1271 struct for BTPExpressionTry1271
 type BTPExpressionTry1271 struct {
+	BTPExpression-9
 	// Type of JSON object.
-	BtType           *string         `json:"btType,omitempty"`
-	Expression       *BTPExpression9 `json:"expression,omitempty"`
-	Silent           *bool           `json:"silent,omitempty"`
-	SpaceAfterSilent *BTPSpace10     `json:"spaceAfterSilent,omitempty"`
-	SpaceAfterTry    *BTPSpace10     `json:"spaceAfterTry,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Expression *BTPExpression9 `json:"expression,omitempty"`
+	Silent *bool `json:"silent,omitempty"`
+	SpaceAfterSilent *BTPSpace10 `json:"spaceAfterSilent,omitempty"`
+	SpaceAfterTry *BTPSpace10 `json:"spaceAfterTry,omitempty"`
 }
 
 // NewBTPExpressionTry1271 instantiates a new BTPExpressionTry1271 object
@@ -206,7 +207,7 @@ func (o *BTPExpressionTry1271) SetSpaceAfterTry(v BTPSpace10) {
 }
 
 func (o BTPExpressionTry1271) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTPExpressionTry1271) MarshalJSON() ([]byte, error) {
 
 func (o BTPExpressionTry1271) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
+	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTPExpressionTry1271) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_expression_var_reference_245.go b/onshape/model_btp_expression_var_reference_245.go
index f7ca33e8d..fda273585 100644
--- a/onshape/model_btp_expression_var_reference_245.go
+++ b/onshape/model_btp_expression_var_reference_245.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTPExpressionVarReference245{}
 
 // BTPExpressionVarReference245 struct for BTPExpressionVarReference245
 type BTPExpressionVarReference245 struct {
+	BTPExpression-9
 	// Type of JSON object.
-	BtType *string     `json:"btType,omitempty"`
-	Name   *BTPName261 `json:"name,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Name *BTPName261 `json:"name,omitempty"`
 }
 
 // NewBTPExpressionVarReference245 instantiates a new BTPExpressionVarReference245 object
@@ -107,7 +108,7 @@ func (o *BTPExpressionVarReference245) SetName(v BTPName261) {
 }
 
 func (o BTPExpressionVarReference245) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPExpressionVarReference245) MarshalJSON() ([]byte, error) {
 
 func (o BTPExpressionVarReference245) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
+	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPExpressionVarReference245) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_function_or_predicate_declaration_247.go b/onshape/model_btp_function_or_predicate_declaration_247.go
index 09db5fb97..fb72866bb 100644
--- a/onshape/model_btp_function_or_predicate_declaration_247.go
+++ b/onshape/model_btp_function_or_predicate_declaration_247.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTPFunctionOrPredicateDeclaration247{}
 
 // BTPFunctionOrPredicateDeclaration247 struct for BTPFunctionOrPredicateDeclaration247
 type BTPFunctionOrPredicateDeclaration247 struct {
+	BTPProcedureDeclarationBase-266
 	// Type of JSON object.
-	BtType *string         `json:"btType,omitempty"`
-	Name   *BTPIdentifier8 `json:"name,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Name *BTPIdentifier8 `json:"name,omitempty"`
 }
 
 // NewBTPFunctionOrPredicateDeclaration247 instantiates a new BTPFunctionOrPredicateDeclaration247 object
@@ -107,7 +108,7 @@ func (o *BTPFunctionOrPredicateDeclaration247) SetName(v BTPIdentifier8) {
 }
 
 func (o BTPFunctionOrPredicateDeclaration247) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPFunctionOrPredicateDeclaration247) MarshalJSON() ([]byte, error) {
 
 func (o BTPFunctionOrPredicateDeclaration247) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPProcedureDeclarationBase266, errBTPProcedureDeclarationBase266 := json.Marshal(o.BTPProcedureDeclarationBase266)
+	if errBTPProcedureDeclarationBase266 != nil {
+		return map[string]interface{}{}, errBTPProcedureDeclarationBase266
+	}
+	errBTPProcedureDeclarationBase266 = json.Unmarshal([]byte(serializedBTPProcedureDeclarationBase266), &toSerialize)
+	if errBTPProcedureDeclarationBase266 != nil {
+		return map[string]interface{}{}, errBTPProcedureDeclarationBase266
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPFunctionOrPredicateDeclaration247) UnmarshalJSON(src []byte)
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_identifier_8.go b/onshape/model_btp_identifier_8.go
index 0fccdacd3..3de1e8e60 100644
--- a/onshape/model_btp_identifier_8.go
+++ b/onshape/model_btp_identifier_8.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTPIdentifier8{}
 
 // BTPIdentifier8 struct for BTPIdentifier8
 type BTPIdentifier8 struct {
+	BTPPropertyAccessor-23
 	// Type of JSON object.
-	BtType                   *string `json:"btType,omitempty"`
-	Identifier               *string `json:"identifier,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Identifier *string `json:"identifier,omitempty"`
 	InvalidIdentifierForTest *string `json:"invalidIdentifierForTest,omitempty"`
 }
 
@@ -140,7 +141,7 @@ func (o *BTPIdentifier8) SetInvalidIdentifierForTest(v string) {
 }
 
 func (o BTPIdentifier8) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTPIdentifier8) MarshalJSON() ([]byte, error) {
 
 func (o BTPIdentifier8) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPPropertyAccessor23, errBTPPropertyAccessor23 := json.Marshal(o.BTPPropertyAccessor23)
+	if errBTPPropertyAccessor23 != nil {
+		return map[string]interface{}{}, errBTPPropertyAccessor23
+	}
+	errBTPPropertyAccessor23 = json.Unmarshal([]byte(serializedBTPPropertyAccessor23), &toSerialize)
+	if errBTPPropertyAccessor23 != nil {
+		return map[string]interface{}{}, errBTPPropertyAccessor23
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTPIdentifier8) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_literal_253.go b/onshape/model_btp_literal_253.go
index 474ab1e52..df53e15b8 100644
--- a/onshape/model_btp_literal_253.go
+++ b/onshape/model_btp_literal_253.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTPLiteral253{}
 
 // BTPLiteral253 struct for BTPLiteral253
 type BTPLiteral253 struct {
+	BTPExpression-9
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTPLiteral253) SetBtType(v string) {
 }
 
 func (o BTPLiteral253) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTPLiteral253) MarshalJSON() ([]byte, error) {
 
 func (o BTPLiteral253) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPExpression9, errBTPExpression9 := json.Marshal(o.BTPExpression9)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
+	errBTPExpression9 = json.Unmarshal([]byte(serializedBTPExpression9), &toSerialize)
+	if errBTPExpression9 != nil {
+		return map[string]interface{}{}, errBTPExpression9
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTPLiteral253) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_literal_array_254.go b/onshape/model_btp_literal_array_254.go
index 61d735bc4..635471fd2 100644
--- a/onshape/model_btp_literal_array_254.go
+++ b/onshape/model_btp_literal_array_254.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTPLiteralArray254{}
 
 // BTPLiteralArray254 struct for BTPLiteralArray254
 type BTPLiteralArray254 struct {
+	BTPLiteral-253
 	// Type of JSON object.
-	BtType           *string     `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	SpaceInEmptyList *BTPSpace10 `json:"spaceInEmptyList,omitempty"`
-	TrailingComma    *bool       `json:"trailingComma,omitempty"`
+	TrailingComma *bool `json:"trailingComma,omitempty"`
 }
 
 // NewBTPLiteralArray254 instantiates a new BTPLiteralArray254 object
@@ -140,7 +141,7 @@ func (o *BTPLiteralArray254) SetTrailingComma(v bool) {
 }
 
 func (o BTPLiteralArray254) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTPLiteralArray254) MarshalJSON() ([]byte, error) {
 
 func (o BTPLiteralArray254) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPLiteral253, errBTPLiteral253 := json.Marshal(o.BTPLiteral253)
+	if errBTPLiteral253 != nil {
+		return map[string]interface{}{}, errBTPLiteral253
+	}
+	errBTPLiteral253 = json.Unmarshal([]byte(serializedBTPLiteral253), &toSerialize)
+	if errBTPLiteral253 != nil {
+		return map[string]interface{}{}, errBTPLiteral253
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTPLiteralArray254) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_literal_boolean_255.go b/onshape/model_btp_literal_boolean_255.go
index 9bcf19e63..33c8fd64d 100644
--- a/onshape/model_btp_literal_boolean_255.go
+++ b/onshape/model_btp_literal_boolean_255.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTPLiteralBoolean255{}
 
 // BTPLiteralBoolean255 struct for BTPLiteralBoolean255
 type BTPLiteralBoolean255 struct {
+	BTPLiteral-253
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
-	Value  *bool   `json:"value,omitempty"`
+	Value *bool `json:"value,omitempty"`
 }
 
 // NewBTPLiteralBoolean255 instantiates a new BTPLiteralBoolean255 object
@@ -107,7 +108,7 @@ func (o *BTPLiteralBoolean255) SetValue(v bool) {
 }
 
 func (o BTPLiteralBoolean255) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPLiteralBoolean255) MarshalJSON() ([]byte, error) {
 
 func (o BTPLiteralBoolean255) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPLiteral253, errBTPLiteral253 := json.Marshal(o.BTPLiteral253)
+	if errBTPLiteral253 != nil {
+		return map[string]interface{}{}, errBTPLiteral253
+	}
+	errBTPLiteral253 = json.Unmarshal([]byte(serializedBTPLiteral253), &toSerialize)
+	if errBTPLiteral253 != nil {
+		return map[string]interface{}{}, errBTPLiteral253
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPLiteralBoolean255) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_literal_number_258.go b/onshape/model_btp_literal_number_258.go
index dd69c3c79..918a86b37 100644
--- a/onshape/model_btp_literal_number_258.go
+++ b/onshape/model_btp_literal_number_258.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTPLiteralNumber258{}
 
 // BTPLiteralNumber258 struct for BTPLiteralNumber258
 type BTPLiteralNumber258 struct {
+	BTPLiteral-253
 	// Type of JSON object.
-	BtType  *string  `json:"btType,omitempty"`
-	Integer *bool    `json:"integer,omitempty"`
-	Text    *string  `json:"text,omitempty"`
-	Value   *float64 `json:"value,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Integer *bool `json:"integer,omitempty"`
+	Text *string `json:"text,omitempty"`
+	Value *float64 `json:"value,omitempty"`
 }
 
 // NewBTPLiteralNumber258 instantiates a new BTPLiteralNumber258 object
@@ -173,7 +174,7 @@ func (o *BTPLiteralNumber258) SetValue(v float64) {
 }
 
 func (o BTPLiteralNumber258) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTPLiteralNumber258) MarshalJSON() ([]byte, error) {
 
 func (o BTPLiteralNumber258) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPLiteral253, errBTPLiteral253 := json.Marshal(o.BTPLiteral253)
+	if errBTPLiteral253 != nil {
+		return map[string]interface{}{}, errBTPLiteral253
+	}
+	errBTPLiteral253 = json.Unmarshal([]byte(serializedBTPLiteral253), &toSerialize)
+	if errBTPLiteral253 != nil {
+		return map[string]interface{}{}, errBTPLiteral253
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTPLiteralNumber258) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_literal_string_259.go b/onshape/model_btp_literal_string_259.go
index 7aad394ea..77943b9af 100644
--- a/onshape/model_btp_literal_string_259.go
+++ b/onshape/model_btp_literal_string_259.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTPLiteralString259{}
 
 // BTPLiteralString259 struct for BTPLiteralString259
 type BTPLiteralString259 struct {
+	BTPLiteral-253
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
-	Text   *string `json:"text,omitempty"`
-	Value  *string `json:"value,omitempty"`
+	Text *string `json:"text,omitempty"`
+	Value *string `json:"value,omitempty"`
 }
 
 // NewBTPLiteralString259 instantiates a new BTPLiteralString259 object
@@ -140,7 +141,7 @@ func (o *BTPLiteralString259) SetValue(v string) {
 }
 
 func (o BTPLiteralString259) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTPLiteralString259) MarshalJSON() ([]byte, error) {
 
 func (o BTPLiteralString259) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPLiteral253, errBTPLiteral253 := json.Marshal(o.BTPLiteral253)
+	if errBTPLiteral253 != nil {
+		return map[string]interface{}{}, errBTPLiteral253
+	}
+	errBTPLiteral253 = json.Unmarshal([]byte(serializedBTPLiteral253), &toSerialize)
+	if errBTPLiteral253 != nil {
+		return map[string]interface{}{}, errBTPLiteral253
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTPLiteralString259) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_literal_undefined_260.go b/onshape/model_btp_literal_undefined_260.go
index 96d88da37..95e84744a 100644
--- a/onshape/model_btp_literal_undefined_260.go
+++ b/onshape/model_btp_literal_undefined_260.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTPLiteralUndefined260{}
 
 // BTPLiteralUndefined260 struct for BTPLiteralUndefined260
 type BTPLiteralUndefined260 struct {
+	BTPLiteral-253
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTPLiteralUndefined260) SetBtType(v string) {
 }
 
 func (o BTPLiteralUndefined260) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTPLiteralUndefined260) MarshalJSON() ([]byte, error) {
 
 func (o BTPLiteralUndefined260) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPLiteral253, errBTPLiteral253 := json.Marshal(o.BTPLiteral253)
+	if errBTPLiteral253 != nil {
+		return map[string]interface{}{}, errBTPLiteral253
+	}
+	errBTPLiteral253 = json.Unmarshal([]byte(serializedBTPLiteral253), &toSerialize)
+	if errBTPLiteral253 != nil {
+		return map[string]interface{}{}, errBTPLiteral253
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTPLiteralUndefined260) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_module_234.go b/onshape/model_btp_module_234.go
index 083b6c68c..bc4b9c54e 100644
--- a/onshape/model_btp_module_234.go
+++ b/onshape/model_btp_module_234.go
@@ -20,18 +20,19 @@ var _ MappedNullable = &BTPModule234{}
 
 // BTPModule234 struct for BTPModule234
 type BTPModule234 struct {
+	BTPNode-7
 	// Type of JSON object.
-	BtType                 *string                         `json:"btType,omitempty"`
-	DeepImports            *map[string][]BTImport          `json:"deepImports,omitempty"`
-	Imports                []BTPTopLevelImport285          `json:"imports,omitempty"`
-	IsBlob                 *bool                           `json:"isBlob,omitempty"`
-	IsInternalModule       *bool                           `json:"isInternalModule,omitempty"`
-	MayHaveImplicitImports *bool                           `json:"mayHaveImplicitImports,omitempty"`
-	PathMap                *map[string]BTMicroversionId366 `json:"pathMap,omitempty"`
-	ToBeParsed             *BTLazilyParsedFeatureScript    `json:"toBeParsed,omitempty"`
-	TopLevel               []BTPTopLevelNode286            `json:"topLevel,omitempty"`
-	Version                *BTPLiteralNumber258            `json:"version,omitempty"`
-	VersionNumber          *int32                          `json:"versionNumber,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	DeepImports *map[string][]BTImport `json:"deepImports,omitempty"`
+	Imports []BTPTopLevelImport285 `json:"imports,omitempty"`
+	IsBlob *bool `json:"isBlob,omitempty"`
+	IsInternalModule *bool `json:"isInternalModule,omitempty"`
+	MayHaveImplicitImports *bool `json:"mayHaveImplicitImports,omitempty"`
+	PathMap *map[string]BTMicroversionId366 `json:"pathMap,omitempty"`
+	ToBeParsed *BTLazilyParsedFeatureScript `json:"toBeParsed,omitempty"`
+	TopLevel []BTPTopLevelNode286 `json:"topLevel,omitempty"`
+	Version *BTPLiteralNumber258 `json:"version,omitempty"`
+	VersionNumber *int32 `json:"versionNumber,omitempty"`
 }
 
 // NewBTPModule234 instantiates a new BTPModule234 object
@@ -404,7 +405,7 @@ func (o *BTPModule234) SetVersionNumber(v int32) {
 }
 
 func (o BTPModule234) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -413,6 +414,14 @@ func (o BTPModule234) MarshalJSON() ([]byte, error) {
 
 func (o BTPModule234) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPNode7, errBTPNode7 := json.Marshal(o.BTPNode7)
+	if errBTPNode7 != nil {
+		return map[string]interface{}{}, errBTPNode7
+	}
+	errBTPNode7 = json.Unmarshal([]byte(serializedBTPNode7), &toSerialize)
+	if errBTPNode7 != nil {
+		return map[string]interface{}{}, errBTPNode7
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -484,3 +493,5 @@ func (v *NullableBTPModule234) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_operator_declaration_264.go b/onshape/model_btp_operator_declaration_264.go
index 8e4f8a839..627c6858e 100644
--- a/onshape/model_btp_operator_declaration_264.go
+++ b/onshape/model_btp_operator_declaration_264.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTPOperatorDeclaration264{}
 
 // BTPOperatorDeclaration264 struct for BTPOperatorDeclaration264
 type BTPOperatorDeclaration264 struct {
+	BTPProcedureDeclarationBase-266
 	// Type of JSON object.
-	BtType              *string       `json:"btType,omitempty"`
-	Operator            *GBTPOperator `json:"operator,omitempty"`
-	SpaceAfterOperator  *BTPSpace10   `json:"spaceAfterOperator,omitempty"`
-	SpaceBeforeOperator *BTPSpace10   `json:"spaceBeforeOperator,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Operator *GBTPOperator `json:"operator,omitempty"`
+	SpaceAfterOperator *BTPSpace10 `json:"spaceAfterOperator,omitempty"`
+	SpaceBeforeOperator *BTPSpace10 `json:"spaceBeforeOperator,omitempty"`
 }
 
 // NewBTPOperatorDeclaration264 instantiates a new BTPOperatorDeclaration264 object
@@ -173,7 +174,7 @@ func (o *BTPOperatorDeclaration264) SetSpaceBeforeOperator(v BTPSpace10) {
 }
 
 func (o BTPOperatorDeclaration264) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTPOperatorDeclaration264) MarshalJSON() ([]byte, error) {
 
 func (o BTPOperatorDeclaration264) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPProcedureDeclarationBase266, errBTPProcedureDeclarationBase266 := json.Marshal(o.BTPProcedureDeclarationBase266)
+	if errBTPProcedureDeclarationBase266 != nil {
+		return map[string]interface{}{}, errBTPProcedureDeclarationBase266
+	}
+	errBTPProcedureDeclarationBase266 = json.Unmarshal([]byte(serializedBTPProcedureDeclarationBase266), &toSerialize)
+	if errBTPProcedureDeclarationBase266 != nil {
+		return map[string]interface{}{}, errBTPProcedureDeclarationBase266
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTPOperatorDeclaration264) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_predicate_declaration_265.go b/onshape/model_btp_predicate_declaration_265.go
index bdba5b942..da5eed96d 100644
--- a/onshape/model_btp_predicate_declaration_265.go
+++ b/onshape/model_btp_predicate_declaration_265.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTPPredicateDeclaration265{}
 
 // BTPPredicateDeclaration265 struct for BTPPredicateDeclaration265
 type BTPPredicateDeclaration265 struct {
+	BTPFunctionOrPredicateDeclaration-247
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTPPredicateDeclaration265) SetBtType(v string) {
 }
 
 func (o BTPPredicateDeclaration265) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTPPredicateDeclaration265) MarshalJSON() ([]byte, error) {
 
 func (o BTPPredicateDeclaration265) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPFunctionOrPredicateDeclaration247, errBTPFunctionOrPredicateDeclaration247 := json.Marshal(o.BTPFunctionOrPredicateDeclaration247)
+	if errBTPFunctionOrPredicateDeclaration247 != nil {
+		return map[string]interface{}{}, errBTPFunctionOrPredicateDeclaration247
+	}
+	errBTPFunctionOrPredicateDeclaration247 = json.Unmarshal([]byte(serializedBTPFunctionOrPredicateDeclaration247), &toSerialize)
+	if errBTPFunctionOrPredicateDeclaration247 != nil {
+		return map[string]interface{}{}, errBTPFunctionOrPredicateDeclaration247
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTPPredicateDeclaration265) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_procedure_declaration_base_266.go b/onshape/model_btp_procedure_declaration_base_266.go
index 5d51ddb4d..3b7c4cd0a 100644
--- a/onshape/model_btp_procedure_declaration_base_266.go
+++ b/onshape/model_btp_procedure_declaration_base_266.go
@@ -20,14 +20,15 @@ var _ MappedNullable = &BTPProcedureDeclarationBase266{}
 
 // BTPProcedureDeclarationBase266 struct for BTPProcedureDeclarationBase266
 type BTPProcedureDeclarationBase266 struct {
+	BTPTopLevelNode-286
 	// Type of JSON object.
-	BtType            *string                     `json:"btType,omitempty"`
-	Arguments         []BTPArgumentDeclaration232 `json:"arguments,omitempty"`
-	Body              *BTPStatementBlock271       `json:"body,omitempty"`
-	Precondition      *BTPStatement269            `json:"precondition,omitempty"`
-	ReturnType        *BTPTypeName290             `json:"returnType,omitempty"`
-	SpaceAfterArglist *BTPSpace10                 `json:"spaceAfterArglist,omitempty"`
-	SpaceInEmptyList  *BTPSpace10                 `json:"spaceInEmptyList,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Arguments []BTPArgumentDeclaration232 `json:"arguments,omitempty"`
+	Body *BTPStatementBlock271 `json:"body,omitempty"`
+	Precondition *BTPStatement269 `json:"precondition,omitempty"`
+	ReturnType *BTPTypeName290 `json:"returnType,omitempty"`
+	SpaceAfterArglist *BTPSpace10 `json:"spaceAfterArglist,omitempty"`
+	SpaceInEmptyList *BTPSpace10 `json:"spaceInEmptyList,omitempty"`
 }
 
 // NewBTPProcedureDeclarationBase266 instantiates a new BTPProcedureDeclarationBase266 object
@@ -272,7 +273,7 @@ func (o *BTPProcedureDeclarationBase266) SetSpaceInEmptyList(v BTPSpace10) {
 }
 
 func (o BTPProcedureDeclarationBase266) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -281,6 +282,14 @@ func (o BTPProcedureDeclarationBase266) MarshalJSON() ([]byte, error) {
 
 func (o BTPProcedureDeclarationBase266) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPTopLevelNode286, errBTPTopLevelNode286 := json.Marshal(o.BTPTopLevelNode286)
+	if errBTPTopLevelNode286 != nil {
+		return map[string]interface{}{}, errBTPTopLevelNode286
+	}
+	errBTPTopLevelNode286 = json.Unmarshal([]byte(serializedBTPTopLevelNode286), &toSerialize)
+	if errBTPTopLevelNode286 != nil {
+		return map[string]interface{}{}, errBTPTopLevelNode286
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -340,3 +349,5 @@ func (v *NullableBTPProcedureDeclarationBase266) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_assignment_270.go b/onshape/model_btp_statement_assignment_270.go
index 65b335141..1553f5713 100644
--- a/onshape/model_btp_statement_assignment_270.go
+++ b/onshape/model_btp_statement_assignment_270.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTPStatementAssignment270{}
 
 // BTPStatementAssignment270 struct for BTPStatementAssignment270
 type BTPStatementAssignment270 struct {
+	BTPStatement-269
 	// Type of JSON object.
-	BtType   *string         `json:"btType,omitempty"`
-	Lvalue   *BTPLValue249   `json:"lvalue,omitempty"`
-	Operator *GBTPOperator   `json:"operator,omitempty"`
-	Rvalue   *BTPExpression9 `json:"rvalue,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Lvalue *BTPLValue249 `json:"lvalue,omitempty"`
+	Operator *GBTPOperator `json:"operator,omitempty"`
+	Rvalue *BTPExpression9 `json:"rvalue,omitempty"`
 }
 
 // NewBTPStatementAssignment270 instantiates a new BTPStatementAssignment270 object
@@ -173,7 +174,7 @@ func (o *BTPStatementAssignment270) SetRvalue(v BTPExpression9) {
 }
 
 func (o BTPStatementAssignment270) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTPStatementAssignment270) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementAssignment270) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
+	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTPStatementAssignment270) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_block_271.go b/onshape/model_btp_statement_block_271.go
index 37a88429c..64216f7a4 100644
--- a/onshape/model_btp_statement_block_271.go
+++ b/onshape/model_btp_statement_block_271.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTPStatementBlock271{}
 
 // BTPStatementBlock271 struct for BTPStatementBlock271
 type BTPStatementBlock271 struct {
+	BTPStatement-269
 	// Type of JSON object.
-	BtType         *string     `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	SpaceAfterOpen *BTPSpace10 `json:"spaceAfterOpen,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTPStatementBlock271) SetSpaceAfterOpen(v BTPSpace10) {
 }
 
 func (o BTPStatementBlock271) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPStatementBlock271) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementBlock271) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
+	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPStatementBlock271) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_break_272.go b/onshape/model_btp_statement_break_272.go
index 229f4bac4..d642e9f5c 100644
--- a/onshape/model_btp_statement_break_272.go
+++ b/onshape/model_btp_statement_break_272.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTPStatementBreak272{}
 
 // BTPStatementBreak272 struct for BTPStatementBreak272
 type BTPStatementBreak272 struct {
+	BTPStatement-269
 	// Type of JSON object.
-	BtType          *string     `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	SpaceAfterBreak *BTPSpace10 `json:"spaceAfterBreak,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTPStatementBreak272) SetSpaceAfterBreak(v BTPSpace10) {
 }
 
 func (o BTPStatementBreak272) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPStatementBreak272) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementBreak272) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
+	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPStatementBreak272) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_compressed_query_1237.go b/onshape/model_btp_statement_compressed_query_1237.go
index 93df6a27a..3b47f9138 100644
--- a/onshape/model_btp_statement_compressed_query_1237.go
+++ b/onshape/model_btp_statement_compressed_query_1237.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTPStatementCompressedQuery1237{}
 
 // BTPStatementCompressedQuery1237 struct for BTPStatementCompressedQuery1237
 type BTPStatementCompressedQuery1237 struct {
+	BTPStatement-269
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
-	Query  *string `json:"query,omitempty"`
+	Query *string `json:"query,omitempty"`
 }
 
 // NewBTPStatementCompressedQuery1237 instantiates a new BTPStatementCompressedQuery1237 object
@@ -107,7 +108,7 @@ func (o *BTPStatementCompressedQuery1237) SetQuery(v string) {
 }
 
 func (o BTPStatementCompressedQuery1237) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPStatementCompressedQuery1237) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementCompressedQuery1237) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
+	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPStatementCompressedQuery1237) UnmarshalJSON(src []byte) erro
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_constant_declaration_273.go b/onshape/model_btp_statement_constant_declaration_273.go
index d0eecc2b1..3da377941 100644
--- a/onshape/model_btp_statement_constant_declaration_273.go
+++ b/onshape/model_btp_statement_constant_declaration_273.go
@@ -20,14 +20,15 @@ var _ MappedNullable = &BTPStatementConstantDeclaration273{}
 
 // BTPStatementConstantDeclaration273 struct for BTPStatementConstantDeclaration273
 type BTPStatementConstantDeclaration273 struct {
+	BTPStatement-269
 	// Type of JSON object.
-	BtType       *string         `json:"btType,omitempty"`
-	Identifier   *BTPIdentifier8 `json:"identifier,omitempty"`
-	Name         *BTPIdentifier8 `json:"name,omitempty"`
-	StandardType *GBTPType       `json:"standardType,omitempty"`
-	Type         *BTPTypeName290 `json:"type,omitempty"`
-	TypeName     *string         `json:"typeName,omitempty"`
-	Value        *BTPExpression9 `json:"value,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Identifier *BTPIdentifier8 `json:"identifier,omitempty"`
+	Name *BTPIdentifier8 `json:"name,omitempty"`
+	StandardType *GBTPType `json:"standardType,omitempty"`
+	Type *BTPTypeName290 `json:"type,omitempty"`
+	TypeName *string `json:"typeName,omitempty"`
+	Value *BTPExpression9 `json:"value,omitempty"`
 }
 
 // NewBTPStatementConstantDeclaration273 instantiates a new BTPStatementConstantDeclaration273 object
@@ -272,7 +273,7 @@ func (o *BTPStatementConstantDeclaration273) SetValue(v BTPExpression9) {
 }
 
 func (o BTPStatementConstantDeclaration273) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -281,6 +282,14 @@ func (o BTPStatementConstantDeclaration273) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementConstantDeclaration273) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
+	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -340,3 +349,5 @@ func (v *NullableBTPStatementConstantDeclaration273) UnmarshalJSON(src []byte) e
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_continue_274.go b/onshape/model_btp_statement_continue_274.go
index f08f51ea4..caa64d19e 100644
--- a/onshape/model_btp_statement_continue_274.go
+++ b/onshape/model_btp_statement_continue_274.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTPStatementContinue274{}
 
 // BTPStatementContinue274 struct for BTPStatementContinue274
 type BTPStatementContinue274 struct {
+	BTPStatement-269
 	// Type of JSON object.
-	BtType             *string     `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	SpaceAfterContinue *BTPSpace10 `json:"spaceAfterContinue,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTPStatementContinue274) SetSpaceAfterContinue(v BTPSpace10) {
 }
 
 func (o BTPStatementContinue274) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPStatementContinue274) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementContinue274) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
+	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPStatementContinue274) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_expression_275.go b/onshape/model_btp_statement_expression_275.go
index 89d6f64d2..d62cf0c1c 100644
--- a/onshape/model_btp_statement_expression_275.go
+++ b/onshape/model_btp_statement_expression_275.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTPStatementExpression275{}
 
 // BTPStatementExpression275 struct for BTPStatementExpression275
 type BTPStatementExpression275 struct {
+	BTPStatement-269
 	// Type of JSON object.
-	BtType     *string         `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Expression *BTPExpression9 `json:"expression,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTPStatementExpression275) SetExpression(v BTPExpression9) {
 }
 
 func (o BTPStatementExpression275) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPStatementExpression275) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementExpression275) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
+	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPStatementExpression275) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_if_276.go b/onshape/model_btp_statement_if_276.go
index 06430fc1c..d05026810 100644
--- a/onshape/model_btp_statement_if_276.go
+++ b/onshape/model_btp_statement_if_276.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTPStatementIf276{}
 
 // BTPStatementIf276 struct for BTPStatementIf276
 type BTPStatementIf276 struct {
+	BTPStatement-269
 	// Type of JSON object.
-	BtType       *string          `json:"btType,omitempty"`
-	Condition    *BTPExpression9  `json:"condition,omitempty"`
-	ElseBody     *BTPStatement269 `json:"elseBody,omitempty"`
-	SpaceAfterIf *BTPSpace10      `json:"spaceAfterIf,omitempty"`
-	ThenBody     *BTPStatement269 `json:"thenBody,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Condition *BTPExpression9 `json:"condition,omitempty"`
+	ElseBody *BTPStatement269 `json:"elseBody,omitempty"`
+	SpaceAfterIf *BTPSpace10 `json:"spaceAfterIf,omitempty"`
+	ThenBody *BTPStatement269 `json:"thenBody,omitempty"`
 }
 
 // NewBTPStatementIf276 instantiates a new BTPStatementIf276 object
@@ -206,7 +207,7 @@ func (o *BTPStatementIf276) SetThenBody(v BTPStatement269) {
 }
 
 func (o BTPStatementIf276) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTPStatementIf276) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementIf276) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
+	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTPStatementIf276) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_loop_277.go b/onshape/model_btp_statement_loop_277.go
index 123488c18..f1a86e035 100644
--- a/onshape/model_btp_statement_loop_277.go
+++ b/onshape/model_btp_statement_loop_277.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTPStatementLoop277{}
 
 // BTPStatementLoop277 struct for BTPStatementLoop277
 type BTPStatementLoop277 struct {
+	BTPStatement-269
 	// Type of JSON object.
-	BtType             *string          `json:"btType,omitempty"`
-	Body               *BTPStatement269 `json:"body,omitempty"`
-	SpaceAfterLoopType *BTPSpace10      `json:"spaceAfterLoopType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Body *BTPStatement269 `json:"body,omitempty"`
+	SpaceAfterLoopType *BTPSpace10 `json:"spaceAfterLoopType,omitempty"`
 }
 
 // NewBTPStatementLoop277 instantiates a new BTPStatementLoop277 object
@@ -140,7 +141,7 @@ func (o *BTPStatementLoop277) SetSpaceAfterLoopType(v BTPSpace10) {
 }
 
 func (o BTPStatementLoop277) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTPStatementLoop277) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementLoop277) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
+	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTPStatementLoop277) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_loop_for3_278.go b/onshape/model_btp_statement_loop_for3_278.go
index 46edb99b9..e41a5c880 100644
--- a/onshape/model_btp_statement_loop_for3_278.go
+++ b/onshape/model_btp_statement_loop_for3_278.go
@@ -20,14 +20,15 @@ var _ MappedNullable = &BTPStatementLoopFor3278{}
 
 // BTPStatementLoopFor3278 struct for BTPStatementLoopFor3278
 type BTPStatementLoopFor3278 struct {
+	BTPStatementLoop-277
 	// Type of JSON object.
-	BtType                   *string          `json:"btType,omitempty"`
-	Condition                *BTPExpression9  `json:"condition,omitempty"`
-	Increment                *BTPStatement269 `json:"increment,omitempty"`
-	Initialization           *BTPStatement269 `json:"initialization,omitempty"`
-	SpaceAfterInitialization *BTPSpace10      `json:"spaceAfterInitialization,omitempty"`
-	SpaceBeforeCondition     *BTPSpace10      `json:"spaceBeforeCondition,omitempty"`
-	SpaceBeforeIncrement     *BTPSpace10      `json:"spaceBeforeIncrement,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Condition *BTPExpression9 `json:"condition,omitempty"`
+	Increment *BTPStatement269 `json:"increment,omitempty"`
+	Initialization *BTPStatement269 `json:"initialization,omitempty"`
+	SpaceAfterInitialization *BTPSpace10 `json:"spaceAfterInitialization,omitempty"`
+	SpaceBeforeCondition *BTPSpace10 `json:"spaceBeforeCondition,omitempty"`
+	SpaceBeforeIncrement *BTPSpace10 `json:"spaceBeforeIncrement,omitempty"`
 }
 
 // NewBTPStatementLoopFor3278 instantiates a new BTPStatementLoopFor3278 object
@@ -272,7 +273,7 @@ func (o *BTPStatementLoopFor3278) SetSpaceBeforeIncrement(v BTPSpace10) {
 }
 
 func (o BTPStatementLoopFor3278) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -281,6 +282,14 @@ func (o BTPStatementLoopFor3278) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementLoopFor3278) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatementLoop277, errBTPStatementLoop277 := json.Marshal(o.BTPStatementLoop277)
+	if errBTPStatementLoop277 != nil {
+		return map[string]interface{}{}, errBTPStatementLoop277
+	}
+	errBTPStatementLoop277 = json.Unmarshal([]byte(serializedBTPStatementLoop277), &toSerialize)
+	if errBTPStatementLoop277 != nil {
+		return map[string]interface{}{}, errBTPStatementLoop277
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -340,3 +349,5 @@ func (v *NullableBTPStatementLoopFor3278) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_loop_for_in_279.go b/onshape/model_btp_statement_loop_for_in_279.go
index 4fb8fe305..6273e388c 100644
--- a/onshape/model_btp_statement_loop_for_in_279.go
+++ b/onshape/model_btp_statement_loop_for_in_279.go
@@ -20,16 +20,17 @@ var _ MappedNullable = &BTPStatementLoopForIn279{}
 
 // BTPStatementLoopForIn279 struct for BTPStatementLoopForIn279
 type BTPStatementLoopForIn279 struct {
+	BTPStatementLoop-277
 	// Type of JSON object.
-	BtType            *string          `json:"btType,omitempty"`
-	Container         *BTPExpression9  `json:"container,omitempty"`
-	Identifiers       []BTPIdentifier8 `json:"identifiers,omitempty"`
-	IsVarDeclaredHere *bool            `json:"isVarDeclaredHere,omitempty"`
-	KeyVar            *BTPIdentifier8  `json:"keyVar,omitempty"`
-	SpaceBeforeVar    *BTPSpace10      `json:"spaceBeforeVar,omitempty"`
-	StandardTypes     []GBTPType       `json:"standardTypes,omitempty"`
-	TypeNames         []string         `json:"typeNames,omitempty"`
-	Var               *BTPIdentifier8  `json:"var,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Container *BTPExpression9 `json:"container,omitempty"`
+	Identifiers []BTPIdentifier8 `json:"identifiers,omitempty"`
+	IsVarDeclaredHere *bool `json:"isVarDeclaredHere,omitempty"`
+	KeyVar *BTPIdentifier8 `json:"keyVar,omitempty"`
+	SpaceBeforeVar *BTPSpace10 `json:"spaceBeforeVar,omitempty"`
+	StandardTypes []GBTPType `json:"standardTypes,omitempty"`
+	TypeNames []string `json:"typeNames,omitempty"`
+	Var *BTPIdentifier8 `json:"var,omitempty"`
 }
 
 // NewBTPStatementLoopForIn279 instantiates a new BTPStatementLoopForIn279 object
@@ -338,7 +339,7 @@ func (o *BTPStatementLoopForIn279) SetVar(v BTPIdentifier8) {
 }
 
 func (o BTPStatementLoopForIn279) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -347,6 +348,14 @@ func (o BTPStatementLoopForIn279) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementLoopForIn279) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatementLoop277, errBTPStatementLoop277 := json.Marshal(o.BTPStatementLoop277)
+	if errBTPStatementLoop277 != nil {
+		return map[string]interface{}{}, errBTPStatementLoop277
+	}
+	errBTPStatementLoop277 = json.Unmarshal([]byte(serializedBTPStatementLoop277), &toSerialize)
+	if errBTPStatementLoop277 != nil {
+		return map[string]interface{}{}, errBTPStatementLoop277
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -412,3 +421,5 @@ func (v *NullableBTPStatementLoopForIn279) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_loop_while_280.go b/onshape/model_btp_statement_loop_while_280.go
index 316588145..60ba4e035 100644
--- a/onshape/model_btp_statement_loop_while_280.go
+++ b/onshape/model_btp_statement_loop_while_280.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTPStatementLoopWhile280{}
 
 // BTPStatementLoopWhile280 struct for BTPStatementLoopWhile280
 type BTPStatementLoopWhile280 struct {
+	BTPStatementLoop-277
 	// Type of JSON object.
-	BtType    *string         `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Condition *BTPExpression9 `json:"condition,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTPStatementLoopWhile280) SetCondition(v BTPExpression9) {
 }
 
 func (o BTPStatementLoopWhile280) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPStatementLoopWhile280) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementLoopWhile280) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatementLoop277, errBTPStatementLoop277 := json.Marshal(o.BTPStatementLoop277)
+	if errBTPStatementLoop277 != nil {
+		return map[string]interface{}{}, errBTPStatementLoop277
+	}
+	errBTPStatementLoop277 = json.Unmarshal([]byte(serializedBTPStatementLoop277), &toSerialize)
+	if errBTPStatementLoop277 != nil {
+		return map[string]interface{}{}, errBTPStatementLoop277
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPStatementLoopWhile280) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_return_281.go b/onshape/model_btp_statement_return_281.go
index 58052f35e..9684b1638 100644
--- a/onshape/model_btp_statement_return_281.go
+++ b/onshape/model_btp_statement_return_281.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTPStatementReturn281{}
 
 // BTPStatementReturn281 struct for BTPStatementReturn281
 type BTPStatementReturn281 struct {
+	BTPStatement-269
 	// Type of JSON object.
-	BtType           *string         `json:"btType,omitempty"`
-	SpaceAfterReturn *BTPSpace10     `json:"spaceAfterReturn,omitempty"`
-	Value            *BTPExpression9 `json:"value,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	SpaceAfterReturn *BTPSpace10 `json:"spaceAfterReturn,omitempty"`
+	Value *BTPExpression9 `json:"value,omitempty"`
 }
 
 // NewBTPStatementReturn281 instantiates a new BTPStatementReturn281 object
@@ -140,7 +141,7 @@ func (o *BTPStatementReturn281) SetValue(v BTPExpression9) {
 }
 
 func (o BTPStatementReturn281) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTPStatementReturn281) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementReturn281) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
+	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTPStatementReturn281) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_throw_1080.go b/onshape/model_btp_statement_throw_1080.go
index d4e34fa2b..4cf8ebc0f 100644
--- a/onshape/model_btp_statement_throw_1080.go
+++ b/onshape/model_btp_statement_throw_1080.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTPStatementThrow1080{}
 
 // BTPStatementThrow1080 struct for BTPStatementThrow1080
 type BTPStatementThrow1080 struct {
+	BTPStatement-269
 	// Type of JSON object.
-	BtType *string         `json:"btType,omitempty"`
-	Value  *BTPExpression9 `json:"value,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Value *BTPExpression9 `json:"value,omitempty"`
 }
 
 // NewBTPStatementThrow1080 instantiates a new BTPStatementThrow1080 object
@@ -107,7 +108,7 @@ func (o *BTPStatementThrow1080) SetValue(v BTPExpression9) {
 }
 
 func (o BTPStatementThrow1080) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPStatementThrow1080) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementThrow1080) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
+	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPStatementThrow1080) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_try_1523.go b/onshape/model_btp_statement_try_1523.go
index 1c8538ae3..125ce3016 100644
--- a/onshape/model_btp_statement_try_1523.go
+++ b/onshape/model_btp_statement_try_1523.go
@@ -20,17 +20,18 @@ var _ MappedNullable = &BTPStatementTry1523{}
 
 // BTPStatementTry1523 struct for BTPStatementTry1523
 type BTPStatementTry1523 struct {
+	BTPStatement-269
 	// Type of JSON object.
-	BtType            *string               `json:"btType,omitempty"`
-	Body              *BTPStatementBlock271 `json:"body,omitempty"`
-	CatchBlock        *BTPStatementBlock271 `json:"catchBlock,omitempty"`
-	CatchVariable     *BTPIdentifier8       `json:"catchVariable,omitempty"`
-	Identifier        *BTPIdentifier8       `json:"identifier,omitempty"`
-	Silent            *bool                 `json:"silent,omitempty"`
-	SpaceAfterCatch   *BTPSpace10           `json:"spaceAfterCatch,omitempty"`
-	SpaceBeforeSilent *BTPSpace10           `json:"spaceBeforeSilent,omitempty"`
-	StandardType      *GBTPType             `json:"standardType,omitempty"`
-	TypeName          *string               `json:"typeName,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Body *BTPStatementBlock271 `json:"body,omitempty"`
+	CatchBlock *BTPStatementBlock271 `json:"catchBlock,omitempty"`
+	CatchVariable *BTPIdentifier8 `json:"catchVariable,omitempty"`
+	Identifier *BTPIdentifier8 `json:"identifier,omitempty"`
+	Silent *bool `json:"silent,omitempty"`
+	SpaceAfterCatch *BTPSpace10 `json:"spaceAfterCatch,omitempty"`
+	SpaceBeforeSilent *BTPSpace10 `json:"spaceBeforeSilent,omitempty"`
+	StandardType *GBTPType `json:"standardType,omitempty"`
+	TypeName *string `json:"typeName,omitempty"`
 }
 
 // NewBTPStatementTry1523 instantiates a new BTPStatementTry1523 object
@@ -371,7 +372,7 @@ func (o *BTPStatementTry1523) SetTypeName(v string) {
 }
 
 func (o BTPStatementTry1523) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -380,6 +381,14 @@ func (o BTPStatementTry1523) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementTry1523) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
+	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -448,3 +457,5 @@ func (v *NullableBTPStatementTry1523) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_statement_var_declaration_282.go b/onshape/model_btp_statement_var_declaration_282.go
index 528c4511d..0ca1c8970 100644
--- a/onshape/model_btp_statement_var_declaration_282.go
+++ b/onshape/model_btp_statement_var_declaration_282.go
@@ -20,14 +20,15 @@ var _ MappedNullable = &BTPStatementVarDeclaration282{}
 
 // BTPStatementVarDeclaration282 struct for BTPStatementVarDeclaration282
 type BTPStatementVarDeclaration282 struct {
+	BTPStatement-269
 	// Type of JSON object.
-	BtType       *string         `json:"btType,omitempty"`
-	Identifier   *BTPIdentifier8 `json:"identifier,omitempty"`
-	Name         *BTPIdentifier8 `json:"name,omitempty"`
-	StandardType *GBTPType       `json:"standardType,omitempty"`
-	Type         *BTPTypeName290 `json:"type,omitempty"`
-	TypeName     *string         `json:"typeName,omitempty"`
-	Value        *BTPExpression9 `json:"value,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Identifier *BTPIdentifier8 `json:"identifier,omitempty"`
+	Name *BTPIdentifier8 `json:"name,omitempty"`
+	StandardType *GBTPType `json:"standardType,omitempty"`
+	Type *BTPTypeName290 `json:"type,omitempty"`
+	TypeName *string `json:"typeName,omitempty"`
+	Value *BTPExpression9 `json:"value,omitempty"`
 }
 
 // NewBTPStatementVarDeclaration282 instantiates a new BTPStatementVarDeclaration282 object
@@ -272,7 +273,7 @@ func (o *BTPStatementVarDeclaration282) SetValue(v BTPExpression9) {
 }
 
 func (o BTPStatementVarDeclaration282) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -281,6 +282,14 @@ func (o BTPStatementVarDeclaration282) MarshalJSON() ([]byte, error) {
 
 func (o BTPStatementVarDeclaration282) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPStatement269, errBTPStatement269 := json.Marshal(o.BTPStatement269)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
+	errBTPStatement269 = json.Unmarshal([]byte(serializedBTPStatement269), &toSerialize)
+	if errBTPStatement269 != nil {
+		return map[string]interface{}{}, errBTPStatement269
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -340,3 +349,5 @@ func (v *NullableBTPStatementVarDeclaration282) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_top_level_constant_declaration_283.go b/onshape/model_btp_top_level_constant_declaration_283.go
index f1d2d70f0..14e8c5624 100644
--- a/onshape/model_btp_top_level_constant_declaration_283.go
+++ b/onshape/model_btp_top_level_constant_declaration_283.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTPTopLevelConstantDeclaration283{}
 
 // BTPTopLevelConstantDeclaration283 struct for BTPTopLevelConstantDeclaration283
 type BTPTopLevelConstantDeclaration283 struct {
+	BTPTopLevelNode-286
 	// Type of JSON object.
-	BtType      *string                             `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Declaration *BTPStatementConstantDeclaration273 `json:"declaration,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTPTopLevelConstantDeclaration283) SetDeclaration(v BTPStatementConstan
 }
 
 func (o BTPTopLevelConstantDeclaration283) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPTopLevelConstantDeclaration283) MarshalJSON() ([]byte, error) {
 
 func (o BTPTopLevelConstantDeclaration283) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPTopLevelNode286, errBTPTopLevelNode286 := json.Marshal(o.BTPTopLevelNode286)
+	if errBTPTopLevelNode286 != nil {
+		return map[string]interface{}{}, errBTPTopLevelNode286
+	}
+	errBTPTopLevelNode286 = json.Unmarshal([]byte(serializedBTPTopLevelNode286), &toSerialize)
+	if errBTPTopLevelNode286 != nil {
+		return map[string]interface{}{}, errBTPTopLevelNode286
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPTopLevelConstantDeclaration283) UnmarshalJSON(src []byte) er
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_top_level_enum_declaration_284.go b/onshape/model_btp_top_level_enum_declaration_284.go
index a1c1a23ad..13c07a9c3 100644
--- a/onshape/model_btp_top_level_enum_declaration_284.go
+++ b/onshape/model_btp_top_level_enum_declaration_284.go
@@ -20,12 +20,13 @@ var _ MappedNullable = &BTPTopLevelEnumDeclaration284{}
 
 // BTPTopLevelEnumDeclaration284 struct for BTPTopLevelEnumDeclaration284
 type BTPTopLevelEnumDeclaration284 struct {
+	BTPTopLevelTypeDeclaration-287
 	// Type of JSON object.
-	BtType           *string            `json:"btType,omitempty"`
-	Annotations      []BTPAnnotation231 `json:"annotations,omitempty"`
-	SpaceInEmptyList *BTPSpace10        `json:"spaceInEmptyList,omitempty"`
-	TrailingComma    *bool              `json:"trailingComma,omitempty"`
-	Values           []BTPIdentifier8   `json:"values,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Annotations []BTPAnnotation231 `json:"annotations,omitempty"`
+	SpaceInEmptyList *BTPSpace10 `json:"spaceInEmptyList,omitempty"`
+	TrailingComma *bool `json:"trailingComma,omitempty"`
+	Values []BTPIdentifier8 `json:"values,omitempty"`
 }
 
 // NewBTPTopLevelEnumDeclaration284 instantiates a new BTPTopLevelEnumDeclaration284 object
@@ -206,7 +207,7 @@ func (o *BTPTopLevelEnumDeclaration284) SetValues(v []BTPIdentifier8) {
 }
 
 func (o BTPTopLevelEnumDeclaration284) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -215,6 +216,14 @@ func (o BTPTopLevelEnumDeclaration284) MarshalJSON() ([]byte, error) {
 
 func (o BTPTopLevelEnumDeclaration284) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPTopLevelTypeDeclaration287, errBTPTopLevelTypeDeclaration287 := json.Marshal(o.BTPTopLevelTypeDeclaration287)
+	if errBTPTopLevelTypeDeclaration287 != nil {
+		return map[string]interface{}{}, errBTPTopLevelTypeDeclaration287
+	}
+	errBTPTopLevelTypeDeclaration287 = json.Unmarshal([]byte(serializedBTPTopLevelTypeDeclaration287), &toSerialize)
+	if errBTPTopLevelTypeDeclaration287 != nil {
+		return map[string]interface{}{}, errBTPTopLevelTypeDeclaration287
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -268,3 +277,5 @@ func (v *NullableBTPTopLevelEnumDeclaration284) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_top_level_import_285.go b/onshape/model_btp_top_level_import_285.go
index 1f364acd6..fc06fb3f7 100644
--- a/onshape/model_btp_top_level_import_285.go
+++ b/onshape/model_btp_top_level_import_285.go
@@ -20,15 +20,16 @@ var _ MappedNullable = &BTPTopLevelImport285{}
 
 // BTPTopLevelImport285 struct for BTPTopLevelImport285
 type BTPTopLevelImport285 struct {
+	BTPTopLevelNode-286
 	// Type of JSON object.
-	BtType                          *string `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	CombinedNamespacePathAndVersion *string `json:"combinedNamespacePathAndVersion,omitempty"`
 	// Element microversion that is being imported.
-	ImportMicroversion *string          `json:"importMicroversion,omitempty"`
-	ModuleId           *BTPModuleId235  `json:"moduleId,omitempty"`
-	Namespace          []BTPIdentifier8 `json:"namespace,omitempty"`
-	NamespaceString    *string          `json:"namespaceString,omitempty"`
-	SpaceBeforeImport  *BTPSpace10      `json:"spaceBeforeImport,omitempty"`
+	ImportMicroversion *string `json:"importMicroversion,omitempty"`
+	ModuleId *BTPModuleId235 `json:"moduleId,omitempty"`
+	Namespace []BTPIdentifier8 `json:"namespace,omitempty"`
+	NamespaceString *string `json:"namespaceString,omitempty"`
+	SpaceBeforeImport *BTPSpace10 `json:"spaceBeforeImport,omitempty"`
 }
 
 // NewBTPTopLevelImport285 instantiates a new BTPTopLevelImport285 object
@@ -273,7 +274,7 @@ func (o *BTPTopLevelImport285) SetSpaceBeforeImport(v BTPSpace10) {
 }
 
 func (o BTPTopLevelImport285) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -282,6 +283,14 @@ func (o BTPTopLevelImport285) MarshalJSON() ([]byte, error) {
 
 func (o BTPTopLevelImport285) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPTopLevelNode286, errBTPTopLevelNode286 := json.Marshal(o.BTPTopLevelNode286)
+	if errBTPTopLevelNode286 != nil {
+		return map[string]interface{}{}, errBTPTopLevelNode286
+	}
+	errBTPTopLevelNode286 = json.Unmarshal([]byte(serializedBTPTopLevelNode286), &toSerialize)
+	if errBTPTopLevelNode286 != nil {
+		return map[string]interface{}{}, errBTPTopLevelNode286
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -341,3 +350,5 @@ func (v *NullableBTPTopLevelImport285) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_top_level_node_286.go b/onshape/model_btp_top_level_node_286.go
index 69bb93105..073868826 100644
--- a/onshape/model_btp_top_level_node_286.go
+++ b/onshape/model_btp_top_level_node_286.go
@@ -20,15 +20,16 @@ var _ MappedNullable = &BTPTopLevelNode286{}
 
 // BTPTopLevelNode286 struct for BTPTopLevelNode286
 type BTPTopLevelNode286 struct {
+	BTPNode-7
 	// Type of JSON object.
-	BtType                *string                     `json:"btType,omitempty"`
-	Annotation            *BTPAnnotation231           `json:"annotation,omitempty"`
-	ArgumentsToDocument   []BTPArgumentDeclaration232 `json:"argumentsToDocument,omitempty"`
-	Deprecated            *bool                       `json:"deprecated,omitempty"`
-	DeprecatedExplanation *string                     `json:"deprecatedExplanation,omitempty"`
-	ForExport             *bool                       `json:"forExport,omitempty"`
-	SpaceAfterExport      *BTPSpace10                 `json:"spaceAfterExport,omitempty"`
-	SymbolName            *BTPIdentifier8             `json:"symbolName,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Annotation *BTPAnnotation231 `json:"annotation,omitempty"`
+	ArgumentsToDocument []BTPArgumentDeclaration232 `json:"argumentsToDocument,omitempty"`
+	Deprecated *bool `json:"deprecated,omitempty"`
+	DeprecatedExplanation *string `json:"deprecatedExplanation,omitempty"`
+	ForExport *bool `json:"forExport,omitempty"`
+	SpaceAfterExport *BTPSpace10 `json:"spaceAfterExport,omitempty"`
+	SymbolName *BTPIdentifier8 `json:"symbolName,omitempty"`
 }
 
 // NewBTPTopLevelNode286 instantiates a new BTPTopLevelNode286 object
@@ -305,7 +306,7 @@ func (o *BTPTopLevelNode286) SetSymbolName(v BTPIdentifier8) {
 }
 
 func (o BTPTopLevelNode286) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -314,6 +315,14 @@ func (o BTPTopLevelNode286) MarshalJSON() ([]byte, error) {
 
 func (o BTPTopLevelNode286) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPNode7, errBTPNode7 := json.Marshal(o.BTPNode7)
+	if errBTPNode7 != nil {
+		return map[string]interface{}{}, errBTPNode7
+	}
+	errBTPNode7 = json.Unmarshal([]byte(serializedBTPNode7), &toSerialize)
+	if errBTPNode7 != nil {
+		return map[string]interface{}{}, errBTPNode7
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -376,3 +385,5 @@ func (v *NullableBTPTopLevelNode286) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_top_level_type_declaration_287.go b/onshape/model_btp_top_level_type_declaration_287.go
index 2bae2b400..91c9a162a 100644
--- a/onshape/model_btp_top_level_type_declaration_287.go
+++ b/onshape/model_btp_top_level_type_declaration_287.go
@@ -20,11 +20,12 @@ var _ MappedNullable = &BTPTopLevelTypeDeclaration287{}
 
 // BTPTopLevelTypeDeclaration287 struct for BTPTopLevelTypeDeclaration287
 type BTPTopLevelTypeDeclaration287 struct {
+	BTPTopLevelNode-286
 	// Type of JSON object.
-	BtType            *string              `json:"btType,omitempty"`
-	Name              *BTPIdentifier8      `json:"name,omitempty"`
-	SpaceAfterVersion *BTPSpace10          `json:"spaceAfterVersion,omitempty"`
-	Version           *BTPLiteralNumber258 `json:"version,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Name *BTPIdentifier8 `json:"name,omitempty"`
+	SpaceAfterVersion *BTPSpace10 `json:"spaceAfterVersion,omitempty"`
+	Version *BTPLiteralNumber258 `json:"version,omitempty"`
 }
 
 // NewBTPTopLevelTypeDeclaration287 instantiates a new BTPTopLevelTypeDeclaration287 object
@@ -173,7 +174,7 @@ func (o *BTPTopLevelTypeDeclaration287) SetVersion(v BTPLiteralNumber258) {
 }
 
 func (o BTPTopLevelTypeDeclaration287) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -182,6 +183,14 @@ func (o BTPTopLevelTypeDeclaration287) MarshalJSON() ([]byte, error) {
 
 func (o BTPTopLevelTypeDeclaration287) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPTopLevelNode286, errBTPTopLevelNode286 := json.Marshal(o.BTPTopLevelNode286)
+	if errBTPTopLevelNode286 != nil {
+		return map[string]interface{}{}, errBTPTopLevelNode286
+	}
+	errBTPTopLevelNode286 = json.Unmarshal([]byte(serializedBTPTopLevelNode286), &toSerialize)
+	if errBTPTopLevelNode286 != nil {
+		return map[string]interface{}{}, errBTPTopLevelNode286
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -232,3 +241,5 @@ func (v *NullableBTPTopLevelTypeDeclaration287) UnmarshalJSON(src []byte) error
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_top_level_user_type_declaration_288.go b/onshape/model_btp_top_level_user_type_declaration_288.go
index 9e7808af7..813f7943f 100644
--- a/onshape/model_btp_top_level_user_type_declaration_288.go
+++ b/onshape/model_btp_top_level_user_type_declaration_288.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTPTopLevelUserTypeDeclaration288{}
 
 // BTPTopLevelUserTypeDeclaration288 struct for BTPTopLevelUserTypeDeclaration288
 type BTPTopLevelUserTypeDeclaration288 struct {
+	BTPTopLevelTypeDeclaration-287
 	// Type of JSON object.
-	BtType    *string     `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Typecheck *BTPName261 `json:"typecheck,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTPTopLevelUserTypeDeclaration288) SetTypecheck(v BTPName261) {
 }
 
 func (o BTPTopLevelUserTypeDeclaration288) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPTopLevelUserTypeDeclaration288) MarshalJSON() ([]byte, error) {
 
 func (o BTPTopLevelUserTypeDeclaration288) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPTopLevelTypeDeclaration287, errBTPTopLevelTypeDeclaration287 := json.Marshal(o.BTPTopLevelTypeDeclaration287)
+	if errBTPTopLevelTypeDeclaration287 != nil {
+		return map[string]interface{}{}, errBTPTopLevelTypeDeclaration287
+	}
+	errBTPTopLevelTypeDeclaration287 = json.Unmarshal([]byte(serializedBTPTopLevelTypeDeclaration287), &toSerialize)
+	if errBTPTopLevelTypeDeclaration287 != nil {
+		return map[string]interface{}{}, errBTPTopLevelTypeDeclaration287
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPTopLevelUserTypeDeclaration288) UnmarshalJSON(src []byte) er
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_type_name_standard_291.go b/onshape/model_btp_type_name_standard_291.go
index f997bb8fb..c2a733cdb 100644
--- a/onshape/model_btp_type_name_standard_291.go
+++ b/onshape/model_btp_type_name_standard_291.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTPTypeNameStandard291{}
 
 // BTPTypeNameStandard291 struct for BTPTypeNameStandard291
 type BTPTypeNameStandard291 struct {
+	BTPTypeName-290
 	// Type of JSON object.
-	BtType *string   `json:"btType,omitempty"`
-	Type   *GBTPType `json:"type,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Type *GBTPType `json:"type,omitempty"`
 }
 
 // NewBTPTypeNameStandard291 instantiates a new BTPTypeNameStandard291 object
@@ -107,7 +108,7 @@ func (o *BTPTypeNameStandard291) SetType(v GBTPType) {
 }
 
 func (o BTPTypeNameStandard291) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPTypeNameStandard291) MarshalJSON() ([]byte, error) {
 
 func (o BTPTypeNameStandard291) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPTypeName290, errBTPTypeName290 := json.Marshal(o.BTPTypeName290)
+	if errBTPTypeName290 != nil {
+		return map[string]interface{}{}, errBTPTypeName290
+	}
+	errBTPTypeName290 = json.Unmarshal([]byte(serializedBTPTypeName290), &toSerialize)
+	if errBTPTypeName290 != nil {
+		return map[string]interface{}{}, errBTPTypeName290
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPTypeNameStandard291) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btp_type_name_user_292.go b/onshape/model_btp_type_name_user_292.go
index e575ab940..bff7d1cc6 100644
--- a/onshape/model_btp_type_name_user_292.go
+++ b/onshape/model_btp_type_name_user_292.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTPTypeNameUser292{}
 
 // BTPTypeNameUser292 struct for BTPTypeNameUser292
 type BTPTypeNameUser292 struct {
+	BTPTypeName-290
 	// Type of JSON object.
-	BtType *string     `json:"btType,omitempty"`
-	Type   *BTPName261 `json:"type,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Type *BTPName261 `json:"type,omitempty"`
 }
 
 // NewBTPTypeNameUser292 instantiates a new BTPTypeNameUser292 object
@@ -107,7 +108,7 @@ func (o *BTPTypeNameUser292) SetType(v BTPName261) {
 }
 
 func (o BTPTypeNameUser292) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPTypeNameUser292) MarshalJSON() ([]byte, error) {
 
 func (o BTPTypeNameUser292) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPTypeName290, errBTPTypeName290 := json.Marshal(o.BTPTypeName290)
+	if errBTPTypeName290 != nil {
+		return map[string]interface{}{}, errBTPTypeName290
+	}
+	errBTPTypeName290 = json.Unmarshal([]byte(serializedBTPTypeName290), &toSerialize)
+	if errBTPTypeName290 != nil {
+		return map[string]interface{}{}, errBTPTypeName290
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPTypeNameUser292) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btpl_value_access_250.go b/onshape/model_btpl_value_access_250.go
index 0d1cd0196..ade059969 100644
--- a/onshape/model_btpl_value_access_250.go
+++ b/onshape/model_btpl_value_access_250.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTPLValueAccess250{}
 
 // BTPLValueAccess250 struct for BTPLValueAccess250
 type BTPLValueAccess250 struct {
+	BTPLValue-249
 	// Type of JSON object.
-	BtType   *string                `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	Accessor *BTPPropertyAccessor23 `json:"accessor,omitempty"`
-	Base     *BTPLValue249          `json:"base,omitempty"`
+	Base *BTPLValue249 `json:"base,omitempty"`
 }
 
 // NewBTPLValueAccess250 instantiates a new BTPLValueAccess250 object
@@ -140,7 +141,7 @@ func (o *BTPLValueAccess250) SetBase(v BTPLValue249) {
 }
 
 func (o BTPLValueAccess250) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTPLValueAccess250) MarshalJSON() ([]byte, error) {
 
 func (o BTPLValueAccess250) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPLValue249, errBTPLValue249 := json.Marshal(o.BTPLValue249)
+	if errBTPLValue249 != nil {
+		return map[string]interface{}{}, errBTPLValue249
+	}
+	errBTPLValue249 = json.Unmarshal([]byte(serializedBTPLValue249), &toSerialize)
+	if errBTPLValue249 != nil {
+		return map[string]interface{}{}, errBTPLValue249
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTPLValueAccess250) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btpl_value_box_dereference_251.go b/onshape/model_btpl_value_box_dereference_251.go
index 79b81abcf..a1063fe98 100644
--- a/onshape/model_btpl_value_box_dereference_251.go
+++ b/onshape/model_btpl_value_box_dereference_251.go
@@ -20,10 +20,11 @@ var _ MappedNullable = &BTPLValueBoxDereference251{}
 
 // BTPLValueBoxDereference251 struct for BTPLValueBoxDereference251
 type BTPLValueBoxDereference251 struct {
+	BTPLValue-249
 	// Type of JSON object.
-	BtType      *string         `json:"btType,omitempty"`
-	Box         *BTPExpression9 `json:"box,omitempty"`
-	SpaceInside *BTPSpace10     `json:"spaceInside,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Box *BTPExpression9 `json:"box,omitempty"`
+	SpaceInside *BTPSpace10 `json:"spaceInside,omitempty"`
 }
 
 // NewBTPLValueBoxDereference251 instantiates a new BTPLValueBoxDereference251 object
@@ -140,7 +141,7 @@ func (o *BTPLValueBoxDereference251) SetSpaceInside(v BTPSpace10) {
 }
 
 func (o BTPLValueBoxDereference251) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -149,6 +150,14 @@ func (o BTPLValueBoxDereference251) MarshalJSON() ([]byte, error) {
 
 func (o BTPLValueBoxDereference251) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPLValue249, errBTPLValue249 := json.Marshal(o.BTPLValue249)
+	if errBTPLValue249 != nil {
+		return map[string]interface{}{}, errBTPLValue249
+	}
+	errBTPLValue249 = json.Unmarshal([]byte(serializedBTPLValue249), &toSerialize)
+	if errBTPLValue249 != nil {
+		return map[string]interface{}{}, errBTPLValue249
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -196,3 +205,5 @@ func (v *NullableBTPLValueBoxDereference251) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btpl_value_var_reference_252.go b/onshape/model_btpl_value_var_reference_252.go
index 5dee0bbaf..88a1c6d64 100644
--- a/onshape/model_btpl_value_var_reference_252.go
+++ b/onshape/model_btpl_value_var_reference_252.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTPLValueVarReference252{}
 
 // BTPLValueVarReference252 struct for BTPLValueVarReference252
 type BTPLValueVarReference252 struct {
+	BTPLValue-249
 	// Type of JSON object.
-	BtType *string         `json:"btType,omitempty"`
-	Name   *BTPIdentifier8 `json:"name,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	Name *BTPIdentifier8 `json:"name,omitempty"`
 }
 
 // NewBTPLValueVarReference252 instantiates a new BTPLValueVarReference252 object
@@ -107,7 +108,7 @@ func (o *BTPLValueVarReference252) SetName(v BTPIdentifier8) {
 }
 
 func (o BTPLValueVarReference252) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTPLValueVarReference252) MarshalJSON() ([]byte, error) {
 
 func (o BTPLValueVarReference252) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTPLValue249, errBTPLValue249 := json.Marshal(o.BTPLValue249)
+	if errBTPLValue249 != nil {
+		return map[string]interface{}{}, errBTPLValue249
+	}
+	errBTPLValue249 = json.Unmarshal([]byte(serializedBTPLValue249), &toSerialize)
+	if errBTPLValue249 != nil {
+		return map[string]interface{}{}, errBTPLValue249
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTPLValueVarReference252) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btsm_bend_table_row_metadata_1705.go b/onshape/model_btsm_bend_table_row_metadata_1705.go
index 9af8c030e..c55422c6b 100644
--- a/onshape/model_btsm_bend_table_row_metadata_1705.go
+++ b/onshape/model_btsm_bend_table_row_metadata_1705.go
@@ -20,9 +20,10 @@ var _ MappedNullable = &BTSMBendTableRowMetadata1705{}
 
 // BTSMBendTableRowMetadata1705 struct for BTSMBendTableRowMetadata1705
 type BTSMBendTableRowMetadata1705 struct {
+	BTBaseSMJointTableRowMetadata-2232
 	// Type of JSON object.
-	BtType              *string `json:"btType,omitempty"`
-	IsJointTypeEditable *bool   `json:"isJointTypeEditable,omitempty"`
+	BtType *string `json:"btType,omitempty"`
+	IsJointTypeEditable *bool `json:"isJointTypeEditable,omitempty"`
 }
 
 // NewBTSMBendTableRowMetadata1705 instantiates a new BTSMBendTableRowMetadata1705 object
@@ -107,7 +108,7 @@ func (o *BTSMBendTableRowMetadata1705) SetIsJointTypeEditable(v bool) {
 }
 
 func (o BTSMBendTableRowMetadata1705) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTSMBendTableRowMetadata1705) MarshalJSON() ([]byte, error) {
 
 func (o BTSMBendTableRowMetadata1705) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTBaseSMJointTableRowMetadata2232, errBTBaseSMJointTableRowMetadata2232 := json.Marshal(o.BTBaseSMJointTableRowMetadata2232)
+	if errBTBaseSMJointTableRowMetadata2232 != nil {
+		return map[string]interface{}{}, errBTBaseSMJointTableRowMetadata2232
+	}
+	errBTBaseSMJointTableRowMetadata2232 = json.Unmarshal([]byte(serializedBTBaseSMJointTableRowMetadata2232), &toSerialize)
+	if errBTBaseSMJointTableRowMetadata2232 != nil {
+		return map[string]interface{}{}, errBTBaseSMJointTableRowMetadata2232
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTSMBendTableRowMetadata1705) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btsm_definition_entity_type_filter_1651.go b/onshape/model_btsm_definition_entity_type_filter_1651.go
index 6bf7633ee..478959ca9 100644
--- a/onshape/model_btsm_definition_entity_type_filter_1651.go
+++ b/onshape/model_btsm_definition_entity_type_filter_1651.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTSMDefinitionEntityTypeFilter1651{}
 
 // BTSMDefinitionEntityTypeFilter1651 struct for BTSMDefinitionEntityTypeFilter1651
 type BTSMDefinitionEntityTypeFilter1651 struct {
+	BTQueryFilter-183
 	// Type of JSON object.
-	BtType                 *string        `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	SmDefinitionEntityType *GBTEntityType `json:"smDefinitionEntityType,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTSMDefinitionEntityTypeFilter1651) SetSmDefinitionEntityType(v GBTEnti
 }
 
 func (o BTSMDefinitionEntityTypeFilter1651) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTSMDefinitionEntityTypeFilter1651) MarshalJSON() ([]byte, error) {
 
 func (o BTSMDefinitionEntityTypeFilter1651) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTQueryFilter183, errBTQueryFilter183 := json.Marshal(o.BTQueryFilter183)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
+	errBTQueryFilter183 = json.Unmarshal([]byte(serializedBTQueryFilter183), &toSerialize)
+	if errBTQueryFilter183 != nil {
+		return map[string]interface{}{}, errBTQueryFilter183
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTSMDefinitionEntityTypeFilter1651) UnmarshalJSON(src []byte) e
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btsm_other_joint_table_row_metadata_2640.go b/onshape/model_btsm_other_joint_table_row_metadata_2640.go
index a64a98612..28d9bbcbe 100644
--- a/onshape/model_btsm_other_joint_table_row_metadata_2640.go
+++ b/onshape/model_btsm_other_joint_table_row_metadata_2640.go
@@ -20,6 +20,7 @@ var _ MappedNullable = &BTSMOtherJointTableRowMetadata2640{}
 
 // BTSMOtherJointTableRowMetadata2640 struct for BTSMOtherJointTableRowMetadata2640
 type BTSMOtherJointTableRowMetadata2640 struct {
+	BTBaseSMJointTableRowMetadata-2232
 	// Type of JSON object.
 	BtType *string `json:"btType,omitempty"`
 }
@@ -74,7 +75,7 @@ func (o *BTSMOtherJointTableRowMetadata2640) SetBtType(v string) {
 }
 
 func (o BTSMOtherJointTableRowMetadata2640) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -83,6 +84,14 @@ func (o BTSMOtherJointTableRowMetadata2640) MarshalJSON() ([]byte, error) {
 
 func (o BTSMOtherJointTableRowMetadata2640) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTBaseSMJointTableRowMetadata2232, errBTBaseSMJointTableRowMetadata2232 := json.Marshal(o.BTBaseSMJointTableRowMetadata2232)
+	if errBTBaseSMJointTableRowMetadata2232 != nil {
+		return map[string]interface{}{}, errBTBaseSMJointTableRowMetadata2232
+	}
+	errBTBaseSMJointTableRowMetadata2232 = json.Unmarshal([]byte(serializedBTBaseSMJointTableRowMetadata2232), &toSerialize)
+	if errBTBaseSMJointTableRowMetadata2232 != nil {
+		return map[string]interface{}{}, errBTBaseSMJointTableRowMetadata2232
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -124,3 +133,5 @@ func (v *NullableBTSMOtherJointTableRowMetadata2640) UnmarshalJSON(src []byte) e
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_btsm_specific_metadata_1315.go b/onshape/model_btsm_specific_metadata_1315.go
index ee1047c1d..dab8e7e3a 100644
--- a/onshape/model_btsm_specific_metadata_1315.go
+++ b/onshape/model_btsm_specific_metadata_1315.go
@@ -20,8 +20,9 @@ var _ MappedNullable = &BTSMSpecificMetadata1315{}
 
 // BTSMSpecificMetadata1315 struct for BTSMSpecificMetadata1315
 type BTSMSpecificMetadata1315 struct {
+	BTDomainSpecificMetadata-961
 	// Type of JSON object.
-	BtType               *string        `json:"btType,omitempty"`
+	BtType *string `json:"btType,omitempty"`
 	DefinitionEntityType *GBTEntityType `json:"definitionEntityType,omitempty"`
 }
 
@@ -107,7 +108,7 @@ func (o *BTSMSpecificMetadata1315) SetDefinitionEntityType(v GBTEntityType) {
 }
 
 func (o BTSMSpecificMetadata1315) MarshalJSON() ([]byte, error) {
-	toSerialize, err := o.ToMap()
+	toSerialize,err := o.ToMap()
 	if err != nil {
 		return []byte{}, err
 	}
@@ -116,6 +117,14 @@ func (o BTSMSpecificMetadata1315) MarshalJSON() ([]byte, error) {
 
 func (o BTSMSpecificMetadata1315) ToMap() (map[string]interface{}, error) {
 	toSerialize := map[string]interface{}{}
+	serializedBTDomainSpecificMetadata961, errBTDomainSpecificMetadata961 := json.Marshal(o.BTDomainSpecificMetadata961)
+	if errBTDomainSpecificMetadata961 != nil {
+		return map[string]interface{}{}, errBTDomainSpecificMetadata961
+	}
+	errBTDomainSpecificMetadata961 = json.Unmarshal([]byte(serializedBTDomainSpecificMetadata961), &toSerialize)
+	if errBTDomainSpecificMetadata961 != nil {
+		return map[string]interface{}{}, errBTDomainSpecificMetadata961
+	}
 	if !IsNil(o.BtType) {
 		toSerialize["btType"] = o.BtType
 	}
@@ -160,3 +169,5 @@ func (v *NullableBTSMSpecificMetadata1315) UnmarshalJSON(src []byte) error {
 	v.isSet = true
 	return json.Unmarshal(src, &v.value)
 }
+
+
diff --git a/onshape/model_callback.go b/onshape/model_callback.go
index 8140b7167..c19d1d80e 100644
--- a/onshape/model_callback.go
+++ b/onshape/model_callback.go
@@ -20,11 +20,14 @@ var _ MappedNullable = &Callback{}
 
 // Callback struct for Callback
 type Callback struct {
-	Empty      *bool                             `json:"empty,omitempty"`
-	Extensions map[string]map[string]interface{} `json:"extensions,omitempty"`
-	Getref     *string                           `json:"get$ref,omitempty"`
+	Empty                *bool                             `json:"empty,omitempty"`
+	Extensions           map[string]map[string]interface{} `json:"extensions,omitempty"`
+	Getref               *string                           `json:"get$ref,omitempty"`
+	AdditionalProperties map[string]interface{}
 }
 
+type _Callback Callback
+
 // NewCallback instantiates a new Callback object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -157,9 +160,37 @@ func (o Callback) ToMap() (map[string]interface{}, error) {
 	if !IsNil(o.Getref) {
 		toSerialize["get$ref"] = o.Getref
 	}
+
+	for key, value := range o.AdditionalProperties {
+		toSerialize[key] = value
+	}
+
 	return toSerialize, nil
 }
 
+func (o *Callback) UnmarshalJSON(data []byte) (err error) {
+	varCallback := _Callback{}
+
+	err = json.Unmarshal(data, &varCallback)
+
+	if err != nil {
+		return err
+	}
+
+	*o = Callback(varCallback)
+
+	additionalProperties := make(map[string]interface{})
+
+	if err = json.Unmarshal(data, &additionalProperties); err == nil {
+		delete(additionalProperties, "empty")
+		delete(additionalProperties, "extensions")
+		delete(additionalProperties, "get$ref")
+		o.AdditionalProperties = additionalProperties
+	}
+
+	return err
+}
+
 type NullableCallback struct {
 	value *Callback
 	isSet bool
diff --git a/onshape/model_item.go b/onshape/model_item.go
index a74b7658f..953cf9005 100644
--- a/onshape/model_item.go
+++ b/onshape/model_item.go
@@ -12,7 +12,9 @@ Contact: api-support@onshape.zendesk.com
 package onshape
 
 import (
+	"bytes"
 	"encoding/json"
+	"fmt"
 )
 
 // checks if the Item type satisfies the MappedNullable interface at compile time
@@ -38,6 +40,8 @@ type Item struct {
 	VersionName          *string                  `json:"versionName,omitempty"`
 }
 
+type _Item Item
+
 // NewItem instantiates a new Item object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -619,6 +623,43 @@ func (o Item) ToMap() (map[string]interface{}, error) {
 	return toSerialize, nil
 }
 
+func (o *Item) UnmarshalJSON(data []byte) (err error) {
+	// This validates that all required properties are included in the JSON object
+	// by unmarshalling the object into a generic map with string keys and checking
+	// that every required field exists as a key in the generic map.
+	requiredProperties := []string{
+		"jsonType",
+	}
+
+	allProperties := make(map[string]interface{})
+
+	err = json.Unmarshal(data, &allProperties)
+
+	if err != nil {
+		return err
+	}
+
+	for _, requiredProperty := range requiredProperties {
+		if _, exists := allProperties[requiredProperty]; !exists {
+			return fmt.Errorf("no value given for required property %v", requiredProperty)
+		}
+	}
+
+	varItem := _Item{}
+
+	decoder := json.NewDecoder(bytes.NewReader(data))
+	decoder.DisallowUnknownFields()
+	err = decoder.Decode(&varItem)
+
+	if err != nil {
+		return err
+	}
+
+	*o = Item(varItem)
+
+	return err
+}
+
 type NullableItem struct {
 	value *Item
 	isSet bool
diff --git a/onshape/model_o_auth_flow_scopes.go b/onshape/model_o_auth_flow_scopes.go
index be4ebee0e..5143ebc1f 100644
--- a/onshape/model_o_auth_flow_scopes.go
+++ b/onshape/model_o_auth_flow_scopes.go
@@ -20,10 +20,13 @@ var _ MappedNullable = &OAuthFlowScopes{}
 
 // OAuthFlowScopes struct for OAuthFlowScopes
 type OAuthFlowScopes struct {
-	Extensions map[string]map[string]interface{} `json:"extensions,omitempty"`
-	Empty      *bool                             `json:"empty,omitempty"`
+	Extensions           map[string]map[string]interface{} `json:"extensions,omitempty"`
+	Empty                *bool                             `json:"empty,omitempty"`
+	AdditionalProperties map[string]interface{}
 }
 
+type _OAuthFlowScopes OAuthFlowScopes
+
 // NewOAuthFlowScopes instantiates a new OAuthFlowScopes object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -121,9 +124,36 @@ func (o OAuthFlowScopes) ToMap() (map[string]interface{}, error) {
 	if !IsNil(o.Empty) {
 		toSerialize["empty"] = o.Empty
 	}
+
+	for key, value := range o.AdditionalProperties {
+		toSerialize[key] = value
+	}
+
 	return toSerialize, nil
 }
 
+func (o *OAuthFlowScopes) UnmarshalJSON(data []byte) (err error) {
+	varOAuthFlowScopes := _OAuthFlowScopes{}
+
+	err = json.Unmarshal(data, &varOAuthFlowScopes)
+
+	if err != nil {
+		return err
+	}
+
+	*o = OAuthFlowScopes(varOAuthFlowScopes)
+
+	additionalProperties := make(map[string]interface{})
+
+	if err = json.Unmarshal(data, &additionalProperties); err == nil {
+		delete(additionalProperties, "extensions")
+		delete(additionalProperties, "empty")
+		o.AdditionalProperties = additionalProperties
+	}
+
+	return err
+}
+
 type NullableOAuthFlowScopes struct {
 	value *OAuthFlowScopes
 	isSet bool
diff --git a/onshape/model_open_api_paths.go b/onshape/model_open_api_paths.go
index 290e62055..79c614ffe 100644
--- a/onshape/model_open_api_paths.go
+++ b/onshape/model_open_api_paths.go
@@ -20,10 +20,13 @@ var _ MappedNullable = &OpenAPIPaths{}
 
 // OpenAPIPaths struct for OpenAPIPaths
 type OpenAPIPaths struct {
-	Extensions map[string]map[string]interface{} `json:"extensions,omitempty"`
-	Empty      *bool                             `json:"empty,omitempty"`
+	Extensions           map[string]map[string]interface{} `json:"extensions,omitempty"`
+	Empty                *bool                             `json:"empty,omitempty"`
+	AdditionalProperties map[string]interface{}
 }
 
+type _OpenAPIPaths OpenAPIPaths
+
 // NewOpenAPIPaths instantiates a new OpenAPIPaths object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -121,9 +124,36 @@ func (o OpenAPIPaths) ToMap() (map[string]interface{}, error) {
 	if !IsNil(o.Empty) {
 		toSerialize["empty"] = o.Empty
 	}
+
+	for key, value := range o.AdditionalProperties {
+		toSerialize[key] = value
+	}
+
 	return toSerialize, nil
 }
 
+func (o *OpenAPIPaths) UnmarshalJSON(data []byte) (err error) {
+	varOpenAPIPaths := _OpenAPIPaths{}
+
+	err = json.Unmarshal(data, &varOpenAPIPaths)
+
+	if err != nil {
+		return err
+	}
+
+	*o = OpenAPIPaths(varOpenAPIPaths)
+
+	additionalProperties := make(map[string]interface{})
+
+	if err = json.Unmarshal(data, &additionalProperties); err == nil {
+		delete(additionalProperties, "extensions")
+		delete(additionalProperties, "empty")
+		o.AdditionalProperties = additionalProperties
+	}
+
+	return err
+}
+
 type NullableOpenAPIPaths struct {
 	value *OpenAPIPaths
 	isSet bool
diff --git a/onshape/model_operation_responses.go b/onshape/model_operation_responses.go
index f7ed49f28..4b75fea5a 100644
--- a/onshape/model_operation_responses.go
+++ b/onshape/model_operation_responses.go
@@ -20,11 +20,14 @@ var _ MappedNullable = &OperationResponses{}
 
 // OperationResponses struct for OperationResponses
 type OperationResponses struct {
-	Extensions map[string]map[string]interface{} `json:"extensions,omitempty"`
-	Default    *ApiResponse                      `json:"default,omitempty"`
-	Empty      *bool                             `json:"empty,omitempty"`
+	Extensions           map[string]map[string]interface{} `json:"extensions,omitempty"`
+	Default              *ApiResponse                      `json:"default,omitempty"`
+	Empty                *bool                             `json:"empty,omitempty"`
+	AdditionalProperties map[string]interface{}
 }
 
+type _OperationResponses OperationResponses
+
 // NewOperationResponses instantiates a new OperationResponses object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -157,9 +160,37 @@ func (o OperationResponses) ToMap() (map[string]interface{}, error) {
 	if !IsNil(o.Empty) {
 		toSerialize["empty"] = o.Empty
 	}
+
+	for key, value := range o.AdditionalProperties {
+		toSerialize[key] = value
+	}
+
 	return toSerialize, nil
 }
 
+func (o *OperationResponses) UnmarshalJSON(data []byte) (err error) {
+	varOperationResponses := _OperationResponses{}
+
+	err = json.Unmarshal(data, &varOperationResponses)
+
+	if err != nil {
+		return err
+	}
+
+	*o = OperationResponses(varOperationResponses)
+
+	additionalProperties := make(map[string]interface{})
+
+	if err = json.Unmarshal(data, &additionalProperties); err == nil {
+		delete(additionalProperties, "extensions")
+		delete(additionalProperties, "default")
+		delete(additionalProperties, "empty")
+		o.AdditionalProperties = additionalProperties
+	}
+
+	return err
+}
+
 type NullableOperationResponses struct {
 	value *OperationResponses
 	isSet bool
diff --git a/onshape/model_security_requirement.go b/onshape/model_security_requirement.go
index 3b42bfd10..e0a9b4b38 100644
--- a/onshape/model_security_requirement.go
+++ b/onshape/model_security_requirement.go
@@ -20,9 +20,12 @@ var _ MappedNullable = &SecurityRequirement{}
 
 // SecurityRequirement struct for SecurityRequirement
 type SecurityRequirement struct {
-	Empty *bool `json:"empty,omitempty"`
+	Empty                *bool `json:"empty,omitempty"`
+	AdditionalProperties map[string]interface{}
 }
 
+type _SecurityRequirement SecurityRequirement
+
 // NewSecurityRequirement instantiates a new SecurityRequirement object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -85,9 +88,35 @@ func (o SecurityRequirement) ToMap() (map[string]interface{}, error) {
 	if !IsNil(o.Empty) {
 		toSerialize["empty"] = o.Empty
 	}
+
+	for key, value := range o.AdditionalProperties {
+		toSerialize[key] = value
+	}
+
 	return toSerialize, nil
 }
 
+func (o *SecurityRequirement) UnmarshalJSON(data []byte) (err error) {
+	varSecurityRequirement := _SecurityRequirement{}
+
+	err = json.Unmarshal(data, &varSecurityRequirement)
+
+	if err != nil {
+		return err
+	}
+
+	*o = SecurityRequirement(varSecurityRequirement)
+
+	additionalProperties := make(map[string]interface{})
+
+	if err = json.Unmarshal(data, &additionalProperties); err == nil {
+		delete(additionalProperties, "empty")
+		o.AdditionalProperties = additionalProperties
+	}
+
+	return err
+}
+
 type NullableSecurityRequirement struct {
 	value *SecurityRequirement
 	isSet bool
diff --git a/onshape/model_server_variables.go b/onshape/model_server_variables.go
index 4f03b71b3..021623976 100644
--- a/onshape/model_server_variables.go
+++ b/onshape/model_server_variables.go
@@ -20,10 +20,13 @@ var _ MappedNullable = &ServerVariables{}
 
 // ServerVariables struct for ServerVariables
 type ServerVariables struct {
-	Extensions map[string]map[string]interface{} `json:"extensions,omitempty"`
-	Empty      *bool                             `json:"empty,omitempty"`
+	Extensions           map[string]map[string]interface{} `json:"extensions,omitempty"`
+	Empty                *bool                             `json:"empty,omitempty"`
+	AdditionalProperties map[string]interface{}
 }
 
+type _ServerVariables ServerVariables
+
 // NewServerVariables instantiates a new ServerVariables object
 // This constructor will assign default values to properties that have it defined,
 // and makes sure properties required by API are set, but the set of arguments
@@ -121,9 +124,36 @@ func (o ServerVariables) ToMap() (map[string]interface{}, error) {
 	if !IsNil(o.Empty) {
 		toSerialize["empty"] = o.Empty
 	}
+
+	for key, value := range o.AdditionalProperties {
+		toSerialize[key] = value
+	}
+
 	return toSerialize, nil
 }
 
+func (o *ServerVariables) UnmarshalJSON(data []byte) (err error) {
+	varServerVariables := _ServerVariables{}
+
+	err = json.Unmarshal(data, &varServerVariables)
+
+	if err != nil {
+		return err
+	}
+
+	*o = ServerVariables(varServerVariables)
+
+	additionalProperties := make(map[string]interface{})
+
+	if err = json.Unmarshal(data, &additionalProperties); err == nil {
+		delete(additionalProperties, "extensions")
+		delete(additionalProperties, "empty")
+		o.AdditionalProperties = additionalProperties
+	}
+
+	return err
+}
+
 type NullableServerVariables struct {
 	value *ServerVariables
 	isSet bool
diff --git a/onshape/utils.go b/onshape/utils.go
index 040141360..f975a2a1d 100644
--- a/onshape/utils.go
+++ b/onshape/utils.go
@@ -321,7 +321,7 @@ func NewNullableTime(val *time.Time) *NullableTime {
 }
 
 func (v NullableTime) MarshalJSON() ([]byte, error) {
-	return v.value.MarshalJSON()
+	return json.Marshal(v.value)
 }
 
 func (v *NullableTime) UnmarshalJSON(src []byte) error {
